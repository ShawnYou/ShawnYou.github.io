{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/复仇者联盟-美国队长 16.png","path":"images/复仇者联盟-美国队长 16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/复仇者联盟-美国队长32.png","path":"images/复仇者联盟-美国队长32.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/复仇者联盟-黑豹16.png","path":"images/复仇者联盟-黑豹16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/奇异博士16.png","path":"images/奇异博士16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/复仇者联盟-黑豹32.png","path":"images/复仇者联盟-黑豹32.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/奇异博士32.png","path":"images/奇异博士32.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/格鲁特32.png","path":"images/格鲁特32.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/灭霸16.png","path":"images/灭霸16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/格鲁特16.png","path":"images/格鲁特16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/灭霸32.png","path":"images/灭霸32.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.DS_Store","hash":"4e9b1be42f4747a88178c927c42534dc97f710a2","modified":1553328340820},{"_id":"source/.DS_Store","hash":"a10048a3b2abf3a5b28aaaae59c45d723143e476","modified":1555252387657},{"_id":"source/CNAME","hash":"d48badce59c97e2412dd5e8fb14662bf3cb30bfa","modified":1553307874798},{"_id":"themes/next/_config.yml","hash":"a127ac2f2cf454887fb4ac80951594fac4b1cad4","modified":1555253791756},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1552785255417},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1552785255419},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1552785255418},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1552785255417},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1552785255420},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1552785255449},{"_id":"source/_posts/.DS_Store","hash":"d198772147a85c9df7fa30bf3ebdcacc4dfcdc5d","modified":1555252388759},{"_id":"source/_posts/中介者模式.md","hash":"0a96ceb348afd6894d97e37563a0acda2f0b96e9","modified":1555251211240},{"_id":"source/_posts/代理模式.md","hash":"a1104ea2eca2c08822978a2b5813fa3b629fd005","modified":1555251216023},{"_id":"source/_posts/单一职责原则.md","hash":"f4b2e63b942e8b6fb6a5eb6c34484d2828cc8980","modified":1555251230890},{"_id":"source/_posts/单例模式.md","hash":"3e5172e37602c5ba415864fa6b0a66dfb12ca53d","modified":1555251249994},{"_id":"source/_posts/原型模式.md","hash":"cb6f24b8d1cc7a6a746f4a7a97edc991cb68cec4","modified":1555251252187},{"_id":"source/_posts/工厂模式.md","hash":"bbbdadf28afcf56f3f9c945049a09c42295eb5ff","modified":1555251226634},{"_id":"source/_posts/命令模式.md","hash":"45c5d9244fd3a66a44fdea9a378be04a4043c2db","modified":1555251224597},{"_id":"source/_posts/建造者模式.md","hash":"7ae1f32a7681ccbfa5c3929837d0ae4e15addfdb","modified":1555251256415},{"_id":"source/_posts/开闭原则.md","hash":"8a467c5a00bd24d8f7159a246b8e17bb2265ea37","modified":1554011788348},{"_id":"source/_posts/接口隔离原则.md","hash":"73c383ae23c1e5e8751c505684f0ec516518963b","modified":1554011786270},{"_id":"source/_posts/模板模式.md","hash":"49647c68f74c79f2dd638691dd1bcf3d7a0cc7b3","modified":1554011795896},{"_id":"source/_posts/策略模式.md","hash":"55f730e47b898d46aa6dcdbae6f175b44fb407e6","modified":1555242795621},{"_id":"source/_posts/责任链模式.md","hash":"c5986cfb65e391782c00211350c6fd3aaf938d78","modified":1555242873649},{"_id":"source/_posts/装饰器模式.md","hash":"027ec92f11ca4853ca46862fcbbe6cf4fce4cfa7","modified":1555242847979},{"_id":"source/_posts/里氏替换原则.md","hash":"d65830fb58f14ad4691aee2195a6c9a2c1502deb","modified":1555242414874},{"_id":"source/_posts/迪米特法则.md","hash":"ec7047d5f8377823f6d6115db830fe5a4d7b19d0","modified":1555242898070},{"_id":"source/_posts/适配器模式.md","hash":"2efefeaaa5a0216cc3a8f917994772f484b4bfda","modified":1555242417636},{"_id":"source/about/index.md","hash":"9dd1a8c2cce661cad5eede95ccde2b7f70edec72","modified":1552793522396},{"_id":"source/categories/index.md","hash":"c89ca587f16e0f0f5dbc6011878b46b618f01fa4","modified":1552798193930},{"_id":"source/tags/index.md","hash":"408854f066891931b12a24618f7f71bae95d6c44","modified":1552787137025},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1552785255420},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1552785255420},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1552785255420},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1552785255421},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1552785255421},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1552785255421},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1552785255421},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1552785255422},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1552785255422},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1552785255422},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1552785255422},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1552785255422},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1552785255423},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1552785255423},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1552785255423},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1552785255423},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1553324989974},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1552785255446},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1552785255447},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1552785255447},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1552785255447},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1552785255448},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1552785255448},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1552785255448},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1552785255449},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1552785255450},{"_id":"themes/next/source/.DS_Store","hash":"9adfd3185fadd0dfee920c8c691b120be96c18f3","modified":1553331262060},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1552785255565},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1552785255564},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1552785255565},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552785255486},{"_id":"source/_posts/effectiveJava/装饰器模式.md","hash":"11741c8cb32b4c83a994652de8957d10d36e30ab","modified":1555252829576},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1552785255425},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1552785255424},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1552785255424},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1552785255426},{"_id":"themes/next/layout/_macro/post.swig","hash":"f37d620a25181cf03737b2a127c1d98d7b4d05f8","modified":1555243948381},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1552785255426},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1552785255427},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1552785255427},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1552785255427},{"_id":"themes/next/layout/_partials/footer.swig","hash":"6643ed716752b7b516b07241d10c8261dedf4c95","modified":1553270657751},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1552785255428},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1552785255429},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1552785255429},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1552785255430},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1552785255430},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1552785255433},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1552785255433},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1552785255435},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1552785255442},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1552785255442},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1552785255443},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1552785255443},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1552785255443},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1552785255444},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1552785255444},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1552785255450},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1552785255450},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1552785255451},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1552785255451},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1552785255452},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1552785255452},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1552785255452},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1552785255453},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1552785255453},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1552797545906},{"_id":"themes/next/source/images/.DS_Store","hash":"4036306f9a467f1f36466e5b6e43a4f25dda795d","modified":1553349345812},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1552785255487},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1552785255487},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1552785255487},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1552785255488},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1552785255488},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1552785255489},{"_id":"themes/next/source/images/avatar.jpeg","hash":"a71bdf73921806d222786486b5b60e520f9b1752","modified":1552487639446},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1552785255489},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1552785255490},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1552785255491},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1552785255490},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1552785255491},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1552785255491},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1552785255492},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1552785255492},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1552785255493},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1552785255493},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1552785255493},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1552785255493},{"_id":"themes/next/source/images/复仇者联盟-美国队长 16.png","hash":"b1f3628cfc8187087561fbd129cf5cad176a6a05","modified":1552790532000},{"_id":"themes/next/source/images/复仇者联盟-美国队长32.png","hash":"7e8ac965d271594ab36368ed37095ea01ce2985b","modified":1552790524441},{"_id":"themes/next/source/images/复仇者联盟-黑豹16.png","hash":"088c8dbf6b8209de3e4485dea11d5d5b10c49b29","modified":1552790594175},{"_id":"themes/next/source/images/奇异博士16.png","hash":"0deee4f862c1f427dbf9529bf605b238166d0758","modified":1552790579360},{"_id":"themes/next/source/images/复仇者联盟-黑豹32.png","hash":"abb38537027e50efcdf3b617d4ca81859e6a959a","modified":1552790591633},{"_id":"themes/next/source/images/奇异博士32.png","hash":"a2f62ebbc952713a60f064abde976491ead1727c","modified":1552790576157},{"_id":"themes/next/source/images/格鲁特32.png","hash":"9f76fa68a0bdc4fdc755c954be3d09a999453302","modified":1552790549712},{"_id":"themes/next/source/images/灭霸16.png","hash":"2c1c0df9703d6df3c66a02715c1a67ce9e5201e4","modified":1552790562266},{"_id":"themes/next/source/images/格鲁特16.png","hash":"f06edf3e9357bad57eb5f573c37efce1601de733","modified":1552790544405},{"_id":"themes/next/source/images/灭霸32.png","hash":"ca06bdd62fe49e86ce9f0972bc50c4b98c3d44ec","modified":1552790559403},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552785255434},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552785255435},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552785255477},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552785255477},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552785255477},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552785255485},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552785255486},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1552785255428},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1552785255429},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1552785255430},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1552785255431},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1552785255431},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1552785255431},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1552785255432},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1552785255432},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1552785255433},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1552785255434},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1552785255434},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1552785255435},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1552785255436},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1552785255436},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1552785255436},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1552785255437},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1552785255437},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1552785255438},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1552785255438},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1552785255438},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"4aa55cd424389cf5626aa019c15ef6f3e4da09f2","modified":1552807009867},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1552785255439},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1552785255438},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1552785255439},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1552785255439},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1552785255440},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1552785255440},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1552785255440},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1552785255441},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1552785255440},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1552785255441},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1552785255441},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1552785255442},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1552785255442},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1552785255445},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1552785255446},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1552785255446},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1552785255445},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1552785255477},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1552785255477},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"8eca841500930b8e2691243cfb415953ea2a0a60","modified":1553327984835},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1552785255476},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1552785255485},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1552785255485},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1552785255485},{"_id":"themes/next/source/css/_variables/base.styl","hash":"54f130bfe2e1529f9f47d35104cb457a2890aab6","modified":1552798064261},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1552785255494},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1552785255494},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1552785255495},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1552785255496},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1552785255496},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1552785255496},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1552785255496},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1552785255497},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1552785255498},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1552785255498},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1552785255498},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1552785255504},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1552785255508},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1552785255509},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1552785255509},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1552785255509},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1552785255516},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1552785255517},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1552785255517},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1552785255517},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1552785255519},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1552785255519},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1552785255519},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1552785255520},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1552785255520},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1552785255536},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1552785255539},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1552785255539},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1552785255540},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1552785255540},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1552785255541},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1552785255540},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1552785255542},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1552785255541},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1552785255543},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1552785255543},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1552785255542},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1552785255544},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1552785255544},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1552785255544},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1552785255545},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1552785255545},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1552785255545},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1552785255546},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1552785255546},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1552785255547},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1552785255547},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1552785255546},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1552785255547},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1552785255548},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1552785255548},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1552785255549},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1552785255556},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1552785255556},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1552785255563},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1552785255560},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1552785255561},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1552785255538},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1552785255445},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1552785255444},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1552785255454},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1552785255455},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1552785255454},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1552785255454},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1552785255455},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1552785255459},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1552785255467},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1552785255474},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1552785255474},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1552785255474},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1552785255475},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1552785255475},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1552785255475},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1552785255476},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1552785255478},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1552785255478},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1552785255478},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1552785255479},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1552785255479},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1552785255480},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"87097d8a2dcd06c7e0550c914cb6f3c430cdfa76","modified":1552797714944},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"fb1fe1e86e9198ea470dbd8de2bb13ef21e30a45","modified":1552797272781},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1552785255481},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1552785255481},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1552785255481},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1552785255482},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1552785255482},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1552785255483},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1552785255483},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1552785255483},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1552785255484},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1552785255484},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1552785255484},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1552785255497},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1552785255501},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1552785255503},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1552785255504},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1552785255510},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1552785255510},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1552785255511},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1552785255511},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1552785255511},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1552785255512},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1552785255514},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1552785255515},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1552785255514},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1552785255518},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1552785255518},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1552785255521},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1552785255521},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1552785255521},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1552785255555},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1552785255555},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1552785255502},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1552785255534},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1552785255535},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1552785255559},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1552785255455},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1552785255456},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1552785255456},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1552785255456},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"5801fd3bb6ebfcc9bad53a86d004519d0ec1a3b6","modified":1553328798306},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1552785255457},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1552785255457},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1552785255458},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1552785255458},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1552785255457},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1552785255458},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1552785255459},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1552785255459},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1552785255460},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1552785255460},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1552785255460},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1552785255461},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1552785255459},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1552785255461},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1552785255461},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1552785255462},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1552785255462},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1552785255462},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1552785255462},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1552785255463},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1552785255463},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1552785255463},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1552785255463},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1552785255464},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"1afbb3ae0f6ef4e230bdf0d120611da46d194f15","modified":1552788459608},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1552785255465},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"f6974845a3d0014af3cbf5bade92c44009c9da9d","modified":1552788772782},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1552785255465},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1552785255465},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1552785255466},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1552785255466},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1552785255466},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1552785255466},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1552785255467},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1552785255467},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1552785255468},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1552785255468},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1552785255468},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1552785255469},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1552785255469},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1552785255469},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1552785255470},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1552785255470},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1552785255470},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1552785255471},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1552785255471},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1552785255472},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1552785255471},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1552785255472},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1552785255472},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1552785255473},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1552785255473},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1552785255473},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1552785255480},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1552785255480},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1552785255482},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1552785255499},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1552785255500},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1552785255500},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1552785255501},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1552785255501},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1552785255512},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1552785255512},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1552785255513},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1552785255512},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1552785255513},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1552785255513},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1552785255533},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1552785255524},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1552785255526},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1552785255508},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1552785255531},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1552785255554},{"_id":"public/atom.xml","hash":"96dae44673e9ea77c65f35d8430483bdc6c2fa27","modified":1555253807156},{"_id":"public/search.xml","hash":"14dea50abe8fae6eba0aaee5f2d2f48d55d40525","modified":1555253807156},{"_id":"public/about/index.html","hash":"b3544931aa297e3825f94339c6362d09c9800c68","modified":1555253807179},{"_id":"public/categories/index.html","hash":"04d9d5cb10a47ef735ea7257c716d0143b20de8a","modified":1555253807179},{"_id":"public/tags/index.html","hash":"b7202b7604245af176c20fd3479dd5eb210fb7ec","modified":1555253807179},{"_id":"public/2019/04/14/适配器模式/index.html","hash":"8dca913a7ab553d2d579b2c91b412b3912876066","modified":1555253807179},{"_id":"public/2019/04/13/策略模式/index.html","hash":"8ba3ab3552bbcb51b93e62d16cacb1523fe93ad1","modified":1555253807179},{"_id":"public/2019/04/13/effectiveJava/装饰器模式/index.html","hash":"0e79946bc8f42b531aba081af50a3b9fce2178cd","modified":1555253807179},{"_id":"public/2019/04/13/装饰器模式/index.html","hash":"8003f7608be2118feb1ef1db87be1870f7afd2b2","modified":1555253807179},{"_id":"public/2019/04/13/责任链模式/index.html","hash":"970cdfcb4bcce60752a35f1978a074981136e73f","modified":1555253807179},{"_id":"public/2019/04/09/命令模式/index.html","hash":"840b3edbec3aff9f60fe1ab459dfeb321d03eda3","modified":1555253807179},{"_id":"public/2019/04/06/原型模式/index.html","hash":"3bc1f1e4eaf1efead5ae37ca4f0d83314cea0c6e","modified":1555253807179},{"_id":"public/2019/04/05/代理模式/index.html","hash":"64b8213d12a9393930977f4cb0b4f6bf364c804e","modified":1555253807179},{"_id":"public/2019/04/05/中介者模式/index.html","hash":"f798346785250fdb1f02692754ccdc13d02f83e5","modified":1555253807179},{"_id":"public/2019/04/03/建造者模式/index.html","hash":"6245dd60f620fe2b1f2db57681ee9641a4e19162","modified":1555253807180},{"_id":"public/2019/03/25/模板模式/index.html","hash":"01a9c1180e3b36d9ad6e7f69e9566c2e5cbd1f54","modified":1555253807180},{"_id":"public/2019/03/24/工厂模式/index.html","hash":"60016391efb60bf8187d4829396c3989cd25848b","modified":1555253807180},{"_id":"public/2019/03/23/单例模式/index.html","hash":"70317639a70da8ad0656b457acb7825c26f9d475","modified":1555253807180},{"_id":"public/2019/03/22/单一职责原则/index.html","hash":"0c306c69717042121abbed0cb9cd1c772f2ae289","modified":1555253807180},{"_id":"public/2019/03/22/迪米特法则/index.html","hash":"4e8334beca4d229ad8fc77d30d8679420c14b207","modified":1555253807180},{"_id":"public/2019/03/22/里氏替换原则/index.html","hash":"5558ef7c40b2cd899ba6a9b883c7fef729f0bfd8","modified":1555253807180},{"_id":"public/2019/03/22/接口隔离原则/index.html","hash":"77d1fac20e2f8e8f61c11983ad35ea9e9b90e6d1","modified":1555253807180},{"_id":"public/2019/03/22/开闭原则/index.html","hash":"132dff39357aa6f9b277be81b6066e69fae42312","modified":1555253807180},{"_id":"public/archives/index.html","hash":"50fd4fdc1114b30b6258f85ae53c29b2f191082d","modified":1555253807180},{"_id":"public/archives/page/2/index.html","hash":"a4615492bde15a078f85cc9be8460dd4f2e933eb","modified":1555253807180},{"_id":"public/archives/2019/index.html","hash":"fc0ab29e00eef90c80b2cc8e30c4ae9783655767","modified":1555253807180},{"_id":"public/archives/2019/page/2/index.html","hash":"289a88c51bedc011f7c0675ddab9f0b1d5671877","modified":1555253807180},{"_id":"public/archives/2019/03/index.html","hash":"4e9bd00e9985d69bd3b59d5aa8e42cc29ea9ba8c","modified":1555253807180},{"_id":"public/archives/2019/04/index.html","hash":"921a26b71c9d6bdd96583e2ae8541ab557762356","modified":1555253807181},{"_id":"public/categories/设计模式/index.html","hash":"d0046d9e7dde095a333752de0270366ef18290ec","modified":1555253807181},{"_id":"public/categories/设计模式/page/2/index.html","hash":"79392ea67db730131f06977e9f784b4222e2f598","modified":1555253807181},{"_id":"public/categories/读书笔记-Effective-Java/index.html","hash":"76a06515d31e83e7f46edf7a89ce8acc1dcfbfc9","modified":1555253807181},{"_id":"public/index.html","hash":"e705caa0a3713bffe079211e2c14988f50e2fed4","modified":1555253807181},{"_id":"public/page/2/index.html","hash":"47747ea7cfec386c35ae135fbb58d657be5bdbdf","modified":1555253807181},{"_id":"public/page/3/index.html","hash":"a1e7041ac9671ae4ee4d06d57c459efcfc551943","modified":1555253807181},{"_id":"public/page/4/index.html","hash":"c5a7591bb9c831ad33d2a88ccab3b08be90d6d7d","modified":1555253807181},{"_id":"public/tags/Design/index.html","hash":"779e0e58fdca072dce8a333ffc3cc664d783c7b1","modified":1555253807181},{"_id":"public/tags/Design/page/2/index.html","hash":"d3b173836105d9fe4923ec36e859aa6f296529ba","modified":1555253807181},{"_id":"public/tags/Notes/index.html","hash":"7df15bd93b64de17f01bf98dc7506cb2a94f3ffa","modified":1555253807181},{"_id":"public/CNAME","hash":"d48badce59c97e2412dd5e8fb14662bf3cb30bfa","modified":1555253807188},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1555253807189},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1555253807189},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1555253807189},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1555253807189},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1555253807189},{"_id":"public/images/avatar.jpeg","hash":"a71bdf73921806d222786486b5b60e520f9b1752","modified":1555253807189},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1555253807189},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1555253807189},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1555253807189},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1555253807189},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1555253807189},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1555253807189},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1555253807189},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555253807189},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1555253807189},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555253807189},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1555253807190},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1555253807190},{"_id":"public/images/复仇者联盟-美国队长 16.png","hash":"b1f3628cfc8187087561fbd129cf5cad176a6a05","modified":1555253807190},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1555253807190},{"_id":"public/images/复仇者联盟-美国队长32.png","hash":"7e8ac965d271594ab36368ed37095ea01ce2985b","modified":1555253807190},{"_id":"public/images/复仇者联盟-黑豹16.png","hash":"088c8dbf6b8209de3e4485dea11d5d5b10c49b29","modified":1555253807190},{"_id":"public/images/奇异博士16.png","hash":"0deee4f862c1f427dbf9529bf605b238166d0758","modified":1555253807190},{"_id":"public/images/复仇者联盟-黑豹32.png","hash":"abb38537027e50efcdf3b617d4ca81859e6a959a","modified":1555253807190},{"_id":"public/images/奇异博士32.png","hash":"a2f62ebbc952713a60f064abde976491ead1727c","modified":1555253807190},{"_id":"public/images/格鲁特32.png","hash":"9f76fa68a0bdc4fdc755c954be3d09a999453302","modified":1555253807190},{"_id":"public/images/灭霸16.png","hash":"2c1c0df9703d6df3c66a02715c1a67ce9e5201e4","modified":1555253807190},{"_id":"public/images/格鲁特16.png","hash":"f06edf3e9357bad57eb5f573c37efce1601de733","modified":1555253807190},{"_id":"public/images/灭霸32.png","hash":"ca06bdd62fe49e86ce9f0972bc50c4b98c3d44ec","modified":1555253807191},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1555253807191},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1555253807191},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1555253807191},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1555253807191},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1555253807191},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1555253807191},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1555253807191},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1555253807191},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1555253807191},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1555253807191},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1555253807192},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1555253807192},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1555253807192},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1555253807192},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1555253807192},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1555253807722},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1555253807726},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1555253807737},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1555253807737},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1555253807738},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1555253807738},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1555253807738},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1555253807738},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1555253807738},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1555253807738},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1555253807738},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1555253807739},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1555253807739},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1555253807739},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1555253807739},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1555253807739},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1555253807739},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1555253807739},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1555253807739},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1555253807739},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1555253807739},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1555253807739},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1555253807739},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1555253807739},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1555253807740},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1555253807740},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1555253807740},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1555253807740},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1555253807740},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1555253807740},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1555253807740},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1555253807740},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1555253807740},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1555253807740},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1555253807740},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1555253807740},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1555253807740},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1555253807740},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1555253807741},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1555253807741},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1555253807741},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1555253807741},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1555253807741},{"_id":"public/css/main.css","hash":"73255f6fa9faaa20d1704d249406431a9acd493b","modified":1555253807741},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1555253807741},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1555253807741},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1555253807750},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1555253807750},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1555253807750},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1555253807750},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1555253807751},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1555253807751},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1555253807751},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1555253807751},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1555253807751},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1555253807755},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1555253807755},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1555253807757},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1555253807757},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1555253807803},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1555253807804},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1555253807806},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1555253807806},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1555253807806},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1555253807807},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1555253807807},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1555253807829},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1555253807829},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1555253807830},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1555253807834},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1555253807852},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1555253807852},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1555253807856},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1555253807888},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1555253807902},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1555253807908}],"Category":[{"name":"设计模式","_id":"cjuh1yjok0004w3s6xhmx36cm"},{"name":"读书笔记(Effective Java)","_id":"cjuh1yjsl001pw3s62503er01"}],"Data":[],"Page":[{"title":"about","date":"2019-03-17T03:31:28.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-03-17 11:31:28\ntype: \"about\"\n---\n","updated":"2019-03-17T03:32:02.396Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjuh1yjoe0001w3s6o5uj69bg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-03-17T04:48:51.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-03-17 12:48:51\ntype: \"categories\"\n---\n","updated":"2019-03-17T04:49:53.930Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjuh1yjoh0003w3s61pw3gx4o","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-03-17T01:44:44.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-03-17 09:44:44\ntype: \"tags\"\n---\n","updated":"2019-03-17T01:45:37.025Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjuh1yjon0007w3s6pejl9601","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"单一职责原则","date":"2019-03-22T15:25:15.000Z","_content":"\n![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-290-thumbnail-small.jpg)\n<!-- more -->\n\n### 单一职责原则\n\n应该有且只有一个原因引起累的变更。\n\n### 一个例子去理解单一职责原则\n\n```java\npublic interface IPhone {\n    //接通\n    public void dial(String phoneNumber);\n    //聊天\n    public void chat(Object o);\n    //挂断\n    public void hangup();\n}\n```\n定义了一个Iphone的接口，包含了电话的三个功能，接通、聊天、挂断。 试想一下这个接口符合单一职责原则吗？（一个类或者接口只有一个原因引起变化） \n\n很明显，IPhone包括了两个职责,应该设计成两个接口。\n\n1. 信号的接通与果断\n2. 通话（数据传输）\n\n```java\npublic interface IConnectionManager {\n    void dial(String phoneNumber);\n\n    void hangup();\n}\n```\n\n```java\npublic interface IDataTransfer {\n    void transfer();\n}\n```\n\n### 单一职责原则的好处\n1. 降低类的复杂度，职责清晰、明确\n2. 复杂度降低，可读性提高\n3. 可维护性提高\n4. 变更的风险降低\n\n### 职责没有量化的标准\n类的单一职责原则受非常多的网因素制约，从理论上是非常优秀，但从实际的角度上来讲，单一职责原却难以落地。类职责的划分没有量化的标准，因为职责和变化原因都是不可度量的，因项目而异，因环境而异。\n\n\n\n\n\n","source":"_posts/单一职责原则.md","raw":"---\ntitle: 单一职责原则\ndate: 2019-03-22 23:25:15\ntags: Design\ncategories: 设计模式\n---\n\n![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-290-thumbnail-small.jpg)\n<!-- more -->\n\n### 单一职责原则\n\n应该有且只有一个原因引起累的变更。\n\n### 一个例子去理解单一职责原则\n\n```java\npublic interface IPhone {\n    //接通\n    public void dial(String phoneNumber);\n    //聊天\n    public void chat(Object o);\n    //挂断\n    public void hangup();\n}\n```\n定义了一个Iphone的接口，包含了电话的三个功能，接通、聊天、挂断。 试想一下这个接口符合单一职责原则吗？（一个类或者接口只有一个原因引起变化） \n\n很明显，IPhone包括了两个职责,应该设计成两个接口。\n\n1. 信号的接通与果断\n2. 通话（数据传输）\n\n```java\npublic interface IConnectionManager {\n    void dial(String phoneNumber);\n\n    void hangup();\n}\n```\n\n```java\npublic interface IDataTransfer {\n    void transfer();\n}\n```\n\n### 单一职责原则的好处\n1. 降低类的复杂度，职责清晰、明确\n2. 复杂度降低，可读性提高\n3. 可维护性提高\n4. 变更的风险降低\n\n### 职责没有量化的标准\n类的单一职责原则受非常多的网因素制约，从理论上是非常优秀，但从实际的角度上来讲，单一职责原却难以落地。类职责的划分没有量化的标准，因为职责和变化原因都是不可度量的，因项目而异，因环境而异。\n\n\n\n\n\n","slug":"单一职责原则","published":1,"updated":"2019-04-14T14:13:50.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjo90000w3s6d6y4h1nb","content":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-290-thumbnail-small.jpg\" alt><br><a id=\"more\"></a></p>\n<h3 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h3><p>应该有且只有一个原因引起累的变更。</p>\n<h3 id=\"一个例子去理解单一职责原则\"><a href=\"#一个例子去理解单一职责原则\" class=\"headerlink\" title=\"一个例子去理解单一职责原则\"></a>一个例子去理解单一职责原则</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IPhone</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//接通</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dial</span><span class=\"params\">(String phoneNumber)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//聊天</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">chat</span><span class=\"params\">(Object o)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//挂断</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hangup</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义了一个Iphone的接口，包含了电话的三个功能，接通、聊天、挂断。 试想一下这个接口符合单一职责原则吗？（一个类或者接口只有一个原因引起变化） </p>\n<p>很明显，IPhone包括了两个职责,应该设计成两个接口。</p>\n<ol>\n<li>信号的接通与果断</li>\n<li>通话（数据传输）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IConnectionManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dial</span><span class=\"params\">(String phoneNumber)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hangup</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IDataTransfer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">transfer</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"单一职责原则的好处\"><a href=\"#单一职责原则的好处\" class=\"headerlink\" title=\"单一职责原则的好处\"></a>单一职责原则的好处</h3><ol>\n<li>降低类的复杂度，职责清晰、明确</li>\n<li>复杂度降低，可读性提高</li>\n<li>可维护性提高</li>\n<li>变更的风险降低</li>\n</ol>\n<h3 id=\"职责没有量化的标准\"><a href=\"#职责没有量化的标准\" class=\"headerlink\" title=\"职责没有量化的标准\"></a>职责没有量化的标准</h3><p>类的单一职责原则受非常多的网因素制约，从理论上是非常优秀，但从实际的角度上来讲，单一职责原却难以落地。类职责的划分没有量化的标准，因为职责和变化原因都是不可度量的，因项目而异，因环境而异。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-290-thumbnail-small.jpg\" alt><br>","more":"</p>\n<h3 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h3><p>应该有且只有一个原因引起累的变更。</p>\n<h3 id=\"一个例子去理解单一职责原则\"><a href=\"#一个例子去理解单一职责原则\" class=\"headerlink\" title=\"一个例子去理解单一职责原则\"></a>一个例子去理解单一职责原则</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IPhone</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//接通</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dial</span><span class=\"params\">(String phoneNumber)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//聊天</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">chat</span><span class=\"params\">(Object o)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//挂断</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hangup</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义了一个Iphone的接口，包含了电话的三个功能，接通、聊天、挂断。 试想一下这个接口符合单一职责原则吗？（一个类或者接口只有一个原因引起变化） </p>\n<p>很明显，IPhone包括了两个职责,应该设计成两个接口。</p>\n<ol>\n<li>信号的接通与果断</li>\n<li>通话（数据传输）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IConnectionManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dial</span><span class=\"params\">(String phoneNumber)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hangup</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IDataTransfer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">transfer</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"单一职责原则的好处\"><a href=\"#单一职责原则的好处\" class=\"headerlink\" title=\"单一职责原则的好处\"></a>单一职责原则的好处</h3><ol>\n<li>降低类的复杂度，职责清晰、明确</li>\n<li>复杂度降低，可读性提高</li>\n<li>可维护性提高</li>\n<li>变更的风险降低</li>\n</ol>\n<h3 id=\"职责没有量化的标准\"><a href=\"#职责没有量化的标准\" class=\"headerlink\" title=\"职责没有量化的标准\"></a>职责没有量化的标准</h3><p>类的单一职责原则受非常多的网因素制约，从理论上是非常优秀，但从实际的角度上来讲，单一职责原却难以落地。类职责的划分没有量化的标准，因为职责和变化原因都是不可度量的，因项目而异，因环境而异。</p>"},{"title":"中介者模式","date":"2019-04-05T01:13:59.000Z","_content":"\n![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-157-thumbnail-small.jpg)\n<!-- more -->\n\n### 中介者模式\n\n#### 如何理解中介者模式\n\n复杂的进销存系统类图\n\n### 类图\n\n+ 虽然不同类型的参与者完成各自的活动，但是每个类相互关联耦合\n+ 每个类与多个朋友类相互交互，朋友类越多，耦合性越大，要修改一个，就得修改一大片--- 违反迪米特法则\n+ 不同参与者之间交互过于复杂，维护比较困难\n\n使用一个中介者对象，他将各个对象之间的交互封装起来作为一个中间桥梁，降低各个参与者的耦合性。\n\n#### 中介者类图\n\n+ 每个参与者只负责自己的业务逻辑，不属于自己的交给中介者去处理\n+ 每个参与者不再交互交流，简化了各模块间的耦合性\n\n1. 抽象中介者类\n\n定义统一的接口，用于各个参与者角色之间的通信\n```java\npublic abstract class Mediator {\n\n    protected ConcreteColleagueA concreteColleagueA;\n\n    protected ConcreteColleagueB concreteColleagueB;\n\n    public Mediator(){\n        concreteColleagueA = new ConcreteColleagueA(this);\n        concreteColleagueB = new ConcreteColleagueB(this);\n    }\n\n    public abstract void doSomethingA();\n\n    public abstract void doSomethingB();\n}\nQ:为什么使用参与类实现类注入，而不使用抽象类注入(接口注入)\nA:因为每个参与类没有必须要完成的业务方法(没有相同的方法), 假如有相同的方法，当然要注入抽象类做到依赖倒置。\n\n```\n2. 抽象参与者类\n\n每一个参与者必须知道中介者角色，所以通过构造函数传入\n```java\npublic abstract class Colleague {\n    protected Mediator mediator;\n\n    public Colleague(Mediator mediator){\n        this.mediator = mediator;\n    }\n}\n```\n3. 具体中介者类\n\n协调各个参与者实现协作工作行为，要依赖各个参与者\n\n```java\npublic class ConcreteMediator extends Mediator{\n\n    @Override\n    public void doSomethingA() {\n        super.concreteColleagueA.selfMethod();\n        super.concreteColleagueB.selfMethod();\n    }\n\n    @Override\n    public void doSomethingB() {\n        super.concreteColleagueA.selfMethod();\n        super.concreteColleagueB.selfMethod();\n    }\n}\n```\n4. 具体参与者类A\n\n+ 自身的行为selfMethod,用于处理自身的业务逻辑\n+ 依赖的行为depMethod,依靠中介者去完成\n```java\npublic class ConcreteColleagueA extends Colleague{\n    public ConcreteColleagueA(Mediator mediator){\n        super(mediator);\n    }\n\n    public void selfMethod(){\n        //自己的业务逻辑\n    }\n\n    public void depMethod(){\n        //不能处理的业务逻辑，交给中介者处理\n        super.mediator.doSomethingA();\n    }\n}\n```\n5. 具体参与者类B\n```java\npublic class ConcreteColleagueB extends Colleague{\n    public ConcreteColleagueB(Mediator mediator) {\n        super(mediator);\n    }\n\n    public void selfMethod(){\n        //自己能够处理的业务逻辑\n    }\n\n    public void depMethod(){\n        super.mediator.doSomethingB();\n    }\n}\n```\n\n6. 客户端\n```java\npublic class ConcreteColleagueB extends Colleague{\n    public ConcreteColleagueB(Mediator mediator) {\n        super(mediator);\n    }\n\n    public void selfMethod(){\n        //自己能够处理的业务逻辑\n    }\n\n    public void depMethod(){\n        super.mediator.doSomethingB();\n    }\n}\n```\n\n> 用一个中介对象封装一系列的对象交互，中介者使对象不需要显示的相互作用，从而使其耦合松散,并且可以独立的改变他们之间的交互\n\n#### 中介者模式有什么优势\n1. 系统更加灵活，各个参与者相互独立\n2. 减少类间的依赖，参与类只依赖中介者，减少了依赖，降低了类间的耦合\n#### 中介者模式存在的问题\n1. 中介者承担了太多的职责，一旦出现问题，整个系统都会受影响\n2. 中介者会变得非常复杂，原本参与者间的关系转换成了中介者与参与者的关系，参与者越多，中介者就越复杂\n\n#### 中介者模式要慎用\n1. 量力而行。 中介者模式会使中介者逻辑复杂化。使用不当会把问题变得复杂，如果本身就只有简单的几个依赖关系，就没必要用终结者模式。所以要根据情况权衡中介者模式的使用\n2. 中介者适合多个对象紧密耦合的情况--蜘蛛网结构，中介者模式能将蜘蛛网结构梳理成星型结构\n\n#### 留下的问题\nQ:不符合依赖倒置原则，很少使用接口或者抽象类\n+ 参与者之间是协作关系，处理不同的任务，不能严格定义参与者需要具有的方法，不能抽象出一个统一的父类\n+ 每个中介者所围绕的参与类各不相同，不能抽象出一个具有共性的中介者\n+ 两个对象不能提炼出共性，就不要追求两者的抽象\n\n\n\n\n\n","source":"_posts/中介者模式.md","raw":"---\ntitle: 中介者模式\ndate: 2019-04-05 09:13:59\ntags: Design\ncategories: 设计模式\n---\n\n![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-157-thumbnail-small.jpg)\n<!-- more -->\n\n### 中介者模式\n\n#### 如何理解中介者模式\n\n复杂的进销存系统类图\n\n### 类图\n\n+ 虽然不同类型的参与者完成各自的活动，但是每个类相互关联耦合\n+ 每个类与多个朋友类相互交互，朋友类越多，耦合性越大，要修改一个，就得修改一大片--- 违反迪米特法则\n+ 不同参与者之间交互过于复杂，维护比较困难\n\n使用一个中介者对象，他将各个对象之间的交互封装起来作为一个中间桥梁，降低各个参与者的耦合性。\n\n#### 中介者类图\n\n+ 每个参与者只负责自己的业务逻辑，不属于自己的交给中介者去处理\n+ 每个参与者不再交互交流，简化了各模块间的耦合性\n\n1. 抽象中介者类\n\n定义统一的接口，用于各个参与者角色之间的通信\n```java\npublic abstract class Mediator {\n\n    protected ConcreteColleagueA concreteColleagueA;\n\n    protected ConcreteColleagueB concreteColleagueB;\n\n    public Mediator(){\n        concreteColleagueA = new ConcreteColleagueA(this);\n        concreteColleagueB = new ConcreteColleagueB(this);\n    }\n\n    public abstract void doSomethingA();\n\n    public abstract void doSomethingB();\n}\nQ:为什么使用参与类实现类注入，而不使用抽象类注入(接口注入)\nA:因为每个参与类没有必须要完成的业务方法(没有相同的方法), 假如有相同的方法，当然要注入抽象类做到依赖倒置。\n\n```\n2. 抽象参与者类\n\n每一个参与者必须知道中介者角色，所以通过构造函数传入\n```java\npublic abstract class Colleague {\n    protected Mediator mediator;\n\n    public Colleague(Mediator mediator){\n        this.mediator = mediator;\n    }\n}\n```\n3. 具体中介者类\n\n协调各个参与者实现协作工作行为，要依赖各个参与者\n\n```java\npublic class ConcreteMediator extends Mediator{\n\n    @Override\n    public void doSomethingA() {\n        super.concreteColleagueA.selfMethod();\n        super.concreteColleagueB.selfMethod();\n    }\n\n    @Override\n    public void doSomethingB() {\n        super.concreteColleagueA.selfMethod();\n        super.concreteColleagueB.selfMethod();\n    }\n}\n```\n4. 具体参与者类A\n\n+ 自身的行为selfMethod,用于处理自身的业务逻辑\n+ 依赖的行为depMethod,依靠中介者去完成\n```java\npublic class ConcreteColleagueA extends Colleague{\n    public ConcreteColleagueA(Mediator mediator){\n        super(mediator);\n    }\n\n    public void selfMethod(){\n        //自己的业务逻辑\n    }\n\n    public void depMethod(){\n        //不能处理的业务逻辑，交给中介者处理\n        super.mediator.doSomethingA();\n    }\n}\n```\n5. 具体参与者类B\n```java\npublic class ConcreteColleagueB extends Colleague{\n    public ConcreteColleagueB(Mediator mediator) {\n        super(mediator);\n    }\n\n    public void selfMethod(){\n        //自己能够处理的业务逻辑\n    }\n\n    public void depMethod(){\n        super.mediator.doSomethingB();\n    }\n}\n```\n\n6. 客户端\n```java\npublic class ConcreteColleagueB extends Colleague{\n    public ConcreteColleagueB(Mediator mediator) {\n        super(mediator);\n    }\n\n    public void selfMethod(){\n        //自己能够处理的业务逻辑\n    }\n\n    public void depMethod(){\n        super.mediator.doSomethingB();\n    }\n}\n```\n\n> 用一个中介对象封装一系列的对象交互，中介者使对象不需要显示的相互作用，从而使其耦合松散,并且可以独立的改变他们之间的交互\n\n#### 中介者模式有什么优势\n1. 系统更加灵活，各个参与者相互独立\n2. 减少类间的依赖，参与类只依赖中介者，减少了依赖，降低了类间的耦合\n#### 中介者模式存在的问题\n1. 中介者承担了太多的职责，一旦出现问题，整个系统都会受影响\n2. 中介者会变得非常复杂，原本参与者间的关系转换成了中介者与参与者的关系，参与者越多，中介者就越复杂\n\n#### 中介者模式要慎用\n1. 量力而行。 中介者模式会使中介者逻辑复杂化。使用不当会把问题变得复杂，如果本身就只有简单的几个依赖关系，就没必要用终结者模式。所以要根据情况权衡中介者模式的使用\n2. 中介者适合多个对象紧密耦合的情况--蜘蛛网结构，中介者模式能将蜘蛛网结构梳理成星型结构\n\n#### 留下的问题\nQ:不符合依赖倒置原则，很少使用接口或者抽象类\n+ 参与者之间是协作关系，处理不同的任务，不能严格定义参与者需要具有的方法，不能抽象出一个统一的父类\n+ 每个中介者所围绕的参与类各不相同，不能抽象出一个具有共性的中介者\n+ 两个对象不能提炼出共性，就不要追求两者的抽象\n\n\n\n\n\n","slug":"中介者模式","published":1,"updated":"2019-04-14T14:13:31.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjog0002w3s6eyv4ekh1","content":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-157-thumbnail-small.jpg\" alt><br><a id=\"more\"></a></p>\n<h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><h4 id=\"如何理解中介者模式\"><a href=\"#如何理解中介者模式\" class=\"headerlink\" title=\"如何理解中介者模式\"></a>如何理解中介者模式</h4><p>复杂的进销存系统类图</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><ul>\n<li>虽然不同类型的参与者完成各自的活动，但是每个类相互关联耦合</li>\n<li>每个类与多个朋友类相互交互，朋友类越多，耦合性越大，要修改一个，就得修改一大片— 违反迪米特法则</li>\n<li>不同参与者之间交互过于复杂，维护比较困难</li>\n</ul>\n<p>使用一个中介者对象，他将各个对象之间的交互封装起来作为一个中间桥梁，降低各个参与者的耦合性。</p>\n<h4 id=\"中介者类图\"><a href=\"#中介者类图\" class=\"headerlink\" title=\"中介者类图\"></a>中介者类图</h4><ul>\n<li>每个参与者只负责自己的业务逻辑，不属于自己的交给中介者去处理</li>\n<li>每个参与者不再交互交流，简化了各模块间的耦合性</li>\n</ul>\n<ol>\n<li>抽象中介者类</li>\n</ol>\n<p>定义统一的接口，用于各个参与者角色之间的通信<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mediator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> ConcreteColleagueA concreteColleagueA;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> ConcreteColleagueB concreteColleagueB;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mediator</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        concreteColleagueA = <span class=\"keyword\">new</span> ConcreteColleagueA(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        concreteColleagueB = <span class=\"keyword\">new</span> ConcreteColleagueB(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomethingA</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomethingB</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Q:为什么使用参与类实现类注入，而不使用抽象类注入(接口注入)</span><br><span class=\"line\">A:因为每个参与类没有必须要完成的业务方法(没有相同的方法), 假如有相同的方法，当然要注入抽象类做到依赖倒置。</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>抽象参与者类</li>\n</ol>\n<p>每一个参与者必须知道中介者角色，所以通过构造函数传入<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Colleague</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Mediator mediator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Colleague</span><span class=\"params\">(Mediator mediator)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mediator = mediator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>具体中介者类</li>\n</ol>\n<p>协调各个参与者实现协作工作行为，要依赖各个参与者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteMediator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Mediator</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomethingA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.concreteColleagueA.selfMethod();</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.concreteColleagueB.selfMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomethingB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.concreteColleagueA.selfMethod();</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.concreteColleagueB.selfMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>具体参与者类A</li>\n</ol>\n<ul>\n<li>自身的行为selfMethod,用于处理自身的业务逻辑</li>\n<li>依赖的行为depMethod,依靠中介者去完成<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleagueA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteColleagueA</span><span class=\"params\">(Mediator mediator)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(mediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selfMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//自己的业务逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//不能处理的业务逻辑，交给中介者处理</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.mediator.doSomethingA();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"5\">\n<li><p>具体参与者类B</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleagueB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteColleagueB</span><span class=\"params\">(Mediator mediator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(mediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selfMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//自己能够处理的业务逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.mediator.doSomethingB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleagueB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteColleagueB</span><span class=\"params\">(Mediator mediator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(mediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selfMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//自己能够处理的业务逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.mediator.doSomethingB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>用一个中介对象封装一系列的对象交互，中介者使对象不需要显示的相互作用，从而使其耦合松散,并且可以独立的改变他们之间的交互</p>\n</blockquote>\n<h4 id=\"中介者模式有什么优势\"><a href=\"#中介者模式有什么优势\" class=\"headerlink\" title=\"中介者模式有什么优势\"></a>中介者模式有什么优势</h4><ol>\n<li>系统更加灵活，各个参与者相互独立</li>\n<li>减少类间的依赖，参与类只依赖中介者，减少了依赖，降低了类间的耦合<h4 id=\"中介者模式存在的问题\"><a href=\"#中介者模式存在的问题\" class=\"headerlink\" title=\"中介者模式存在的问题\"></a>中介者模式存在的问题</h4></li>\n<li>中介者承担了太多的职责，一旦出现问题，整个系统都会受影响</li>\n<li>中介者会变得非常复杂，原本参与者间的关系转换成了中介者与参与者的关系，参与者越多，中介者就越复杂</li>\n</ol>\n<h4 id=\"中介者模式要慎用\"><a href=\"#中介者模式要慎用\" class=\"headerlink\" title=\"中介者模式要慎用\"></a>中介者模式要慎用</h4><ol>\n<li>量力而行。 中介者模式会使中介者逻辑复杂化。使用不当会把问题变得复杂，如果本身就只有简单的几个依赖关系，就没必要用终结者模式。所以要根据情况权衡中介者模式的使用</li>\n<li>中介者适合多个对象紧密耦合的情况–蜘蛛网结构，中介者模式能将蜘蛛网结构梳理成星型结构</li>\n</ol>\n<h4 id=\"留下的问题\"><a href=\"#留下的问题\" class=\"headerlink\" title=\"留下的问题\"></a>留下的问题</h4><p>Q:不符合依赖倒置原则，很少使用接口或者抽象类</p>\n<ul>\n<li>参与者之间是协作关系，处理不同的任务，不能严格定义参与者需要具有的方法，不能抽象出一个统一的父类</li>\n<li>每个中介者所围绕的参与类各不相同，不能抽象出一个具有共性的中介者</li>\n<li>两个对象不能提炼出共性，就不要追求两者的抽象</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-157-thumbnail-small.jpg\" alt><br>","more":"</p>\n<h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><h4 id=\"如何理解中介者模式\"><a href=\"#如何理解中介者模式\" class=\"headerlink\" title=\"如何理解中介者模式\"></a>如何理解中介者模式</h4><p>复杂的进销存系统类图</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><ul>\n<li>虽然不同类型的参与者完成各自的活动，但是每个类相互关联耦合</li>\n<li>每个类与多个朋友类相互交互，朋友类越多，耦合性越大，要修改一个，就得修改一大片— 违反迪米特法则</li>\n<li>不同参与者之间交互过于复杂，维护比较困难</li>\n</ul>\n<p>使用一个中介者对象，他将各个对象之间的交互封装起来作为一个中间桥梁，降低各个参与者的耦合性。</p>\n<h4 id=\"中介者类图\"><a href=\"#中介者类图\" class=\"headerlink\" title=\"中介者类图\"></a>中介者类图</h4><ul>\n<li>每个参与者只负责自己的业务逻辑，不属于自己的交给中介者去处理</li>\n<li>每个参与者不再交互交流，简化了各模块间的耦合性</li>\n</ul>\n<ol>\n<li>抽象中介者类</li>\n</ol>\n<p>定义统一的接口，用于各个参与者角色之间的通信<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mediator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> ConcreteColleagueA concreteColleagueA;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> ConcreteColleagueB concreteColleagueB;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mediator</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        concreteColleagueA = <span class=\"keyword\">new</span> ConcreteColleagueA(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        concreteColleagueB = <span class=\"keyword\">new</span> ConcreteColleagueB(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomethingA</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomethingB</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Q:为什么使用参与类实现类注入，而不使用抽象类注入(接口注入)</span><br><span class=\"line\">A:因为每个参与类没有必须要完成的业务方法(没有相同的方法), 假如有相同的方法，当然要注入抽象类做到依赖倒置。</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>抽象参与者类</li>\n</ol>\n<p>每一个参与者必须知道中介者角色，所以通过构造函数传入<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Colleague</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Mediator mediator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Colleague</span><span class=\"params\">(Mediator mediator)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mediator = mediator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>具体中介者类</li>\n</ol>\n<p>协调各个参与者实现协作工作行为，要依赖各个参与者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteMediator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Mediator</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomethingA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.concreteColleagueA.selfMethod();</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.concreteColleagueB.selfMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomethingB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.concreteColleagueA.selfMethod();</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.concreteColleagueB.selfMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>具体参与者类A</li>\n</ol>\n<ul>\n<li>自身的行为selfMethod,用于处理自身的业务逻辑</li>\n<li>依赖的行为depMethod,依靠中介者去完成<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleagueA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteColleagueA</span><span class=\"params\">(Mediator mediator)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(mediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selfMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//自己的业务逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//不能处理的业务逻辑，交给中介者处理</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.mediator.doSomethingA();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"5\">\n<li><p>具体参与者类B</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleagueB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteColleagueB</span><span class=\"params\">(Mediator mediator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(mediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selfMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//自己能够处理的业务逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.mediator.doSomethingB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleagueB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteColleagueB</span><span class=\"params\">(Mediator mediator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(mediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selfMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//自己能够处理的业务逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.mediator.doSomethingB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>用一个中介对象封装一系列的对象交互，中介者使对象不需要显示的相互作用，从而使其耦合松散,并且可以独立的改变他们之间的交互</p>\n</blockquote>\n<h4 id=\"中介者模式有什么优势\"><a href=\"#中介者模式有什么优势\" class=\"headerlink\" title=\"中介者模式有什么优势\"></a>中介者模式有什么优势</h4><ol>\n<li>系统更加灵活，各个参与者相互独立</li>\n<li>减少类间的依赖，参与类只依赖中介者，减少了依赖，降低了类间的耦合<h4 id=\"中介者模式存在的问题\"><a href=\"#中介者模式存在的问题\" class=\"headerlink\" title=\"中介者模式存在的问题\"></a>中介者模式存在的问题</h4></li>\n<li>中介者承担了太多的职责，一旦出现问题，整个系统都会受影响</li>\n<li>中介者会变得非常复杂，原本参与者间的关系转换成了中介者与参与者的关系，参与者越多，中介者就越复杂</li>\n</ol>\n<h4 id=\"中介者模式要慎用\"><a href=\"#中介者模式要慎用\" class=\"headerlink\" title=\"中介者模式要慎用\"></a>中介者模式要慎用</h4><ol>\n<li>量力而行。 中介者模式会使中介者逻辑复杂化。使用不当会把问题变得复杂，如果本身就只有简单的几个依赖关系，就没必要用终结者模式。所以要根据情况权衡中介者模式的使用</li>\n<li>中介者适合多个对象紧密耦合的情况–蜘蛛网结构，中介者模式能将蜘蛛网结构梳理成星型结构</li>\n</ol>\n<h4 id=\"留下的问题\"><a href=\"#留下的问题\" class=\"headerlink\" title=\"留下的问题\"></a>留下的问题</h4><p>Q:不符合依赖倒置原则，很少使用接口或者抽象类</p>\n<ul>\n<li>参与者之间是协作关系，处理不同的任务，不能严格定义参与者需要具有的方法，不能抽象出一个统一的父类</li>\n<li>每个中介者所围绕的参与类各不相同，不能抽象出一个具有共性的中介者</li>\n<li>两个对象不能提炼出共性，就不要追求两者的抽象</li>\n</ul>"},{"title":"代理模式|动态代理原理浅析","date":"2019-04-05T01:13:59.000Z","_content":"![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-306-thumbnail-small.jpg)\n<!-- more -->\n\n> 为其他对象提供一个代理以控制对这个对象的访问，在不改变目标对象基础上添加额外的功能。\n\n### 如何理解代理模式\n\n+ 两个主体：代理对象和被代理对象\n+ 对于被代理对象，事情必须要去做吗，但是自己不想去做或是没有条件去做，需要代理对象代替被代理对象去做。\n+ 代理对象能够获取被代理对象的资料信息。 代理层面（获得被代理对象的引用）\n\n#### 生活案例\n+ 中介：通常买二手车的时候，会去网上找车源，对车进行质量检测，以及各种过户手续的办理，自己可能不想做这些事情，所以可以找第三方的中介公司来完成这些事情，我只负责把我想要的车辆的信息（价位、车辆新旧程度、品牌）反馈给中介，中介把所有的办好就只管我来签字验收就可以了。\n\n+ 黄牛：当春运火车票比较紧张的时候，我抢不到票，且自己也不想去抢，则可以通过黄牛去买，我只管把我的车票信息给他（初始地、目的地、出发时间、车次），由此不用抢票，也可以买到相应的车票，抢票的过程由黄牛去做。\n\n+ 媒人：平时自己没有时间去交女朋友，则需要媒人去介绍，我们只管把我们想要的女朋友的类型给媒人，媒人则帮我们去寻找合适的对象。\n\n#### 需要类图\n+ Subject(抽象主题)\n\n可以是抽象类也可以是接口\n\n+ RealSubject(具体角色)\n\n被代理的对象，业务逻辑的执行者\n\n+ Proxy(代理角色)\n\n代理类，负责对真实角色的应用，把所有抽象主题定义的方法限制委托给真实角色实现，并在真实角色处理完毕前后做相应工作\n\n### 几种代理实现形式\n代理有两种主要形式\n1. 静态代理\n\n编译前，代码已经创建好，程序运行时，class文件已经存在\n2. 动态代理\n\n程序运行时通过反射生成代理类\n\n#### 静态代理\n+ 代理类与目标类实现相同的接口\n+ 代理类持有目标类的引用，可以控制目标类方法的访问\n\n##### 普通代理\n```java\npublic interface Subject {\n\n    void request();\n}\n```\n\n```java\npublic class RealSubject implements Subject {\n    @Override\n    public void request() {\n        System.out.println(\"start to request\");\n    }\n}\n```\n```java\npublic class Proxy implements Subject{\n    private Subject subject;\n\n    public Proxy(Subject subject){\n        this.subject = subject;\n    }\n\n    @Override\n    public void request() {\n        this.before();\n        subject.request();\n        this.after();\n    }\n\n    private void before(){\n        System.out.println(\"前置处理。。。。\");\n    }\n\n    private void after(){\n        System.out.println(\"后置处理。。。。\");\n    }\n}\n```\n##### 强制代理\n+ 只能通过真实角色角色制定的代理类才能访问\n+ 不允许直接访问真实角色\n\n```java\npublic interface Subject {\n    void request();\n\n    Subject getProxy();\n}\n```java\npublic class SubjectProxy implements Subject{\n    private Subject subject;\n\n    public SubjectProxy(Subject subject) {\n        this.subject = subject;\n    }\n\n    @Override\n    public void request() {\n        this.subject.request();\n    }\n\n    @Override\n    public Subject getProxy() {\n        return this;\n    }\n}\n```java\npublic class RealSubject implements Subject{\n    private Subject proxy = null;\n    @Override\n    public void request() {\n        if(this.isProxy()){\n            System.out.println(\"start to request\");\n        }else {\n            System.out.println(\"请使用指定的代理进行访问\");\n        }\n\n    }\n\n    @Override\n    public Subject getProxy() {\n        this.proxy = new SubjectProxy(this);\n        return this.proxy;\n    }\n\n    private boolean isProxy(){\n        if(this.proxy == null){\n            return false;\n        }else {\n            return true;\n        }\n    }\n}\n```\n```java\npublic class Client {\n    public static void main(String[] args) {\n        RealSubject subject = new RealSubject();\n        Subject proxy = subject.getProxy();\n        proxy.request();\n    }\n}\n```\n\n##### 静态代理局限性\n+ 不够灵活，每个代理只为一个接口服务，会造成大量代码重复\n+ 静态代理类职位特定的接口服务，如果有多个接口，需要生成多个代理对象，不利于系统维护\n\n#### 动态代理\n```java\npublic interface CustomerService {\n    void buyCar();\n}\n```\n\n```java\npublic class CustomerServiceImpl implements CustomerService{\n    @Override\n    public void buyCar() {\n        System.out.println(\"决定买这个车了\");\n    }\n}\n```\n\n```java\npublic class CarAgency implements InvocationHandler{\n    //被代理对象的引用\n    private Object target;\n\n    public Object getInstance(Object target){\n        this.target = target;\n        Class clazz = target.getClass();\n        return Proxy.newProxyInstance(clazz.getClassLoader(),target.getClass().getInterfaces(),this);\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"办理车辆质量检查报告\");\n        method.invoke(target,args);\n        System.out.println(\"办理车辆二手车过户\");\n        return null;\n    }\n}\n```\n\n\n\n动态代理源码解析\n\n\n\n\n\n1. 代理模式的意义（如何案例理解）\n2. 三种代理方式\n3. 动态代理实现原理\n4. 动态代理的实际运用（RPC、Spring等 RMI  收集相关的应用）\n\n\n","source":"_posts/代理模式.md","raw":"---\ntitle: 代理模式|动态代理原理浅析\ndate: 2019-04-05 09:13:59\ntags: Design\ncategories: 设计模式\n---\n![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-306-thumbnail-small.jpg)\n<!-- more -->\n\n> 为其他对象提供一个代理以控制对这个对象的访问，在不改变目标对象基础上添加额外的功能。\n\n### 如何理解代理模式\n\n+ 两个主体：代理对象和被代理对象\n+ 对于被代理对象，事情必须要去做吗，但是自己不想去做或是没有条件去做，需要代理对象代替被代理对象去做。\n+ 代理对象能够获取被代理对象的资料信息。 代理层面（获得被代理对象的引用）\n\n#### 生活案例\n+ 中介：通常买二手车的时候，会去网上找车源，对车进行质量检测，以及各种过户手续的办理，自己可能不想做这些事情，所以可以找第三方的中介公司来完成这些事情，我只负责把我想要的车辆的信息（价位、车辆新旧程度、品牌）反馈给中介，中介把所有的办好就只管我来签字验收就可以了。\n\n+ 黄牛：当春运火车票比较紧张的时候，我抢不到票，且自己也不想去抢，则可以通过黄牛去买，我只管把我的车票信息给他（初始地、目的地、出发时间、车次），由此不用抢票，也可以买到相应的车票，抢票的过程由黄牛去做。\n\n+ 媒人：平时自己没有时间去交女朋友，则需要媒人去介绍，我们只管把我们想要的女朋友的类型给媒人，媒人则帮我们去寻找合适的对象。\n\n#### 需要类图\n+ Subject(抽象主题)\n\n可以是抽象类也可以是接口\n\n+ RealSubject(具体角色)\n\n被代理的对象，业务逻辑的执行者\n\n+ Proxy(代理角色)\n\n代理类，负责对真实角色的应用，把所有抽象主题定义的方法限制委托给真实角色实现，并在真实角色处理完毕前后做相应工作\n\n### 几种代理实现形式\n代理有两种主要形式\n1. 静态代理\n\n编译前，代码已经创建好，程序运行时，class文件已经存在\n2. 动态代理\n\n程序运行时通过反射生成代理类\n\n#### 静态代理\n+ 代理类与目标类实现相同的接口\n+ 代理类持有目标类的引用，可以控制目标类方法的访问\n\n##### 普通代理\n```java\npublic interface Subject {\n\n    void request();\n}\n```\n\n```java\npublic class RealSubject implements Subject {\n    @Override\n    public void request() {\n        System.out.println(\"start to request\");\n    }\n}\n```\n```java\npublic class Proxy implements Subject{\n    private Subject subject;\n\n    public Proxy(Subject subject){\n        this.subject = subject;\n    }\n\n    @Override\n    public void request() {\n        this.before();\n        subject.request();\n        this.after();\n    }\n\n    private void before(){\n        System.out.println(\"前置处理。。。。\");\n    }\n\n    private void after(){\n        System.out.println(\"后置处理。。。。\");\n    }\n}\n```\n##### 强制代理\n+ 只能通过真实角色角色制定的代理类才能访问\n+ 不允许直接访问真实角色\n\n```java\npublic interface Subject {\n    void request();\n\n    Subject getProxy();\n}\n```java\npublic class SubjectProxy implements Subject{\n    private Subject subject;\n\n    public SubjectProxy(Subject subject) {\n        this.subject = subject;\n    }\n\n    @Override\n    public void request() {\n        this.subject.request();\n    }\n\n    @Override\n    public Subject getProxy() {\n        return this;\n    }\n}\n```java\npublic class RealSubject implements Subject{\n    private Subject proxy = null;\n    @Override\n    public void request() {\n        if(this.isProxy()){\n            System.out.println(\"start to request\");\n        }else {\n            System.out.println(\"请使用指定的代理进行访问\");\n        }\n\n    }\n\n    @Override\n    public Subject getProxy() {\n        this.proxy = new SubjectProxy(this);\n        return this.proxy;\n    }\n\n    private boolean isProxy(){\n        if(this.proxy == null){\n            return false;\n        }else {\n            return true;\n        }\n    }\n}\n```\n```java\npublic class Client {\n    public static void main(String[] args) {\n        RealSubject subject = new RealSubject();\n        Subject proxy = subject.getProxy();\n        proxy.request();\n    }\n}\n```\n\n##### 静态代理局限性\n+ 不够灵活，每个代理只为一个接口服务，会造成大量代码重复\n+ 静态代理类职位特定的接口服务，如果有多个接口，需要生成多个代理对象，不利于系统维护\n\n#### 动态代理\n```java\npublic interface CustomerService {\n    void buyCar();\n}\n```\n\n```java\npublic class CustomerServiceImpl implements CustomerService{\n    @Override\n    public void buyCar() {\n        System.out.println(\"决定买这个车了\");\n    }\n}\n```\n\n```java\npublic class CarAgency implements InvocationHandler{\n    //被代理对象的引用\n    private Object target;\n\n    public Object getInstance(Object target){\n        this.target = target;\n        Class clazz = target.getClass();\n        return Proxy.newProxyInstance(clazz.getClassLoader(),target.getClass().getInterfaces(),this);\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"办理车辆质量检查报告\");\n        method.invoke(target,args);\n        System.out.println(\"办理车辆二手车过户\");\n        return null;\n    }\n}\n```\n\n\n\n动态代理源码解析\n\n\n\n\n\n1. 代理模式的意义（如何案例理解）\n2. 三种代理方式\n3. 动态代理实现原理\n4. 动态代理的实际运用（RPC、Spring等 RMI  收集相关的应用）\n\n\n","slug":"代理模式","published":1,"updated":"2019-04-14T14:13:36.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjom0006w3s6imdew4h7","content":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-306-thumbnail-small.jpg\" alt><br><a id=\"more\"></a></p>\n<blockquote>\n<p>为其他对象提供一个代理以控制对这个对象的访问，在不改变目标对象基础上添加额外的功能。</p>\n</blockquote>\n<h3 id=\"如何理解代理模式\"><a href=\"#如何理解代理模式\" class=\"headerlink\" title=\"如何理解代理模式\"></a>如何理解代理模式</h3><ul>\n<li>两个主体：代理对象和被代理对象</li>\n<li>对于被代理对象，事情必须要去做吗，但是自己不想去做或是没有条件去做，需要代理对象代替被代理对象去做。</li>\n<li>代理对象能够获取被代理对象的资料信息。 代理层面（获得被代理对象的引用）</li>\n</ul>\n<h4 id=\"生活案例\"><a href=\"#生活案例\" class=\"headerlink\" title=\"生活案例\"></a>生活案例</h4><ul>\n<li><p>中介：通常买二手车的时候，会去网上找车源，对车进行质量检测，以及各种过户手续的办理，自己可能不想做这些事情，所以可以找第三方的中介公司来完成这些事情，我只负责把我想要的车辆的信息（价位、车辆新旧程度、品牌）反馈给中介，中介把所有的办好就只管我来签字验收就可以了。</p>\n</li>\n<li><p>黄牛：当春运火车票比较紧张的时候，我抢不到票，且自己也不想去抢，则可以通过黄牛去买，我只管把我的车票信息给他（初始地、目的地、出发时间、车次），由此不用抢票，也可以买到相应的车票，抢票的过程由黄牛去做。</p>\n</li>\n<li><p>媒人：平时自己没有时间去交女朋友，则需要媒人去介绍，我们只管把我们想要的女朋友的类型给媒人，媒人则帮我们去寻找合适的对象。</p>\n</li>\n</ul>\n<h4 id=\"需要类图\"><a href=\"#需要类图\" class=\"headerlink\" title=\"需要类图\"></a>需要类图</h4><ul>\n<li>Subject(抽象主题)</li>\n</ul>\n<p>可以是抽象类也可以是接口</p>\n<ul>\n<li>RealSubject(具体角色)</li>\n</ul>\n<p>被代理的对象，业务逻辑的执行者</p>\n<ul>\n<li>Proxy(代理角色)</li>\n</ul>\n<p>代理类，负责对真实角色的应用，把所有抽象主题定义的方法限制委托给真实角色实现，并在真实角色处理完毕前后做相应工作</p>\n<h3 id=\"几种代理实现形式\"><a href=\"#几种代理实现形式\" class=\"headerlink\" title=\"几种代理实现形式\"></a>几种代理实现形式</h3><p>代理有两种主要形式</p>\n<ol>\n<li>静态代理</li>\n</ol>\n<p>编译前，代码已经创建好，程序运行时，class文件已经存在</p>\n<ol start=\"2\">\n<li>动态代理</li>\n</ol>\n<p>程序运行时通过反射生成代理类</p>\n<h4 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h4><ul>\n<li>代理类与目标类实现相同的接口</li>\n<li>代理类持有目标类的引用，可以控制目标类方法的访问</li>\n</ul>\n<h5 id=\"普通代理\"><a href=\"#普通代理\" class=\"headerlink\" title=\"普通代理\"></a>普通代理</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"start to request\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Subject subject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">(Subject subject)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subject = subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.before();</span><br><span class=\"line\">        subject.request();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"前置处理。。。。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"后置处理。。。。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"强制代理\"><a href=\"#强制代理\" class=\"headerlink\" title=\"强制代理\"></a>强制代理</h5><ul>\n<li>只能通过真实角色角色制定的代理类才能访问</li>\n<li>不允许直接访问真实角色</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Subject <span class=\"title\">getProxy</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubjectProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Subject subject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SubjectProxy</span><span class=\"params\">(Subject subject)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subject = subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subject.request();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Subject <span class=\"title\">getProxy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Subject proxy = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.isProxy())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"start to request\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"请使用指定的代理进行访问\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Subject <span class=\"title\">getProxy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.proxy = <span class=\"keyword\">new</span> SubjectProxy(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.proxy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isProxy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.proxy == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        RealSubject subject = <span class=\"keyword\">new</span> RealSubject();</span><br><span class=\"line\">        Subject proxy = subject.getProxy();</span><br><span class=\"line\">        proxy.request();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"静态代理局限性\"><a href=\"#静态代理局限性\" class=\"headerlink\" title=\"静态代理局限性\"></a>静态代理局限性</h5><ul>\n<li>不够灵活，每个代理只为一个接口服务，会造成大量代码重复</li>\n<li>静态代理类职位特定的接口服务，如果有多个接口，需要生成多个代理对象，不利于系统维护</li>\n</ul>\n<h4 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CustomerService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buyCar</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">CustomerService</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buyCar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"决定买这个车了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarAgency</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//被代理对象的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getInstance</span><span class=\"params\">(Object target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">        Class clazz = target.getClass();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(clazz.getClassLoader(),target.getClass().getInterfaces(),<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"办理车辆质量检查报告\"</span>);</span><br><span class=\"line\">        method.invoke(target,args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"办理车辆二手车过户\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>动态代理源码解析</p>\n<ol>\n<li>代理模式的意义（如何案例理解）</li>\n<li>三种代理方式</li>\n<li>动态代理实现原理</li>\n<li>动态代理的实际运用（RPC、Spring等 RMI  收集相关的应用）</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-306-thumbnail-small.jpg\" alt><br>","more":"</p>\n<blockquote>\n<p>为其他对象提供一个代理以控制对这个对象的访问，在不改变目标对象基础上添加额外的功能。</p>\n</blockquote>\n<h3 id=\"如何理解代理模式\"><a href=\"#如何理解代理模式\" class=\"headerlink\" title=\"如何理解代理模式\"></a>如何理解代理模式</h3><ul>\n<li>两个主体：代理对象和被代理对象</li>\n<li>对于被代理对象，事情必须要去做吗，但是自己不想去做或是没有条件去做，需要代理对象代替被代理对象去做。</li>\n<li>代理对象能够获取被代理对象的资料信息。 代理层面（获得被代理对象的引用）</li>\n</ul>\n<h4 id=\"生活案例\"><a href=\"#生活案例\" class=\"headerlink\" title=\"生活案例\"></a>生活案例</h4><ul>\n<li><p>中介：通常买二手车的时候，会去网上找车源，对车进行质量检测，以及各种过户手续的办理，自己可能不想做这些事情，所以可以找第三方的中介公司来完成这些事情，我只负责把我想要的车辆的信息（价位、车辆新旧程度、品牌）反馈给中介，中介把所有的办好就只管我来签字验收就可以了。</p>\n</li>\n<li><p>黄牛：当春运火车票比较紧张的时候，我抢不到票，且自己也不想去抢，则可以通过黄牛去买，我只管把我的车票信息给他（初始地、目的地、出发时间、车次），由此不用抢票，也可以买到相应的车票，抢票的过程由黄牛去做。</p>\n</li>\n<li><p>媒人：平时自己没有时间去交女朋友，则需要媒人去介绍，我们只管把我们想要的女朋友的类型给媒人，媒人则帮我们去寻找合适的对象。</p>\n</li>\n</ul>\n<h4 id=\"需要类图\"><a href=\"#需要类图\" class=\"headerlink\" title=\"需要类图\"></a>需要类图</h4><ul>\n<li>Subject(抽象主题)</li>\n</ul>\n<p>可以是抽象类也可以是接口</p>\n<ul>\n<li>RealSubject(具体角色)</li>\n</ul>\n<p>被代理的对象，业务逻辑的执行者</p>\n<ul>\n<li>Proxy(代理角色)</li>\n</ul>\n<p>代理类，负责对真实角色的应用，把所有抽象主题定义的方法限制委托给真实角色实现，并在真实角色处理完毕前后做相应工作</p>\n<h3 id=\"几种代理实现形式\"><a href=\"#几种代理实现形式\" class=\"headerlink\" title=\"几种代理实现形式\"></a>几种代理实现形式</h3><p>代理有两种主要形式</p>\n<ol>\n<li>静态代理</li>\n</ol>\n<p>编译前，代码已经创建好，程序运行时，class文件已经存在</p>\n<ol start=\"2\">\n<li>动态代理</li>\n</ol>\n<p>程序运行时通过反射生成代理类</p>\n<h4 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h4><ul>\n<li>代理类与目标类实现相同的接口</li>\n<li>代理类持有目标类的引用，可以控制目标类方法的访问</li>\n</ul>\n<h5 id=\"普通代理\"><a href=\"#普通代理\" class=\"headerlink\" title=\"普通代理\"></a>普通代理</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"start to request\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Subject subject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">(Subject subject)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subject = subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.before();</span><br><span class=\"line\">        subject.request();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"前置处理。。。。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"后置处理。。。。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"强制代理\"><a href=\"#强制代理\" class=\"headerlink\" title=\"强制代理\"></a>强制代理</h5><ul>\n<li>只能通过真实角色角色制定的代理类才能访问</li>\n<li>不允许直接访问真实角色</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Subject <span class=\"title\">getProxy</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubjectProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Subject subject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SubjectProxy</span><span class=\"params\">(Subject subject)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subject = subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subject.request();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Subject <span class=\"title\">getProxy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Subject proxy = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.isProxy())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"start to request\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"请使用指定的代理进行访问\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Subject <span class=\"title\">getProxy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.proxy = <span class=\"keyword\">new</span> SubjectProxy(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.proxy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isProxy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.proxy == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        RealSubject subject = <span class=\"keyword\">new</span> RealSubject();</span><br><span class=\"line\">        Subject proxy = subject.getProxy();</span><br><span class=\"line\">        proxy.request();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"静态代理局限性\"><a href=\"#静态代理局限性\" class=\"headerlink\" title=\"静态代理局限性\"></a>静态代理局限性</h5><ul>\n<li>不够灵活，每个代理只为一个接口服务，会造成大量代码重复</li>\n<li>静态代理类职位特定的接口服务，如果有多个接口，需要生成多个代理对象，不利于系统维护</li>\n</ul>\n<h4 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CustomerService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buyCar</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">CustomerService</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buyCar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"决定买这个车了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarAgency</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//被代理对象的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getInstance</span><span class=\"params\">(Object target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">        Class clazz = target.getClass();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(clazz.getClassLoader(),target.getClass().getInterfaces(),<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"办理车辆质量检查报告\"</span>);</span><br><span class=\"line\">        method.invoke(target,args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"办理车辆二手车过户\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>动态代理源码解析</p>\n<ol>\n<li>代理模式的意义（如何案例理解）</li>\n<li>三种代理方式</li>\n<li>动态代理实现原理</li>\n<li>动态代理的实际运用（RPC、Spring等 RMI  收集相关的应用）</li>\n</ol>"},{"title":"原型模式","date":"2019-04-06T10:26:01.000Z","_content":"\n![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-307-thumbnail-small.jpg)\n<!-- more -->\n关于克隆，我们会想到《西游记》里面孙悟空的猴毛分身，也会想到《火影忍者》里面的影分身之术。他们都是用一个物体复制若干个一模一样的物体。在面向对象的系统中，我们也可以通过克隆来复制一些对象---也就是我们所说的原型模式\n\n> 用原型实例指定创建对象的种类，通过拷贝这些原型创建新的对象，也就是利用一个原型对象来指明我们要创建对象的类型，然后通过复制这个对象来获取一模一样的对象实例\n\n### 一个简单的原型模式Demo\n\n```java\npublic class PrototypeClass implements Cloneable{\n    @Override\n    protected PrototypeClass clone(){\n        PrototypeClass prototypeClass = null;\n        try {\n            prototypeClass = (PrototypeClass)super.clone();\n        }catch (CloneNotSupportedException e){\n\n        }\n        return prototypeClass;\n    }\n}\n```\n\n+ 实现Cloneable接口，在JVM中只有具有这个标记的对象才有可能被拷贝\n+ 重写覆盖Clone()方法\n\n### 为什么要用原型模式\n+ 性能优良。 原型模式是在内存二进制流的拷贝，比直接new一个对象性能要好得多。所以特别是要在一个循环体内产生大量对象的时候，原型模式更好体现其优点\n+ 避开构造函数的束缚（既是优点也是缺点）\n直接在内存中拷贝，构造函数是不会执行的\n\n### 原型模式应用场景\n1. 资源优化场景\n2. 性能和安全要求场景\n3. 一个对象多个修改者的场景\n\n### 两种拷贝方式\n#### 浅拷贝\n只拷贝本对象，对象内部的数组、引用对象都不拷贝，还是指向原生对象的内部元素地址。原始类型（int、long、char）以及String都会被拷贝\n##### 如何才能保证成员变量不被拷贝（保证以下两个条件）\n+ 必须是类的成员变量，而不是方法内变量\n+ 必须是一个可变的引用对象，而不是一个原始类型或者不可变对象\n\n```java\npublic class Thing implements Cloneable {\n    private List<String> list = new ArrayList<String>();\n\n    @Override\n    protected Thing clone(){\n        Thing thing = null;\n        try {\n            thing = (Thing)super.clone();\n        }catch (CloneNotSupportedException e){\n            e.printStackTrace();\n        }\n        return thing;\n    }\n    \n    public void setValue(String value){\n        this.list.add(value);\n    }\n    \n    public List<String> getValue(){\n        return this.list;\n    }\n}\n```\n\n浅克隆是不安全的方式，两个对象共享了一个私有变量，大家都能够进行修改。\n#### 深拷贝\n\n```java\npublic class DeepThing implements Cloneable {\n    private ArrayList<String> list = new ArrayList<String>();\n\n    @Override\n    protected DeepThing clone(){\n        DeepThing thing = null;\n        try {\n            thing = (DeepThing)super.clone();\n            this.list = (ArrayList<String>)this.list.clone();\n        }catch (CloneNotSupportedException e){\n            e.printStackTrace();\n        }\n        return thing;\n    }\n\n    public void setValue(String value){\n        this.list.add(value);\n    }\n\n    public List<String> getValue(){\n        return this.list;\n    }\n}\n```\n\n### 总结\n+ 原型模式向客户隐藏了创建对象的复杂性，客户只需要知道创建对象类型，就可以获得对象一模一样的新对象。\n+ 有两种克隆方式：深克隆、浅克隆\n   * 浅克隆；不安全，对象公有私有变量\n   * 有时对象的复制可能会比较复杂\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/原型模式.md","raw":"---\ntitle: 原型模式\ndate: 2019-04-06 18:26:01\ntags: Design\ncategories: 设计模式\n---\n\n![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-307-thumbnail-small.jpg)\n<!-- more -->\n关于克隆，我们会想到《西游记》里面孙悟空的猴毛分身，也会想到《火影忍者》里面的影分身之术。他们都是用一个物体复制若干个一模一样的物体。在面向对象的系统中，我们也可以通过克隆来复制一些对象---也就是我们所说的原型模式\n\n> 用原型实例指定创建对象的种类，通过拷贝这些原型创建新的对象，也就是利用一个原型对象来指明我们要创建对象的类型，然后通过复制这个对象来获取一模一样的对象实例\n\n### 一个简单的原型模式Demo\n\n```java\npublic class PrototypeClass implements Cloneable{\n    @Override\n    protected PrototypeClass clone(){\n        PrototypeClass prototypeClass = null;\n        try {\n            prototypeClass = (PrototypeClass)super.clone();\n        }catch (CloneNotSupportedException e){\n\n        }\n        return prototypeClass;\n    }\n}\n```\n\n+ 实现Cloneable接口，在JVM中只有具有这个标记的对象才有可能被拷贝\n+ 重写覆盖Clone()方法\n\n### 为什么要用原型模式\n+ 性能优良。 原型模式是在内存二进制流的拷贝，比直接new一个对象性能要好得多。所以特别是要在一个循环体内产生大量对象的时候，原型模式更好体现其优点\n+ 避开构造函数的束缚（既是优点也是缺点）\n直接在内存中拷贝，构造函数是不会执行的\n\n### 原型模式应用场景\n1. 资源优化场景\n2. 性能和安全要求场景\n3. 一个对象多个修改者的场景\n\n### 两种拷贝方式\n#### 浅拷贝\n只拷贝本对象，对象内部的数组、引用对象都不拷贝，还是指向原生对象的内部元素地址。原始类型（int、long、char）以及String都会被拷贝\n##### 如何才能保证成员变量不被拷贝（保证以下两个条件）\n+ 必须是类的成员变量，而不是方法内变量\n+ 必须是一个可变的引用对象，而不是一个原始类型或者不可变对象\n\n```java\npublic class Thing implements Cloneable {\n    private List<String> list = new ArrayList<String>();\n\n    @Override\n    protected Thing clone(){\n        Thing thing = null;\n        try {\n            thing = (Thing)super.clone();\n        }catch (CloneNotSupportedException e){\n            e.printStackTrace();\n        }\n        return thing;\n    }\n    \n    public void setValue(String value){\n        this.list.add(value);\n    }\n    \n    public List<String> getValue(){\n        return this.list;\n    }\n}\n```\n\n浅克隆是不安全的方式，两个对象共享了一个私有变量，大家都能够进行修改。\n#### 深拷贝\n\n```java\npublic class DeepThing implements Cloneable {\n    private ArrayList<String> list = new ArrayList<String>();\n\n    @Override\n    protected DeepThing clone(){\n        DeepThing thing = null;\n        try {\n            thing = (DeepThing)super.clone();\n            this.list = (ArrayList<String>)this.list.clone();\n        }catch (CloneNotSupportedException e){\n            e.printStackTrace();\n        }\n        return thing;\n    }\n\n    public void setValue(String value){\n        this.list.add(value);\n    }\n\n    public List<String> getValue(){\n        return this.list;\n    }\n}\n```\n\n### 总结\n+ 原型模式向客户隐藏了创建对象的复杂性，客户只需要知道创建对象类型，就可以获得对象一模一样的新对象。\n+ 有两种克隆方式：深克隆、浅克隆\n   * 浅克隆；不安全，对象公有私有变量\n   * 有时对象的复制可能会比较复杂\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"原型模式","published":1,"updated":"2019-04-14T14:14:12.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjop0008w3s61herlgfe","content":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-307-thumbnail-small.jpg\" alt><br><a id=\"more\"></a><br>关于克隆，我们会想到《西游记》里面孙悟空的猴毛分身，也会想到《火影忍者》里面的影分身之术。他们都是用一个物体复制若干个一模一样的物体。在面向对象的系统中，我们也可以通过克隆来复制一些对象—也就是我们所说的原型模式</p>\n<blockquote>\n<p>用原型实例指定创建对象的种类，通过拷贝这些原型创建新的对象，也就是利用一个原型对象来指明我们要创建对象的类型，然后通过复制这个对象来获取一模一样的对象实例</p>\n</blockquote>\n<h3 id=\"一个简单的原型模式Demo\"><a href=\"#一个简单的原型模式Demo\" class=\"headerlink\" title=\"一个简单的原型模式Demo\"></a>一个简单的原型模式Demo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrototypeClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> PrototypeClass <span class=\"title\">clone</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        PrototypeClass prototypeClass = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            prototypeClass = (PrototypeClass)<span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (CloneNotSupportedException e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prototypeClass;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>实现Cloneable接口，在JVM中只有具有这个标记的对象才有可能被拷贝</li>\n<li>重写覆盖Clone()方法</li>\n</ul>\n<h3 id=\"为什么要用原型模式\"><a href=\"#为什么要用原型模式\" class=\"headerlink\" title=\"为什么要用原型模式\"></a>为什么要用原型模式</h3><ul>\n<li>性能优良。 原型模式是在内存二进制流的拷贝，比直接new一个对象性能要好得多。所以特别是要在一个循环体内产生大量对象的时候，原型模式更好体现其优点</li>\n<li>避开构造函数的束缚（既是优点也是缺点）<br>直接在内存中拷贝，构造函数是不会执行的</li>\n</ul>\n<h3 id=\"原型模式应用场景\"><a href=\"#原型模式应用场景\" class=\"headerlink\" title=\"原型模式应用场景\"></a>原型模式应用场景</h3><ol>\n<li>资源优化场景</li>\n<li>性能和安全要求场景</li>\n<li>一个对象多个修改者的场景</li>\n</ol>\n<h3 id=\"两种拷贝方式\"><a href=\"#两种拷贝方式\" class=\"headerlink\" title=\"两种拷贝方式\"></a>两种拷贝方式</h3><h4 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h4><p>只拷贝本对象，对象内部的数组、引用对象都不拷贝，还是指向原生对象的内部元素地址。原始类型（int、long、char）以及String都会被拷贝</p>\n<h5 id=\"如何才能保证成员变量不被拷贝（保证以下两个条件）\"><a href=\"#如何才能保证成员变量不被拷贝（保证以下两个条件）\" class=\"headerlink\" title=\"如何才能保证成员变量不被拷贝（保证以下两个条件）\"></a>如何才能保证成员变量不被拷贝（保证以下两个条件）</h5><ul>\n<li>必须是类的成员变量，而不是方法内变量</li>\n<li>必须是一个可变的引用对象，而不是一个原始类型或者不可变对象</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thing</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Thing <span class=\"title\">clone</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Thing thing = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            thing = (Thing)<span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (CloneNotSupportedException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> thing;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.list.add(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">getValue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>浅克隆是不安全的方式，两个对象共享了一个私有变量，大家都能够进行修改。</p>\n<h4 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeepThing</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> DeepThing <span class=\"title\">clone</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        DeepThing thing = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            thing = (DeepThing)<span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.list = (ArrayList&lt;String&gt;)<span class=\"keyword\">this</span>.list.clone();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (CloneNotSupportedException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> thing;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.list.add(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">getValue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>原型模式向客户隐藏了创建对象的复杂性，客户只需要知道创建对象类型，就可以获得对象一模一样的新对象。</li>\n<li>有两种克隆方式：深克隆、浅克隆<ul>\n<li>浅克隆；不安全，对象公有私有变量</li>\n<li>有时对象的复制可能会比较复杂</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-307-thumbnail-small.jpg\" alt><br>","more":"<br>关于克隆，我们会想到《西游记》里面孙悟空的猴毛分身，也会想到《火影忍者》里面的影分身之术。他们都是用一个物体复制若干个一模一样的物体。在面向对象的系统中，我们也可以通过克隆来复制一些对象—也就是我们所说的原型模式</p>\n<blockquote>\n<p>用原型实例指定创建对象的种类，通过拷贝这些原型创建新的对象，也就是利用一个原型对象来指明我们要创建对象的类型，然后通过复制这个对象来获取一模一样的对象实例</p>\n</blockquote>\n<h3 id=\"一个简单的原型模式Demo\"><a href=\"#一个简单的原型模式Demo\" class=\"headerlink\" title=\"一个简单的原型模式Demo\"></a>一个简单的原型模式Demo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrototypeClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> PrototypeClass <span class=\"title\">clone</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        PrototypeClass prototypeClass = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            prototypeClass = (PrototypeClass)<span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (CloneNotSupportedException e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prototypeClass;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>实现Cloneable接口，在JVM中只有具有这个标记的对象才有可能被拷贝</li>\n<li>重写覆盖Clone()方法</li>\n</ul>\n<h3 id=\"为什么要用原型模式\"><a href=\"#为什么要用原型模式\" class=\"headerlink\" title=\"为什么要用原型模式\"></a>为什么要用原型模式</h3><ul>\n<li>性能优良。 原型模式是在内存二进制流的拷贝，比直接new一个对象性能要好得多。所以特别是要在一个循环体内产生大量对象的时候，原型模式更好体现其优点</li>\n<li>避开构造函数的束缚（既是优点也是缺点）<br>直接在内存中拷贝，构造函数是不会执行的</li>\n</ul>\n<h3 id=\"原型模式应用场景\"><a href=\"#原型模式应用场景\" class=\"headerlink\" title=\"原型模式应用场景\"></a>原型模式应用场景</h3><ol>\n<li>资源优化场景</li>\n<li>性能和安全要求场景</li>\n<li>一个对象多个修改者的场景</li>\n</ol>\n<h3 id=\"两种拷贝方式\"><a href=\"#两种拷贝方式\" class=\"headerlink\" title=\"两种拷贝方式\"></a>两种拷贝方式</h3><h4 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h4><p>只拷贝本对象，对象内部的数组、引用对象都不拷贝，还是指向原生对象的内部元素地址。原始类型（int、long、char）以及String都会被拷贝</p>\n<h5 id=\"如何才能保证成员变量不被拷贝（保证以下两个条件）\"><a href=\"#如何才能保证成员变量不被拷贝（保证以下两个条件）\" class=\"headerlink\" title=\"如何才能保证成员变量不被拷贝（保证以下两个条件）\"></a>如何才能保证成员变量不被拷贝（保证以下两个条件）</h5><ul>\n<li>必须是类的成员变量，而不是方法内变量</li>\n<li>必须是一个可变的引用对象，而不是一个原始类型或者不可变对象</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thing</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Thing <span class=\"title\">clone</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Thing thing = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            thing = (Thing)<span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (CloneNotSupportedException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> thing;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.list.add(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">getValue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>浅克隆是不安全的方式，两个对象共享了一个私有变量，大家都能够进行修改。</p>\n<h4 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeepThing</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> DeepThing <span class=\"title\">clone</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        DeepThing thing = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            thing = (DeepThing)<span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.list = (ArrayList&lt;String&gt;)<span class=\"keyword\">this</span>.list.clone();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (CloneNotSupportedException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> thing;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.list.add(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">getValue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>原型模式向客户隐藏了创建对象的复杂性，客户只需要知道创建对象类型，就可以获得对象一模一样的新对象。</li>\n<li>有两种克隆方式：深克隆、浅克隆<ul>\n<li>浅克隆；不安全，对象公有私有变量</li>\n<li>有时对象的复制可能会比较复杂</li>\n</ul>\n</li>\n</ul>"},{"title":"关于单例模式的几种变体形式","date":"2019-03-23T13:14:01.000Z","_content":"\n![](http://posw9yxeh.bkt.clouddn.com/static/images/singleton-1.jpg)\n<!-- more -->\n\n单例模式是一种简单的的设计模式。虽然简单，但是应用却是十分的广泛。所有有必要针对单例模式的知识点进行梳理。\n\n### 单例模式\n\n>确保类只有一个实例，并自动实例化向整个系统提供全局的访问点。从定义上可以推断出单例模式更倾向于节约资源，利于资源的重用从而节约时间。所以应用单例模式的对象应该具有以下特点：\n\n+ 频繁地创建、销毁且性能无法优化\n+ 消耗大量资源（读取配置、产生依赖对象），可以在应用启动时直接产生一个单例对象\n+ 避免资源的多重占用 \n+ 设置全局的访问点，优化和共享资源访问\n\n### 应用场景\n\n### 单例模式设计的几点考虑\n+ 延迟加载\n+ 线程安全\n+ 并发性能\n+ 序列化/反序列化安全\n\n\n| name | 延迟加载 | 线程安全 | 并发性能 | 序列化/反序列化安全 |\n| ------------- | ------------- | ------------- | ------------- | ------------- |\n| 饿汉式 | N | Y | Y | N |\n| 懒汉式(不加锁) | Y | N | Y | N |\n| 懒汉式(加锁) | Y | Y | N | N |\n| DCL | Y | Y | Y | N |\n| 静态内部类 | Y | Y | Y | N |\n| 枚举 | N | Y | Y | Y |\n\n\n### 单例模式实现\n1. 饿汉式\n\n类加载时完成初始化\n\n- 类加载慢\n\n- 获取对象速度快\n\n\n```java\npublic class Singleton {\n    private static Singleton singleton = new Singleton();\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        return singleton;\n    }\n}\n```\n2. 懒汉式\n\n获取对象的时候完成初始化，实现懒加载。但是线程不安全，高并发下会出现多个实例。\n```java\npublic class Singleton {\n    private static Singleton instance = null;\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        if( instance == null){\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n3. 懒汉式（加锁）\n\n线程安全的懒汉式单例模式。\n\n```java\npublic class SafeSingleton {\n\n    private static SafeSingleton instance = null;\n\n    private SafeSingleton(){}\n\n    public static synchronized SafeSingleton getInstance(){\n        if(instance == null){\n            instance = new SafeSingleton();\n        }\n\n        return instance;\n    }\n}\n```\n4. 双重检查DCL\n\n- synchronized同步代码块保证只创建一个对象。\n\n- 条件判断使对象创建过后，不在进入同步块，减少锁的粒度。\n\n- volatitle防止指令重排序(否则出现一个线程创建一般的对象呗另一个线程访问，造成空指针)。\n\n\n```java\npublic class Singleton {\n    private volatile static Singleton instance;\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        if(instance == null){\n            synchronized (Singleton.class){\n                if(instance == null){\n                    instance = new Singleton();\n                }\n            }\n        }\n        return instance;\n    }\n}\n```\n\n\n4. 静态内部类\n\n- 利用ClassLoader的机制保证了线程安全\n\n- 相比饿汉式单例模式，实现懒加载，只有显示调用SingleHolder才会触发初始化。\n\n```java\npublic class Singleton {\n\n    private static class SingletonHolder{\n\n        private static final Singleton instance = new Singleton();\n\n    }\n\n    private Singleton(){}\n\n    public static final Singleton getInstance(){\n        return SingletonHolder.instance;\n    }\n}\n```\n\n5. 枚举\n\n- 线程安全（虚拟机加载枚举的时候，会使用ClassLoader的loadClass方法，这个方法使用同步代码块保证线程安全）\n\n* 解决反序列化破坏单例的问题:\n   - 普通序列化过程中，通过反射调用默认构造函数来初始化对象，反序列化的对象是新建的\n   - 枚举的反序列化不是通过构造函数实现，因此不会发生于由于反序列化导致的单例破坏问题\n\n\n```java\npublic enum Singleton {\n    INSTANCE;\n\n    public void getInstance(){\n\n    }\n}\n```\n\n\n\n### 如何设计优秀的单例模式\n\n### 引申\n1. 双重校验DCL为什么使用volatile\n2. synchronized与volatile的区别\n\n\n\n\n","source":"_posts/单例模式.md","raw":"---\ntitle: 关于单例模式的几种变体形式\ndate: 2019-03-23 21:14:01\ntags: Design\ncategories: 设计模式\n---\n\n![](http://posw9yxeh.bkt.clouddn.com/static/images/singleton-1.jpg)\n<!-- more -->\n\n单例模式是一种简单的的设计模式。虽然简单，但是应用却是十分的广泛。所有有必要针对单例模式的知识点进行梳理。\n\n### 单例模式\n\n>确保类只有一个实例，并自动实例化向整个系统提供全局的访问点。从定义上可以推断出单例模式更倾向于节约资源，利于资源的重用从而节约时间。所以应用单例模式的对象应该具有以下特点：\n\n+ 频繁地创建、销毁且性能无法优化\n+ 消耗大量资源（读取配置、产生依赖对象），可以在应用启动时直接产生一个单例对象\n+ 避免资源的多重占用 \n+ 设置全局的访问点，优化和共享资源访问\n\n### 应用场景\n\n### 单例模式设计的几点考虑\n+ 延迟加载\n+ 线程安全\n+ 并发性能\n+ 序列化/反序列化安全\n\n\n| name | 延迟加载 | 线程安全 | 并发性能 | 序列化/反序列化安全 |\n| ------------- | ------------- | ------------- | ------------- | ------------- |\n| 饿汉式 | N | Y | Y | N |\n| 懒汉式(不加锁) | Y | N | Y | N |\n| 懒汉式(加锁) | Y | Y | N | N |\n| DCL | Y | Y | Y | N |\n| 静态内部类 | Y | Y | Y | N |\n| 枚举 | N | Y | Y | Y |\n\n\n### 单例模式实现\n1. 饿汉式\n\n类加载时完成初始化\n\n- 类加载慢\n\n- 获取对象速度快\n\n\n```java\npublic class Singleton {\n    private static Singleton singleton = new Singleton();\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        return singleton;\n    }\n}\n```\n2. 懒汉式\n\n获取对象的时候完成初始化，实现懒加载。但是线程不安全，高并发下会出现多个实例。\n```java\npublic class Singleton {\n    private static Singleton instance = null;\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        if( instance == null){\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n3. 懒汉式（加锁）\n\n线程安全的懒汉式单例模式。\n\n```java\npublic class SafeSingleton {\n\n    private static SafeSingleton instance = null;\n\n    private SafeSingleton(){}\n\n    public static synchronized SafeSingleton getInstance(){\n        if(instance == null){\n            instance = new SafeSingleton();\n        }\n\n        return instance;\n    }\n}\n```\n4. 双重检查DCL\n\n- synchronized同步代码块保证只创建一个对象。\n\n- 条件判断使对象创建过后，不在进入同步块，减少锁的粒度。\n\n- volatitle防止指令重排序(否则出现一个线程创建一般的对象呗另一个线程访问，造成空指针)。\n\n\n```java\npublic class Singleton {\n    private volatile static Singleton instance;\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        if(instance == null){\n            synchronized (Singleton.class){\n                if(instance == null){\n                    instance = new Singleton();\n                }\n            }\n        }\n        return instance;\n    }\n}\n```\n\n\n4. 静态内部类\n\n- 利用ClassLoader的机制保证了线程安全\n\n- 相比饿汉式单例模式，实现懒加载，只有显示调用SingleHolder才会触发初始化。\n\n```java\npublic class Singleton {\n\n    private static class SingletonHolder{\n\n        private static final Singleton instance = new Singleton();\n\n    }\n\n    private Singleton(){}\n\n    public static final Singleton getInstance(){\n        return SingletonHolder.instance;\n    }\n}\n```\n\n5. 枚举\n\n- 线程安全（虚拟机加载枚举的时候，会使用ClassLoader的loadClass方法，这个方法使用同步代码块保证线程安全）\n\n* 解决反序列化破坏单例的问题:\n   - 普通序列化过程中，通过反射调用默认构造函数来初始化对象，反序列化的对象是新建的\n   - 枚举的反序列化不是通过构造函数实现，因此不会发生于由于反序列化导致的单例破坏问题\n\n\n```java\npublic enum Singleton {\n    INSTANCE;\n\n    public void getInstance(){\n\n    }\n}\n```\n\n\n\n### 如何设计优秀的单例模式\n\n### 引申\n1. 双重校验DCL为什么使用volatile\n2. synchronized与volatile的区别\n\n\n\n\n","slug":"单例模式","published":1,"updated":"2019-04-14T14:14:09.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjow0009w3s643nq3o6c","content":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/static/images/singleton-1.jpg\" alt><br><a id=\"more\"></a></p>\n<p>单例模式是一种简单的的设计模式。虽然简单，但是应用却是十分的广泛。所有有必要针对单例模式的知识点进行梳理。</p>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><blockquote>\n<p>确保类只有一个实例，并自动实例化向整个系统提供全局的访问点。从定义上可以推断出单例模式更倾向于节约资源，利于资源的重用从而节约时间。所以应用单例模式的对象应该具有以下特点：</p>\n</blockquote>\n<ul>\n<li>频繁地创建、销毁且性能无法优化</li>\n<li>消耗大量资源（读取配置、产生依赖对象），可以在应用启动时直接产生一个单例对象</li>\n<li>避免资源的多重占用 </li>\n<li>设置全局的访问点，优化和共享资源访问</li>\n</ul>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h3 id=\"单例模式设计的几点考虑\"><a href=\"#单例模式设计的几点考虑\" class=\"headerlink\" title=\"单例模式设计的几点考虑\"></a>单例模式设计的几点考虑</h3><ul>\n<li>延迟加载</li>\n<li>线程安全</li>\n<li>并发性能</li>\n<li>序列化/反序列化安全</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>延迟加载</th>\n<th>线程安全</th>\n<th>并发性能</th>\n<th>序列化/反序列化安全</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>饿汉式</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>懒汉式(不加锁)</td>\n<td>Y</td>\n<td>N</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>懒汉式(加锁)</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n<td>N</td>\n</tr>\n<tr>\n<td>DCL</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>静态内部类</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>枚举</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"单例模式实现\"><a href=\"#单例模式实现\" class=\"headerlink\" title=\"单例模式实现\"></a>单例模式实现</h3><ol>\n<li>饿汉式</li>\n</ol>\n<p>类加载时完成初始化</p>\n<ul>\n<li><p>类加载慢</p>\n</li>\n<li><p>获取对象速度快</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>懒汉式</li>\n</ol>\n<p>获取对象的时候完成初始化，实现懒加载。但是线程不安全，高并发下会出现多个实例。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( instance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>懒汉式（加锁）</li>\n</ol>\n<p>线程安全的懒汉式单例模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SafeSingleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SafeSingleton instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SafeSingleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> SafeSingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> SafeSingleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>双重检查DCL</li>\n</ol>\n<ul>\n<li><p>synchronized同步代码块保证只创建一个对象。</p>\n</li>\n<li><p>条件判断使对象创建过后，不在进入同步块，减少锁的粒度。</p>\n</li>\n<li><p>volatitle防止指令重排序(否则出现一个线程创建一般的对象呗另一个线程访问，造成空指针)。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>静态内部类</li>\n</ol>\n<ul>\n<li><p>利用ClassLoader的机制保证了线程安全</p>\n</li>\n<li><p>相比饿汉式单例模式，实现懒加载，只有显示调用SingleHolder才会触发初始化。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>枚举</li>\n</ol>\n<ul>\n<li>线程安全（虚拟机加载枚举的时候，会使用ClassLoader的loadClass方法，这个方法使用同步代码块保证线程安全）</li>\n</ul>\n<ul>\n<li>解决反序列化破坏单例的问题:<ul>\n<li>普通序列化过程中，通过反射调用默认构造函数来初始化对象，反序列化的对象是新建的</li>\n<li>枚举的反序列化不是通过构造函数实现，因此不会发生于由于反序列化导致的单例破坏问题</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Singleton &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何设计优秀的单例模式\"><a href=\"#如何设计优秀的单例模式\" class=\"headerlink\" title=\"如何设计优秀的单例模式\"></a>如何设计优秀的单例模式</h3><h3 id=\"引申\"><a href=\"#引申\" class=\"headerlink\" title=\"引申\"></a>引申</h3><ol>\n<li>双重校验DCL为什么使用volatile</li>\n<li>synchronized与volatile的区别</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/static/images/singleton-1.jpg\" alt><br>","more":"</p>\n<p>单例模式是一种简单的的设计模式。虽然简单，但是应用却是十分的广泛。所有有必要针对单例模式的知识点进行梳理。</p>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><blockquote>\n<p>确保类只有一个实例，并自动实例化向整个系统提供全局的访问点。从定义上可以推断出单例模式更倾向于节约资源，利于资源的重用从而节约时间。所以应用单例模式的对象应该具有以下特点：</p>\n</blockquote>\n<ul>\n<li>频繁地创建、销毁且性能无法优化</li>\n<li>消耗大量资源（读取配置、产生依赖对象），可以在应用启动时直接产生一个单例对象</li>\n<li>避免资源的多重占用 </li>\n<li>设置全局的访问点，优化和共享资源访问</li>\n</ul>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h3 id=\"单例模式设计的几点考虑\"><a href=\"#单例模式设计的几点考虑\" class=\"headerlink\" title=\"单例模式设计的几点考虑\"></a>单例模式设计的几点考虑</h3><ul>\n<li>延迟加载</li>\n<li>线程安全</li>\n<li>并发性能</li>\n<li>序列化/反序列化安全</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>延迟加载</th>\n<th>线程安全</th>\n<th>并发性能</th>\n<th>序列化/反序列化安全</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>饿汉式</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>懒汉式(不加锁)</td>\n<td>Y</td>\n<td>N</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>懒汉式(加锁)</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n<td>N</td>\n</tr>\n<tr>\n<td>DCL</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>静态内部类</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>枚举</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"单例模式实现\"><a href=\"#单例模式实现\" class=\"headerlink\" title=\"单例模式实现\"></a>单例模式实现</h3><ol>\n<li>饿汉式</li>\n</ol>\n<p>类加载时完成初始化</p>\n<ul>\n<li><p>类加载慢</p>\n</li>\n<li><p>获取对象速度快</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>懒汉式</li>\n</ol>\n<p>获取对象的时候完成初始化，实现懒加载。但是线程不安全，高并发下会出现多个实例。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( instance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>懒汉式（加锁）</li>\n</ol>\n<p>线程安全的懒汉式单例模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SafeSingleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SafeSingleton instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SafeSingleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> SafeSingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> SafeSingleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>双重检查DCL</li>\n</ol>\n<ul>\n<li><p>synchronized同步代码块保证只创建一个对象。</p>\n</li>\n<li><p>条件判断使对象创建过后，不在进入同步块，减少锁的粒度。</p>\n</li>\n<li><p>volatitle防止指令重排序(否则出现一个线程创建一般的对象呗另一个线程访问，造成空指针)。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>静态内部类</li>\n</ol>\n<ul>\n<li><p>利用ClassLoader的机制保证了线程安全</p>\n</li>\n<li><p>相比饿汉式单例模式，实现懒加载，只有显示调用SingleHolder才会触发初始化。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>枚举</li>\n</ol>\n<ul>\n<li>线程安全（虚拟机加载枚举的时候，会使用ClassLoader的loadClass方法，这个方法使用同步代码块保证线程安全）</li>\n</ul>\n<ul>\n<li>解决反序列化破坏单例的问题:<ul>\n<li>普通序列化过程中，通过反射调用默认构造函数来初始化对象，反序列化的对象是新建的</li>\n<li>枚举的反序列化不是通过构造函数实现，因此不会发生于由于反序列化导致的单例破坏问题</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Singleton &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何设计优秀的单例模式\"><a href=\"#如何设计优秀的单例模式\" class=\"headerlink\" title=\"如何设计优秀的单例模式\"></a>如何设计优秀的单例模式</h3><h3 id=\"引申\"><a href=\"#引申\" class=\"headerlink\" title=\"引申\"></a>引申</h3><ol>\n<li>双重校验DCL为什么使用volatile</li>\n<li>synchronized与volatile的区别</li>\n</ol>"},{"title":"建造者模式","date":"2019-04-03T14:49:27.000Z","_content":"\n## 建造者模式\n\n> 将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示\n\n### 如何理解建造者模式\n\n建造者模式就是将建造复杂对象的过程和组成对象的部件进行解耦。\n\n#### 案例\n游戏公司设计游戏角色，其中人、兽、精灵三个种族。而每个种族又拥有不同的英雄角色。所以角色设计应该具备以下特点:\n\n+ 角色基本属性一致\n+ 角色创建过程复杂，不暴露创建细节\n+ 符合开闭原则，可以随时新增角色\n+ 各个角色间彼此不受影响\n\n这些特点很符合工厂模式的适用特点，那用工厂模式就可以实现的案例为何要用建造者模式？ 主要是一个角色包含有头、手、脚、毛发...等许多部件，不同种族不同角色的部件有许多差异。如果使用工厂模式，那么角色的创建过程会与其各个部件耦合在一起，如果部件比较多，那么角色的创建是比较复杂的。比如所以我们需要将对象的创建过程与组成对象的部件进行解耦，也就是这一章的主题---建造者模式\n\n### 类图（todo）\n1. 产品类\n\n定义产品的基本属性\n\n2. 抽象建造者\n\n定义产品各个部件的构建规范\n\n3. 具体构建者\n\n实现抽象构建者的所有方法，返回一个具体的产品\n\n4. 导演类\n\n负责封装已有模块的顺序\n+ 隔离客户与生产过程\n+ 控制产品的生成过程\n\n#### 优势\n1. 良好的封装性。产品类和建造类相对固定，将主要逻辑封装到导演类可以取得比较好的稳定性。\n2. 不需暴露产品内部细节，将产品本身与产品创建过程进行解耦。\n3. 精细控制产品创建过程。创建过程清晰，能够把控产品每个部件的创建过程。\n4. 良好的扩展性。新的需求只需要增加新的建造类就可以解决，符合开闭原则。\n\n#### 局限性\n1. 建造者不适合差异性很大的产品类。\n2. 产品内部变化复杂，需要定义很多建造类来实现，会导致系统变得庞大。\n\n#### 使用场景\n1. 相同的方法，不同的执行顺序，产生不同的事件结果\n2. 一个对象具有多个部件，但是不同的对象的部件有所差异，也可以使用建造者模式\n3. 需要隔离复杂对象的创建和使用，并使相同创建过程可以创建不同的产品\n\n### 建造者模式与工厂模式的区别\n\n工厂模式职责---创建对象\n\n+ 将创建过程封装到工厂类，有工厂类提供最终产品。\n\n建造模式职责---零件的装配以产生不同的对象\n\n+ 负责创建复杂对象，需要对对象的部件进行装配以产生不同效果的对象，具有的建造过程交给指挥类。由指挥类负责将各个组件按照规则组建为产品。\n \n","source":"_posts/建造者模式.md","raw":"---\ntitle: 建造者模式\ndate: 2019-04-03 22:49:27\ntags: Design\ncategories: 设计模式\n---\n\n## 建造者模式\n\n> 将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示\n\n### 如何理解建造者模式\n\n建造者模式就是将建造复杂对象的过程和组成对象的部件进行解耦。\n\n#### 案例\n游戏公司设计游戏角色，其中人、兽、精灵三个种族。而每个种族又拥有不同的英雄角色。所以角色设计应该具备以下特点:\n\n+ 角色基本属性一致\n+ 角色创建过程复杂，不暴露创建细节\n+ 符合开闭原则，可以随时新增角色\n+ 各个角色间彼此不受影响\n\n这些特点很符合工厂模式的适用特点，那用工厂模式就可以实现的案例为何要用建造者模式？ 主要是一个角色包含有头、手、脚、毛发...等许多部件，不同种族不同角色的部件有许多差异。如果使用工厂模式，那么角色的创建过程会与其各个部件耦合在一起，如果部件比较多，那么角色的创建是比较复杂的。比如所以我们需要将对象的创建过程与组成对象的部件进行解耦，也就是这一章的主题---建造者模式\n\n### 类图（todo）\n1. 产品类\n\n定义产品的基本属性\n\n2. 抽象建造者\n\n定义产品各个部件的构建规范\n\n3. 具体构建者\n\n实现抽象构建者的所有方法，返回一个具体的产品\n\n4. 导演类\n\n负责封装已有模块的顺序\n+ 隔离客户与生产过程\n+ 控制产品的生成过程\n\n#### 优势\n1. 良好的封装性。产品类和建造类相对固定，将主要逻辑封装到导演类可以取得比较好的稳定性。\n2. 不需暴露产品内部细节，将产品本身与产品创建过程进行解耦。\n3. 精细控制产品创建过程。创建过程清晰，能够把控产品每个部件的创建过程。\n4. 良好的扩展性。新的需求只需要增加新的建造类就可以解决，符合开闭原则。\n\n#### 局限性\n1. 建造者不适合差异性很大的产品类。\n2. 产品内部变化复杂，需要定义很多建造类来实现，会导致系统变得庞大。\n\n#### 使用场景\n1. 相同的方法，不同的执行顺序，产生不同的事件结果\n2. 一个对象具有多个部件，但是不同的对象的部件有所差异，也可以使用建造者模式\n3. 需要隔离复杂对象的创建和使用，并使相同创建过程可以创建不同的产品\n\n### 建造者模式与工厂模式的区别\n\n工厂模式职责---创建对象\n\n+ 将创建过程封装到工厂类，有工厂类提供最终产品。\n\n建造模式职责---零件的装配以产生不同的对象\n\n+ 负责创建复杂对象，需要对对象的部件进行装配以产生不同效果的对象，具有的建造过程交给指挥类。由指挥类负责将各个组件按照规则组建为产品。\n \n","slug":"建造者模式","published":1,"updated":"2019-04-14T14:14:16.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjp0000dw3s6had4ot7x","content":"<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><blockquote>\n<p>将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示</p>\n</blockquote>\n<h3 id=\"如何理解建造者模式\"><a href=\"#如何理解建造者模式\" class=\"headerlink\" title=\"如何理解建造者模式\"></a>如何理解建造者模式</h3><p>建造者模式就是将建造复杂对象的过程和组成对象的部件进行解耦。</p>\n<h4 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h4><p>游戏公司设计游戏角色，其中人、兽、精灵三个种族。而每个种族又拥有不同的英雄角色。所以角色设计应该具备以下特点:</p>\n<ul>\n<li>角色基本属性一致</li>\n<li>角色创建过程复杂，不暴露创建细节</li>\n<li>符合开闭原则，可以随时新增角色</li>\n<li>各个角色间彼此不受影响</li>\n</ul>\n<p>这些特点很符合工厂模式的适用特点，那用工厂模式就可以实现的案例为何要用建造者模式？ 主要是一个角色包含有头、手、脚、毛发…等许多部件，不同种族不同角色的部件有许多差异。如果使用工厂模式，那么角色的创建过程会与其各个部件耦合在一起，如果部件比较多，那么角色的创建是比较复杂的。比如所以我们需要将对象的创建过程与组成对象的部件进行解耦，也就是这一章的主题—建造者模式</p>\n<h3 id=\"类图（todo）\"><a href=\"#类图（todo）\" class=\"headerlink\" title=\"类图（todo）\"></a>类图（todo）</h3><ol>\n<li>产品类</li>\n</ol>\n<p>定义产品的基本属性</p>\n<ol start=\"2\">\n<li>抽象建造者</li>\n</ol>\n<p>定义产品各个部件的构建规范</p>\n<ol start=\"3\">\n<li>具体构建者</li>\n</ol>\n<p>实现抽象构建者的所有方法，返回一个具体的产品</p>\n<ol start=\"4\">\n<li>导演类</li>\n</ol>\n<p>负责封装已有模块的顺序</p>\n<ul>\n<li>隔离客户与生产过程</li>\n<li>控制产品的生成过程</li>\n</ul>\n<h4 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h4><ol>\n<li>良好的封装性。产品类和建造类相对固定，将主要逻辑封装到导演类可以取得比较好的稳定性。</li>\n<li>不需暴露产品内部细节，将产品本身与产品创建过程进行解耦。</li>\n<li>精细控制产品创建过程。创建过程清晰，能够把控产品每个部件的创建过程。</li>\n<li>良好的扩展性。新的需求只需要增加新的建造类就可以解决，符合开闭原则。</li>\n</ol>\n<h4 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h4><ol>\n<li>建造者不适合差异性很大的产品类。</li>\n<li>产品内部变化复杂，需要定义很多建造类来实现，会导致系统变得庞大。</li>\n</ol>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ol>\n<li>相同的方法，不同的执行顺序，产生不同的事件结果</li>\n<li>一个对象具有多个部件，但是不同的对象的部件有所差异，也可以使用建造者模式</li>\n<li>需要隔离复杂对象的创建和使用，并使相同创建过程可以创建不同的产品</li>\n</ol>\n<h3 id=\"建造者模式与工厂模式的区别\"><a href=\"#建造者模式与工厂模式的区别\" class=\"headerlink\" title=\"建造者模式与工厂模式的区别\"></a>建造者模式与工厂模式的区别</h3><p>工厂模式职责—创建对象</p>\n<ul>\n<li>将创建过程封装到工厂类，有工厂类提供最终产品。</li>\n</ul>\n<p>建造模式职责—零件的装配以产生不同的对象</p>\n<ul>\n<li>负责创建复杂对象，需要对对象的部件进行装配以产生不同效果的对象，具有的建造过程交给指挥类。由指挥类负责将各个组件按照规则组建为产品。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><blockquote>\n<p>将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示</p>\n</blockquote>\n<h3 id=\"如何理解建造者模式\"><a href=\"#如何理解建造者模式\" class=\"headerlink\" title=\"如何理解建造者模式\"></a>如何理解建造者模式</h3><p>建造者模式就是将建造复杂对象的过程和组成对象的部件进行解耦。</p>\n<h4 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h4><p>游戏公司设计游戏角色，其中人、兽、精灵三个种族。而每个种族又拥有不同的英雄角色。所以角色设计应该具备以下特点:</p>\n<ul>\n<li>角色基本属性一致</li>\n<li>角色创建过程复杂，不暴露创建细节</li>\n<li>符合开闭原则，可以随时新增角色</li>\n<li>各个角色间彼此不受影响</li>\n</ul>\n<p>这些特点很符合工厂模式的适用特点，那用工厂模式就可以实现的案例为何要用建造者模式？ 主要是一个角色包含有头、手、脚、毛发…等许多部件，不同种族不同角色的部件有许多差异。如果使用工厂模式，那么角色的创建过程会与其各个部件耦合在一起，如果部件比较多，那么角色的创建是比较复杂的。比如所以我们需要将对象的创建过程与组成对象的部件进行解耦，也就是这一章的主题—建造者模式</p>\n<h3 id=\"类图（todo）\"><a href=\"#类图（todo）\" class=\"headerlink\" title=\"类图（todo）\"></a>类图（todo）</h3><ol>\n<li>产品类</li>\n</ol>\n<p>定义产品的基本属性</p>\n<ol start=\"2\">\n<li>抽象建造者</li>\n</ol>\n<p>定义产品各个部件的构建规范</p>\n<ol start=\"3\">\n<li>具体构建者</li>\n</ol>\n<p>实现抽象构建者的所有方法，返回一个具体的产品</p>\n<ol start=\"4\">\n<li>导演类</li>\n</ol>\n<p>负责封装已有模块的顺序</p>\n<ul>\n<li>隔离客户与生产过程</li>\n<li>控制产品的生成过程</li>\n</ul>\n<h4 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h4><ol>\n<li>良好的封装性。产品类和建造类相对固定，将主要逻辑封装到导演类可以取得比较好的稳定性。</li>\n<li>不需暴露产品内部细节，将产品本身与产品创建过程进行解耦。</li>\n<li>精细控制产品创建过程。创建过程清晰，能够把控产品每个部件的创建过程。</li>\n<li>良好的扩展性。新的需求只需要增加新的建造类就可以解决，符合开闭原则。</li>\n</ol>\n<h4 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h4><ol>\n<li>建造者不适合差异性很大的产品类。</li>\n<li>产品内部变化复杂，需要定义很多建造类来实现，会导致系统变得庞大。</li>\n</ol>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ol>\n<li>相同的方法，不同的执行顺序，产生不同的事件结果</li>\n<li>一个对象具有多个部件，但是不同的对象的部件有所差异，也可以使用建造者模式</li>\n<li>需要隔离复杂对象的创建和使用，并使相同创建过程可以创建不同的产品</li>\n</ol>\n<h3 id=\"建造者模式与工厂模式的区别\"><a href=\"#建造者模式与工厂模式的区别\" class=\"headerlink\" title=\"建造者模式与工厂模式的区别\"></a>建造者模式与工厂模式的区别</h3><p>工厂模式职责—创建对象</p>\n<ul>\n<li>将创建过程封装到工厂类，有工厂类提供最终产品。</li>\n</ul>\n<p>建造模式职责—零件的装配以产生不同的对象</p>\n<ul>\n<li>负责创建复杂对象，需要对对象的部件进行装配以产生不同效果的对象，具有的建造过程交给指挥类。由指挥类负责将各个组件按照规则组建为产品。</li>\n</ul>\n"},{"title":"命令模式","date":"2019-04-09T13:34:52.000Z","_content":"\n### 什么是命令模式\n\n\n\n\n\n\n\n","source":"_posts/命令模式.md","raw":"---\ntitle: 命令模式\ndate: 2019-04-09 21:34:52\ntags: Design\ncategories: 设计模式\n---\n\n### 什么是命令模式\n\n\n\n\n\n\n\n","slug":"命令模式","published":1,"updated":"2019-04-14T14:13:44.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjp3000fw3s6zakr7lgn","content":"<h3 id=\"什么是命令模式\"><a href=\"#什么是命令模式\" class=\"headerlink\" title=\"什么是命令模式\"></a>什么是命令模式</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是命令模式\"><a href=\"#什么是命令模式\" class=\"headerlink\" title=\"什么是命令模式\"></a>什么是命令模式</h3>"},{"title":"开闭原则|","date":"2019-03-22T12:55:03.000Z","_content":"\n![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-237-thumbnail-small.jpg)\n<!-- more -->\n","source":"_posts/开闭原则.md","raw":"---\ntitle: 开闭原则|\ndate: 2019-03-22 20:55:03\ntags: Design\ncategories: 设计模式\n---\n\n![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-237-thumbnail-small.jpg)\n<!-- more -->\n","slug":"开闭原则","published":1,"updated":"2019-03-31T05:56:28.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjp7000kw3s67zyva733","content":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-237-thumbnail-small.jpg\" alt><br><a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-237-thumbnail-small.jpg\" alt><br>","more":"</p>"},{"title":"接口隔离原则|","date":"2019-03-22T12:56:31.000Z","_content":"\n![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-237-thumbnail-small.jpg)\n<!-- more -->\n\n### 什么是接口隔离原则\n+ 客户端不应该依赖它不需要的接口\n+ 类间的依赖关系应该建立在最小的接口上\n\n总的来说，就是建立单一的接口，不要建立臃肿庞大的接口，接口尽量细化，接口的方法尽量少\n","source":"_posts/接口隔离原则.md","raw":"---\ntitle: 接口隔离原则|\ndate: 2019-03-22 20:56:31\ntags: Design\ncategories: 设计模式\n---\n\n![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-237-thumbnail-small.jpg)\n<!-- more -->\n\n### 什么是接口隔离原则\n+ 客户端不应该依赖它不需要的接口\n+ 类间的依赖关系应该建立在最小的接口上\n\n总的来说，就是建立单一的接口，不要建立臃肿庞大的接口，接口尽量细化，接口的方法尽量少\n","slug":"接口隔离原则","published":1,"updated":"2019-03-31T05:56:26.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjp9000nw3s6k4ymqoz9","content":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-237-thumbnail-small.jpg\" alt><br><a id=\"more\"></a></p>\n<h3 id=\"什么是接口隔离原则\"><a href=\"#什么是接口隔离原则\" class=\"headerlink\" title=\"什么是接口隔离原则\"></a>什么是接口隔离原则</h3><ul>\n<li>客户端不应该依赖它不需要的接口</li>\n<li>类间的依赖关系应该建立在最小的接口上</li>\n</ul>\n<p>总的来说，就是建立单一的接口，不要建立臃肿庞大的接口，接口尽量细化，接口的方法尽量少</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-237-thumbnail-small.jpg\" alt><br>","more":"</p>\n<h3 id=\"什么是接口隔离原则\"><a href=\"#什么是接口隔离原则\" class=\"headerlink\" title=\"什么是接口隔离原则\"></a>什么是接口隔离原则</h3><ul>\n<li>客户端不应该依赖它不需要的接口</li>\n<li>类间的依赖关系应该建立在最小的接口上</li>\n</ul>\n<p>总的来说，就是建立单一的接口，不要建立臃肿庞大的接口，接口尽量细化，接口的方法尽量少</p>"},{"title":"模板模式","date":"2019-03-25T13:14:01.000Z","_content":"\n![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-271-thumbnail-small.jpg)\n<!-- more -->\n### 模板方法模式\n\n>定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重新定义该算法的某些特定步骤\n\n### 如何理解模板模式\n在我们的认识中，模板就是一些约定俗成的东西，是一些自然而然的事物规律。当我们想要解决一些具有模板规律的事情的时候，手中的模板就是一个个整齐待发的磨具，能够轻松进行重复制造、生产。由此想了想，生活中哪些事情满足模板模式的规律：\n1. 制茶，制茶是一个很有讲究的学问。制造茶的流程总是相对固定的。采青-> 萎凋->发酵-> 杀青 -> 揉捻 -> 干燥 -> 初制茶。每个工坊的制作工艺有所差别，有些工坊的手工揉捻做的比较好，有些工坊的萎凋做的比较有特点，所以生产出来的茶叶有所区别。但是他们的总体流程是相对差不多的，都遵循相同的制作模板。\n2. 造车，车的总体功能差不多， 能够启动、停止，能够鸣笛、跑路。但是不同型号的车是有所差异的。有些车是手动挡，有些是自动挡。\n\n我们可以根据这类食物的规律总结一下特点：\n+ 具有一个抽象的模板，这个模板决定了这类事物的总体流程规律（父类抽象模板）\n+ 不同的事物虽然具有共同的抽象模板，但是彼此有着个性化的差异（个性化子类）\n+ 子类的个性化特点能够重新定义整个事物的最终呈现结构，就好比不同的茶叶工坊的制作工艺的差别会导致这个茶叶具有不同销量和名声。不同型号的车会导致车具有不同的价格和市场。\n\n程序是现实世界的抽象，模板模式的类可以总结如下：\n\n抽象模板\n\n+ 基本方法\n\n子类的个性化方法，由子类去实现，如制茶过程中每一个环节（发酵...）\n\n+ 模板方法\n\n对基本方法的调度，已完成固定的逻辑。如制茶这样的模板方法就是将制茶每个环节的调度，完成造茶这么一个逻辑。\n\n注意：\n1. 基本方法尽量设计成protected类型，符合迪米特法则，若非必要，尽量不要扩大父类的访问权限。\n2. 模板方法一般设计成final类型，不要被覆写\n\n### 为什么要用模板模式\n1. 封装不变部分，扩展可变部分\n\n不变的流程规律由父类来实现，而可变的每个环节由子类来控制。\n\n2. 提取公共部分代码，便于维护\n\n3. 行为由父类控制、子类实现\n\n基本方法由子类实现，子类可以通过扩展类来增加相应功能，符合开闭原则。\n\n模板模式实现\n\n\n模板模式也有缺陷\n\n四思维方式与以往有所不同，不好理解。\n\n常规思路:\n\n+ 抽象类->最抽象、最一般的事物属性和方法\n\n+ 具体类->具体的事物属性和方法\n\n模板模式思路：\n\n+ 抽象类->定义部分抽象方法\n\n+ 实现类->子类的执行结果对父类结构产生影响\n\n总结一下\n\n模板模式的扩展--钩子函数的应用\n由子类的一个方法返回值来决定公共部分的执行结果\n\n引申\n### 父类怎么调用子类的方法\n1. 子类传递到父类的有参构造中\n2. 反射\n3. 父类调用子类的静态方法\n\n其实模板模式就间接的实现了父类依赖子类的场景\n+ 父类建立框架->子类重写父类 -> 调用父类继承方法-> 影响父类结果\n\n\n\n\n","source":"_posts/模板模式.md","raw":"---\ntitle: 模板模式\ndate: 2019-03-25 21:14:01\ntags: Design\ncategories: 设计模式\n---\n\n![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-271-thumbnail-small.jpg)\n<!-- more -->\n### 模板方法模式\n\n>定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重新定义该算法的某些特定步骤\n\n### 如何理解模板模式\n在我们的认识中，模板就是一些约定俗成的东西，是一些自然而然的事物规律。当我们想要解决一些具有模板规律的事情的时候，手中的模板就是一个个整齐待发的磨具，能够轻松进行重复制造、生产。由此想了想，生活中哪些事情满足模板模式的规律：\n1. 制茶，制茶是一个很有讲究的学问。制造茶的流程总是相对固定的。采青-> 萎凋->发酵-> 杀青 -> 揉捻 -> 干燥 -> 初制茶。每个工坊的制作工艺有所差别，有些工坊的手工揉捻做的比较好，有些工坊的萎凋做的比较有特点，所以生产出来的茶叶有所区别。但是他们的总体流程是相对差不多的，都遵循相同的制作模板。\n2. 造车，车的总体功能差不多， 能够启动、停止，能够鸣笛、跑路。但是不同型号的车是有所差异的。有些车是手动挡，有些是自动挡。\n\n我们可以根据这类食物的规律总结一下特点：\n+ 具有一个抽象的模板，这个模板决定了这类事物的总体流程规律（父类抽象模板）\n+ 不同的事物虽然具有共同的抽象模板，但是彼此有着个性化的差异（个性化子类）\n+ 子类的个性化特点能够重新定义整个事物的最终呈现结构，就好比不同的茶叶工坊的制作工艺的差别会导致这个茶叶具有不同销量和名声。不同型号的车会导致车具有不同的价格和市场。\n\n程序是现实世界的抽象，模板模式的类可以总结如下：\n\n抽象模板\n\n+ 基本方法\n\n子类的个性化方法，由子类去实现，如制茶过程中每一个环节（发酵...）\n\n+ 模板方法\n\n对基本方法的调度，已完成固定的逻辑。如制茶这样的模板方法就是将制茶每个环节的调度，完成造茶这么一个逻辑。\n\n注意：\n1. 基本方法尽量设计成protected类型，符合迪米特法则，若非必要，尽量不要扩大父类的访问权限。\n2. 模板方法一般设计成final类型，不要被覆写\n\n### 为什么要用模板模式\n1. 封装不变部分，扩展可变部分\n\n不变的流程规律由父类来实现，而可变的每个环节由子类来控制。\n\n2. 提取公共部分代码，便于维护\n\n3. 行为由父类控制、子类实现\n\n基本方法由子类实现，子类可以通过扩展类来增加相应功能，符合开闭原则。\n\n模板模式实现\n\n\n模板模式也有缺陷\n\n四思维方式与以往有所不同，不好理解。\n\n常规思路:\n\n+ 抽象类->最抽象、最一般的事物属性和方法\n\n+ 具体类->具体的事物属性和方法\n\n模板模式思路：\n\n+ 抽象类->定义部分抽象方法\n\n+ 实现类->子类的执行结果对父类结构产生影响\n\n总结一下\n\n模板模式的扩展--钩子函数的应用\n由子类的一个方法返回值来决定公共部分的执行结果\n\n引申\n### 父类怎么调用子类的方法\n1. 子类传递到父类的有参构造中\n2. 反射\n3. 父类调用子类的静态方法\n\n其实模板模式就间接的实现了父类依赖子类的场景\n+ 父类建立框架->子类重写父类 -> 调用父类继承方法-> 影响父类结果\n\n\n\n\n","slug":"模板模式","published":1,"updated":"2019-03-31T05:56:35.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjpa000qw3s6mszqzuvx","content":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-271-thumbnail-small.jpg\" alt><br><a id=\"more\"></a></p>\n<h3 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h3><blockquote>\n<p>定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重新定义该算法的某些特定步骤</p>\n</blockquote>\n<h3 id=\"如何理解模板模式\"><a href=\"#如何理解模板模式\" class=\"headerlink\" title=\"如何理解模板模式\"></a>如何理解模板模式</h3><p>在我们的认识中，模板就是一些约定俗成的东西，是一些自然而然的事物规律。当我们想要解决一些具有模板规律的事情的时候，手中的模板就是一个个整齐待发的磨具，能够轻松进行重复制造、生产。由此想了想，生活中哪些事情满足模板模式的规律：</p>\n<ol>\n<li>制茶，制茶是一个很有讲究的学问。制造茶的流程总是相对固定的。采青-&gt; 萎凋-&gt;发酵-&gt; 杀青 -&gt; 揉捻 -&gt; 干燥 -&gt; 初制茶。每个工坊的制作工艺有所差别，有些工坊的手工揉捻做的比较好，有些工坊的萎凋做的比较有特点，所以生产出来的茶叶有所区别。但是他们的总体流程是相对差不多的，都遵循相同的制作模板。</li>\n<li>造车，车的总体功能差不多， 能够启动、停止，能够鸣笛、跑路。但是不同型号的车是有所差异的。有些车是手动挡，有些是自动挡。</li>\n</ol>\n<p>我们可以根据这类食物的规律总结一下特点：</p>\n<ul>\n<li>具有一个抽象的模板，这个模板决定了这类事物的总体流程规律（父类抽象模板）</li>\n<li>不同的事物虽然具有共同的抽象模板，但是彼此有着个性化的差异（个性化子类）</li>\n<li>子类的个性化特点能够重新定义整个事物的最终呈现结构，就好比不同的茶叶工坊的制作工艺的差别会导致这个茶叶具有不同销量和名声。不同型号的车会导致车具有不同的价格和市场。</li>\n</ul>\n<p>程序是现实世界的抽象，模板模式的类可以总结如下：</p>\n<p>抽象模板</p>\n<ul>\n<li>基本方法</li>\n</ul>\n<p>子类的个性化方法，由子类去实现，如制茶过程中每一个环节（发酵…）</p>\n<ul>\n<li>模板方法</li>\n</ul>\n<p>对基本方法的调度，已完成固定的逻辑。如制茶这样的模板方法就是将制茶每个环节的调度，完成造茶这么一个逻辑。</p>\n<p>注意：</p>\n<ol>\n<li>基本方法尽量设计成protected类型，符合迪米特法则，若非必要，尽量不要扩大父类的访问权限。</li>\n<li>模板方法一般设计成final类型，不要被覆写</li>\n</ol>\n<h3 id=\"为什么要用模板模式\"><a href=\"#为什么要用模板模式\" class=\"headerlink\" title=\"为什么要用模板模式\"></a>为什么要用模板模式</h3><ol>\n<li>封装不变部分，扩展可变部分</li>\n</ol>\n<p>不变的流程规律由父类来实现，而可变的每个环节由子类来控制。</p>\n<ol start=\"2\">\n<li><p>提取公共部分代码，便于维护</p>\n</li>\n<li><p>行为由父类控制、子类实现</p>\n</li>\n</ol>\n<p>基本方法由子类实现，子类可以通过扩展类来增加相应功能，符合开闭原则。</p>\n<p>模板模式实现</p>\n<p>模板模式也有缺陷</p>\n<p>四思维方式与以往有所不同，不好理解。</p>\n<p>常规思路:</p>\n<ul>\n<li><p>抽象类-&gt;最抽象、最一般的事物属性和方法</p>\n</li>\n<li><p>具体类-&gt;具体的事物属性和方法</p>\n</li>\n</ul>\n<p>模板模式思路：</p>\n<ul>\n<li><p>抽象类-&gt;定义部分抽象方法</p>\n</li>\n<li><p>实现类-&gt;子类的执行结果对父类结构产生影响</p>\n</li>\n</ul>\n<p>总结一下</p>\n<p>模板模式的扩展–钩子函数的应用<br>由子类的一个方法返回值来决定公共部分的执行结果</p>\n<p>引申</p>\n<h3 id=\"父类怎么调用子类的方法\"><a href=\"#父类怎么调用子类的方法\" class=\"headerlink\" title=\"父类怎么调用子类的方法\"></a>父类怎么调用子类的方法</h3><ol>\n<li>子类传递到父类的有参构造中</li>\n<li>反射</li>\n<li>父类调用子类的静态方法</li>\n</ol>\n<p>其实模板模式就间接的实现了父类依赖子类的场景</p>\n<ul>\n<li>父类建立框架-&gt;子类重写父类 -&gt; 调用父类继承方法-&gt; 影响父类结果</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-271-thumbnail-small.jpg\" alt><br>","more":"</p>\n<h3 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h3><blockquote>\n<p>定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重新定义该算法的某些特定步骤</p>\n</blockquote>\n<h3 id=\"如何理解模板模式\"><a href=\"#如何理解模板模式\" class=\"headerlink\" title=\"如何理解模板模式\"></a>如何理解模板模式</h3><p>在我们的认识中，模板就是一些约定俗成的东西，是一些自然而然的事物规律。当我们想要解决一些具有模板规律的事情的时候，手中的模板就是一个个整齐待发的磨具，能够轻松进行重复制造、生产。由此想了想，生活中哪些事情满足模板模式的规律：</p>\n<ol>\n<li>制茶，制茶是一个很有讲究的学问。制造茶的流程总是相对固定的。采青-&gt; 萎凋-&gt;发酵-&gt; 杀青 -&gt; 揉捻 -&gt; 干燥 -&gt; 初制茶。每个工坊的制作工艺有所差别，有些工坊的手工揉捻做的比较好，有些工坊的萎凋做的比较有特点，所以生产出来的茶叶有所区别。但是他们的总体流程是相对差不多的，都遵循相同的制作模板。</li>\n<li>造车，车的总体功能差不多， 能够启动、停止，能够鸣笛、跑路。但是不同型号的车是有所差异的。有些车是手动挡，有些是自动挡。</li>\n</ol>\n<p>我们可以根据这类食物的规律总结一下特点：</p>\n<ul>\n<li>具有一个抽象的模板，这个模板决定了这类事物的总体流程规律（父类抽象模板）</li>\n<li>不同的事物虽然具有共同的抽象模板，但是彼此有着个性化的差异（个性化子类）</li>\n<li>子类的个性化特点能够重新定义整个事物的最终呈现结构，就好比不同的茶叶工坊的制作工艺的差别会导致这个茶叶具有不同销量和名声。不同型号的车会导致车具有不同的价格和市场。</li>\n</ul>\n<p>程序是现实世界的抽象，模板模式的类可以总结如下：</p>\n<p>抽象模板</p>\n<ul>\n<li>基本方法</li>\n</ul>\n<p>子类的个性化方法，由子类去实现，如制茶过程中每一个环节（发酵…）</p>\n<ul>\n<li>模板方法</li>\n</ul>\n<p>对基本方法的调度，已完成固定的逻辑。如制茶这样的模板方法就是将制茶每个环节的调度，完成造茶这么一个逻辑。</p>\n<p>注意：</p>\n<ol>\n<li>基本方法尽量设计成protected类型，符合迪米特法则，若非必要，尽量不要扩大父类的访问权限。</li>\n<li>模板方法一般设计成final类型，不要被覆写</li>\n</ol>\n<h3 id=\"为什么要用模板模式\"><a href=\"#为什么要用模板模式\" class=\"headerlink\" title=\"为什么要用模板模式\"></a>为什么要用模板模式</h3><ol>\n<li>封装不变部分，扩展可变部分</li>\n</ol>\n<p>不变的流程规律由父类来实现，而可变的每个环节由子类来控制。</p>\n<ol start=\"2\">\n<li><p>提取公共部分代码，便于维护</p>\n</li>\n<li><p>行为由父类控制、子类实现</p>\n</li>\n</ol>\n<p>基本方法由子类实现，子类可以通过扩展类来增加相应功能，符合开闭原则。</p>\n<p>模板模式实现</p>\n<p>模板模式也有缺陷</p>\n<p>四思维方式与以往有所不同，不好理解。</p>\n<p>常规思路:</p>\n<ul>\n<li><p>抽象类-&gt;最抽象、最一般的事物属性和方法</p>\n</li>\n<li><p>具体类-&gt;具体的事物属性和方法</p>\n</li>\n</ul>\n<p>模板模式思路：</p>\n<ul>\n<li><p>抽象类-&gt;定义部分抽象方法</p>\n</li>\n<li><p>实现类-&gt;子类的执行结果对父类结构产生影响</p>\n</li>\n</ul>\n<p>总结一下</p>\n<p>模板模式的扩展–钩子函数的应用<br>由子类的一个方法返回值来决定公共部分的执行结果</p>\n<p>引申</p>\n<h3 id=\"父类怎么调用子类的方法\"><a href=\"#父类怎么调用子类的方法\" class=\"headerlink\" title=\"父类怎么调用子类的方法\"></a>父类怎么调用子类的方法</h3><ol>\n<li>子类传递到父类的有参构造中</li>\n<li>反射</li>\n<li>父类调用子类的静态方法</li>\n</ol>\n<p>其实模板模式就间接的实现了父类依赖子类的场景</p>\n<ul>\n<li>父类建立框架-&gt;子类重写父类 -&gt; 调用父类继承方法-&gt; 影响父类结果</li>\n</ul>"},{"title":"策略模式","date":"2019-04-13T12:44:43.000Z","_content":"\n### 实际案例\n\n#### 一个主题切换案例\n```java\npublic interface Theme {\n    void applyTheme();\n}\n```\n\n```java\npublic class DefaultTheme implements Theme{\n    @Override\n    public void applyTheme() {\n        System.out.println(\"设置默认主题\");\n    }\n}\n```\n```java\npublic class DarkTheme implements Theme{\n    @Override\n    public void applyTheme() {\n        System.out.println(\"设置暗黑风格主题\");\n    }\n}\n```\n\n```java\npublic class ColorfulTheme implements Theme{\n    @Override\n    public void applyTheme() {\n        System.out.println(\"设置彩色风格主题\");\n    }\n}\n```\n\n```java\npublic class ThemeManager {\n    private Theme theme;\n\n    public ThemeManager() {\n        this.theme = new DefaultTheme();\n    }\n\n    public void setTheme(Theme theme){\n        this.theme = theme;\n    }\n\n    public void applyTheme(){\n        this.theme.applyTheme();\n    }\n}\n```\n\n```java\npublic class Client {\n    public static void main(String[] args) {\n        ThemeManager themeManager = new ThemeManager();\n        //设置黑暗风格主题\n        themeManager.setTheme(new DarkTheme());\n        themeManager.applyTheme();\n    }\n}\n```\n主题模式更换的案例中，不同的主题风格就是一个个策略，我们可以根须需要选择不同的策略。\n\n### 如何理解策略模式\n> 定义椅子算法，将每个算法都以类的方式凤凰钻起来，并且使他们可以互相交换。\n\n类图（TODO）\n\n策略模式模型抽象\n\n+ Context封装角色\n\n\b\b主题更换案例中的ThemeManager就是一个封装角色，也叫上下文角色，拼比高层对策略的直接访问。\n\n+ Strategy抽象策略角色\n\n定义每个策略必须具有的方法和属性\n\n+ ConcreteStrategy具体策略角色\n\n抽象策略的实现，具体的算法\n\n\n### 策略模式的优点\n+ 算法可以自由切换\n+ 避免了多重条件的判断\n+ 良好的扩展性(符合开闭原则)\n\n### 策略模式的缺点\n+ 策略类会逐渐增多(超过四个考虑使用混合模式)\n+ 策略类必须向外暴露(违反迪米特法则) --- 上层模块必须知道哪些策略，才能使用哪些策略，可用工厂方法模式修正\n\n### 策略模式的具体应用\n+ Shiro权限控制框架有三种验证策略\n   \n   \n\n\n\n\n\n\n\n","source":"_posts/策略模式.md","raw":"---\ntitle: 策略模式\ndate: 2019-04-13 20:44:43\ntags: Design\ncategories: 设计模式\n---\n\n### 实际案例\n\n#### 一个主题切换案例\n```java\npublic interface Theme {\n    void applyTheme();\n}\n```\n\n```java\npublic class DefaultTheme implements Theme{\n    @Override\n    public void applyTheme() {\n        System.out.println(\"设置默认主题\");\n    }\n}\n```\n```java\npublic class DarkTheme implements Theme{\n    @Override\n    public void applyTheme() {\n        System.out.println(\"设置暗黑风格主题\");\n    }\n}\n```\n\n```java\npublic class ColorfulTheme implements Theme{\n    @Override\n    public void applyTheme() {\n        System.out.println(\"设置彩色风格主题\");\n    }\n}\n```\n\n```java\npublic class ThemeManager {\n    private Theme theme;\n\n    public ThemeManager() {\n        this.theme = new DefaultTheme();\n    }\n\n    public void setTheme(Theme theme){\n        this.theme = theme;\n    }\n\n    public void applyTheme(){\n        this.theme.applyTheme();\n    }\n}\n```\n\n```java\npublic class Client {\n    public static void main(String[] args) {\n        ThemeManager themeManager = new ThemeManager();\n        //设置黑暗风格主题\n        themeManager.setTheme(new DarkTheme());\n        themeManager.applyTheme();\n    }\n}\n```\n主题模式更换的案例中，不同的主题风格就是一个个策略，我们可以根须需要选择不同的策略。\n\n### 如何理解策略模式\n> 定义椅子算法，将每个算法都以类的方式凤凰钻起来，并且使他们可以互相交换。\n\n类图（TODO）\n\n策略模式模型抽象\n\n+ Context封装角色\n\n\b\b主题更换案例中的ThemeManager就是一个封装角色，也叫上下文角色，拼比高层对策略的直接访问。\n\n+ Strategy抽象策略角色\n\n定义每个策略必须具有的方法和属性\n\n+ ConcreteStrategy具体策略角色\n\n抽象策略的实现，具体的算法\n\n\n### 策略模式的优点\n+ 算法可以自由切换\n+ 避免了多重条件的判断\n+ 良好的扩展性(符合开闭原则)\n\n### 策略模式的缺点\n+ 策略类会逐渐增多(超过四个考虑使用混合模式)\n+ 策略类必须向外暴露(违反迪米特法则) --- 上层模块必须知道哪些策略，才能使用哪些策略，可用工厂方法模式修正\n\n### 策略模式的具体应用\n+ Shiro权限控制框架有三种验证策略\n   \n   \n\n\n\n\n\n\n\n","slug":"策略模式","published":1,"updated":"2019-04-14T11:53:15.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjpb000tw3s6p0ai711g","content":"<h3 id=\"实际案例\"><a href=\"#实际案例\" class=\"headerlink\" title=\"实际案例\"></a>实际案例</h3><h4 id=\"一个主题切换案例\"><a href=\"#一个主题切换案例\" class=\"headerlink\" title=\"一个主题切换案例\"></a>一个主题切换案例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Theme</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">applyTheme</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultTheme</span> <span class=\"keyword\">implements</span> <span class=\"title\">Theme</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">applyTheme</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"设置默认主题\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DarkTheme</span> <span class=\"keyword\">implements</span> <span class=\"title\">Theme</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">applyTheme</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"设置暗黑风格主题\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorfulTheme</span> <span class=\"keyword\">implements</span> <span class=\"title\">Theme</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">applyTheme</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"设置彩色风格主题\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThemeManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Theme theme;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThemeManager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.theme = <span class=\"keyword\">new</span> DefaultTheme();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTheme</span><span class=\"params\">(Theme theme)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.theme = theme;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">applyTheme</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.theme.applyTheme();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ThemeManager themeManager = <span class=\"keyword\">new</span> ThemeManager();</span><br><span class=\"line\">        <span class=\"comment\">//设置黑暗风格主题</span></span><br><span class=\"line\">        themeManager.setTheme(<span class=\"keyword\">new</span> DarkTheme());</span><br><span class=\"line\">        themeManager.applyTheme();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主题模式更换的案例中，不同的主题风格就是一个个策略，我们可以根须需要选择不同的策略。</p>\n<h3 id=\"如何理解策略模式\"><a href=\"#如何理解策略模式\" class=\"headerlink\" title=\"如何理解策略模式\"></a>如何理解策略模式</h3><blockquote>\n<p>定义椅子算法，将每个算法都以类的方式凤凰钻起来，并且使他们可以互相交换。</p>\n</blockquote>\n<p>类图（TODO）</p>\n<p>策略模式模型抽象</p>\n<ul>\n<li>Context封装角色</li>\n</ul>\n<p>\b\b主题更换案例中的ThemeManager就是一个封装角色，也叫上下文角色，拼比高层对策略的直接访问。</p>\n<ul>\n<li>Strategy抽象策略角色</li>\n</ul>\n<p>定义每个策略必须具有的方法和属性</p>\n<ul>\n<li>ConcreteStrategy具体策略角色</li>\n</ul>\n<p>抽象策略的实现，具体的算法</p>\n<h3 id=\"策略模式的优点\"><a href=\"#策略模式的优点\" class=\"headerlink\" title=\"策略模式的优点\"></a>策略模式的优点</h3><ul>\n<li>算法可以自由切换</li>\n<li>避免了多重条件的判断</li>\n<li>良好的扩展性(符合开闭原则)</li>\n</ul>\n<h3 id=\"策略模式的缺点\"><a href=\"#策略模式的缺点\" class=\"headerlink\" title=\"策略模式的缺点\"></a>策略模式的缺点</h3><ul>\n<li>策略类会逐渐增多(超过四个考虑使用混合模式)</li>\n<li>策略类必须向外暴露(违反迪米特法则) — 上层模块必须知道哪些策略，才能使用哪些策略，可用工厂方法模式修正</li>\n</ul>\n<h3 id=\"策略模式的具体应用\"><a href=\"#策略模式的具体应用\" class=\"headerlink\" title=\"策略模式的具体应用\"></a>策略模式的具体应用</h3><ul>\n<li>Shiro权限控制框架有三种验证策略</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"实际案例\"><a href=\"#实际案例\" class=\"headerlink\" title=\"实际案例\"></a>实际案例</h3><h4 id=\"一个主题切换案例\"><a href=\"#一个主题切换案例\" class=\"headerlink\" title=\"一个主题切换案例\"></a>一个主题切换案例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Theme</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">applyTheme</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultTheme</span> <span class=\"keyword\">implements</span> <span class=\"title\">Theme</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">applyTheme</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"设置默认主题\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DarkTheme</span> <span class=\"keyword\">implements</span> <span class=\"title\">Theme</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">applyTheme</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"设置暗黑风格主题\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorfulTheme</span> <span class=\"keyword\">implements</span> <span class=\"title\">Theme</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">applyTheme</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"设置彩色风格主题\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThemeManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Theme theme;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThemeManager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.theme = <span class=\"keyword\">new</span> DefaultTheme();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTheme</span><span class=\"params\">(Theme theme)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.theme = theme;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">applyTheme</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.theme.applyTheme();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ThemeManager themeManager = <span class=\"keyword\">new</span> ThemeManager();</span><br><span class=\"line\">        <span class=\"comment\">//设置黑暗风格主题</span></span><br><span class=\"line\">        themeManager.setTheme(<span class=\"keyword\">new</span> DarkTheme());</span><br><span class=\"line\">        themeManager.applyTheme();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主题模式更换的案例中，不同的主题风格就是一个个策略，我们可以根须需要选择不同的策略。</p>\n<h3 id=\"如何理解策略模式\"><a href=\"#如何理解策略模式\" class=\"headerlink\" title=\"如何理解策略模式\"></a>如何理解策略模式</h3><blockquote>\n<p>定义椅子算法，将每个算法都以类的方式凤凰钻起来，并且使他们可以互相交换。</p>\n</blockquote>\n<p>类图（TODO）</p>\n<p>策略模式模型抽象</p>\n<ul>\n<li>Context封装角色</li>\n</ul>\n<p>\b\b主题更换案例中的ThemeManager就是一个封装角色，也叫上下文角色，拼比高层对策略的直接访问。</p>\n<ul>\n<li>Strategy抽象策略角色</li>\n</ul>\n<p>定义每个策略必须具有的方法和属性</p>\n<ul>\n<li>ConcreteStrategy具体策略角色</li>\n</ul>\n<p>抽象策略的实现，具体的算法</p>\n<h3 id=\"策略模式的优点\"><a href=\"#策略模式的优点\" class=\"headerlink\" title=\"策略模式的优点\"></a>策略模式的优点</h3><ul>\n<li>算法可以自由切换</li>\n<li>避免了多重条件的判断</li>\n<li>良好的扩展性(符合开闭原则)</li>\n</ul>\n<h3 id=\"策略模式的缺点\"><a href=\"#策略模式的缺点\" class=\"headerlink\" title=\"策略模式的缺点\"></a>策略模式的缺点</h3><ul>\n<li>策略类会逐渐增多(超过四个考虑使用混合模式)</li>\n<li>策略类必须向外暴露(违反迪米特法则) — 上层模块必须知道哪些策略，才能使用哪些策略，可用工厂方法模式修正</li>\n</ul>\n<h3 id=\"策略模式的具体应用\"><a href=\"#策略模式的具体应用\" class=\"headerlink\" title=\"策略模式的具体应用\"></a>策略模式的具体应用</h3><ul>\n<li>Shiro权限控制框架有三种验证策略</li>\n</ul>\n"},{"title":"责任链模式","date":"2019-04-13T04:36:10.000Z","_content":"\n### 一个故事\n> 小张需要申请一台显示器，需要在公司内部系统提交审核清单。审核清单的审批流程要经过直属领导、部门领导、资源部领导几个环节审批，其中任何一个环节审核不通过，显示器就申请不下来。\n\n### 责任链模式来模拟审批流程\n\n审批流程就像一个链条一样，一级一级审批，直到最后资源部领导核查通过，小张就能拿到想要的显示器了\n\n#### 代码案例\n```java\npublic abstract class VerifyHandler {\n    private VerifyHandler nextVerify;\n\n    public void setNextVerify(VerifyHandler nextVerify){\n        this.nextVerify = nextVerify;\n    }\n\n    public abstract void examine(Request request);\n\n    public void nextVerify(Request request){\n        if(nextVerify != null){\n            this.nextVerify.examine(request);\n        }\n    }\n}\n```\n\n```java\npublic class TeamLeaderVerifyHandler extends VerifyHandler{\n\n    @Override\n    public void examine(Request request) {\n        System.out.println(request.getRequest());\n\n        System.out.println(\"直属领导审批通过\");\n\n        nextVerify(request);\n    }\n}\n```\n\n```java\npublic class ApartmentVerifyHandler extends VerifyHandler{\n    @Override\n    public void examine(Request request) {\n        System.out.println(\"部门领导审批通过\");\n\n        nextVerify(request);\n    }\n}\n```\n\n```java\npublic class ResourceVerifyHandler extends VerifyHandler{\n    @Override\n    public void examine(Request request) {\n        System.out.println(\"资源部领导审批通过\");\n        System.out.println(\"发放显示器\");\n    }\n}\n```\n```java\npublic class Request {\n    private String request;\n\n    public String getRequest() {\n        return request;\n    }\n\n    public void setRequest(String request) {\n        this.request = request;\n    }\n\n    public Request(String request){\n        this.request = request;\n    }\n}\n```\n\n```java\npublic class Client {\n    public static void main(String[] args) {\n        TeamLeaderVerifyHandler teamLeaderVerifyHandler = new TeamLeaderVerifyHandler();\n        ApartmentVerifyHandler apartmentVerifyHandler = new ApartmentVerifyHandler();\n        ResourceVerifyHandler resourceVerifyHandler = new ResourceVerifyHandler();\n\n        teamLeaderVerifyHandler.setNextVerify(apartmentVerifyHandler);\n        apartmentVerifyHandler.setNextVerify(resourceVerifyHandler);\n\n        Request request = new Request(\"申请一条显示器\");\n        teamLeaderVerifyHandler.examine(request);\n    }\n}\n```\n\n### 如何理解责任链模式\n\n> 使多个对象都有机会处理请求，从未避免了发送者与接收者之间的耦合关系，将这些对象连成一个链条，沿着链条传递请求。其结构和链表是类似的。\n\n当有审批流程进入时，先经过直属领导审批，待直属领导审批通过后，再把审批请求传递给部门领导，部门领导审批过后再传递给资源部领导，由此类推，形成一个链条，链条上的每个对象的职责各不相同。\n\n### 责任链模式模型抽象\n\n类图（TODO）\n\n### 责任链模式的应用\n\n+ 过滤器\n+ 拦截器\n\n### 责任链模式的优点\n+ 请求者与接收者之间解耦\n+ 符合开闭原则，易于扩展\n\n### 责任链模式的缺点\n+ 性能问题。链表较长的时候会有性能问题（应该设置节点阈值）\n+ 调试逻辑比较复杂（调用者不知道被哪些接受者调用）\n\n\n\n\n\n\n","source":"_posts/责任链模式.md","raw":"---\ntitle: 责任链模式\ndate: 2019-04-13 12:36:10\ntags: Design\ncategories: 设计模式\n---\n\n### 一个故事\n> 小张需要申请一台显示器，需要在公司内部系统提交审核清单。审核清单的审批流程要经过直属领导、部门领导、资源部领导几个环节审批，其中任何一个环节审核不通过，显示器就申请不下来。\n\n### 责任链模式来模拟审批流程\n\n审批流程就像一个链条一样，一级一级审批，直到最后资源部领导核查通过，小张就能拿到想要的显示器了\n\n#### 代码案例\n```java\npublic abstract class VerifyHandler {\n    private VerifyHandler nextVerify;\n\n    public void setNextVerify(VerifyHandler nextVerify){\n        this.nextVerify = nextVerify;\n    }\n\n    public abstract void examine(Request request);\n\n    public void nextVerify(Request request){\n        if(nextVerify != null){\n            this.nextVerify.examine(request);\n        }\n    }\n}\n```\n\n```java\npublic class TeamLeaderVerifyHandler extends VerifyHandler{\n\n    @Override\n    public void examine(Request request) {\n        System.out.println(request.getRequest());\n\n        System.out.println(\"直属领导审批通过\");\n\n        nextVerify(request);\n    }\n}\n```\n\n```java\npublic class ApartmentVerifyHandler extends VerifyHandler{\n    @Override\n    public void examine(Request request) {\n        System.out.println(\"部门领导审批通过\");\n\n        nextVerify(request);\n    }\n}\n```\n\n```java\npublic class ResourceVerifyHandler extends VerifyHandler{\n    @Override\n    public void examine(Request request) {\n        System.out.println(\"资源部领导审批通过\");\n        System.out.println(\"发放显示器\");\n    }\n}\n```\n```java\npublic class Request {\n    private String request;\n\n    public String getRequest() {\n        return request;\n    }\n\n    public void setRequest(String request) {\n        this.request = request;\n    }\n\n    public Request(String request){\n        this.request = request;\n    }\n}\n```\n\n```java\npublic class Client {\n    public static void main(String[] args) {\n        TeamLeaderVerifyHandler teamLeaderVerifyHandler = new TeamLeaderVerifyHandler();\n        ApartmentVerifyHandler apartmentVerifyHandler = new ApartmentVerifyHandler();\n        ResourceVerifyHandler resourceVerifyHandler = new ResourceVerifyHandler();\n\n        teamLeaderVerifyHandler.setNextVerify(apartmentVerifyHandler);\n        apartmentVerifyHandler.setNextVerify(resourceVerifyHandler);\n\n        Request request = new Request(\"申请一条显示器\");\n        teamLeaderVerifyHandler.examine(request);\n    }\n}\n```\n\n### 如何理解责任链模式\n\n> 使多个对象都有机会处理请求，从未避免了发送者与接收者之间的耦合关系，将这些对象连成一个链条，沿着链条传递请求。其结构和链表是类似的。\n\n当有审批流程进入时，先经过直属领导审批，待直属领导审批通过后，再把审批请求传递给部门领导，部门领导审批过后再传递给资源部领导，由此类推，形成一个链条，链条上的每个对象的职责各不相同。\n\n### 责任链模式模型抽象\n\n类图（TODO）\n\n### 责任链模式的应用\n\n+ 过滤器\n+ 拦截器\n\n### 责任链模式的优点\n+ 请求者与接收者之间解耦\n+ 符合开闭原则，易于扩展\n\n### 责任链模式的缺点\n+ 性能问题。链表较长的时候会有性能问题（应该设置节点阈值）\n+ 调试逻辑比较复杂（调用者不知道被哪些接受者调用）\n\n\n\n\n\n\n","slug":"责任链模式","published":1,"updated":"2019-04-14T11:54:33.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjpc000ww3s6944b9uz3","content":"<h3 id=\"一个故事\"><a href=\"#一个故事\" class=\"headerlink\" title=\"一个故事\"></a>一个故事</h3><blockquote>\n<p>小张需要申请一台显示器，需要在公司内部系统提交审核清单。审核清单的审批流程要经过直属领导、部门领导、资源部领导几个环节审批，其中任何一个环节审核不通过，显示器就申请不下来。</p>\n</blockquote>\n<h3 id=\"责任链模式来模拟审批流程\"><a href=\"#责任链模式来模拟审批流程\" class=\"headerlink\" title=\"责任链模式来模拟审批流程\"></a>责任链模式来模拟审批流程</h3><p>审批流程就像一个链条一样，一级一级审批，直到最后资源部领导核查通过，小张就能拿到想要的显示器了</p>\n<h4 id=\"代码案例\"><a href=\"#代码案例\" class=\"headerlink\" title=\"代码案例\"></a>代码案例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VerifyHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> VerifyHandler nextVerify;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNextVerify</span><span class=\"params\">(VerifyHandler nextVerify)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextVerify = nextVerify;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">examine</span><span class=\"params\">(Request request)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">nextVerify</span><span class=\"params\">(Request request)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nextVerify != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.nextVerify.examine(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TeamLeaderVerifyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">VerifyHandler</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">examine</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(request.getRequest());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"直属领导审批通过\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        nextVerify(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApartmentVerifyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">VerifyHandler</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">examine</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"部门领导审批通过\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        nextVerify(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceVerifyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">VerifyHandler</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">examine</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"资源部领导审批通过\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"发放显示器\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String request;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getRequest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRequest</span><span class=\"params\">(String request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.request = request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Request</span><span class=\"params\">(String request)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.request = request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TeamLeaderVerifyHandler teamLeaderVerifyHandler = <span class=\"keyword\">new</span> TeamLeaderVerifyHandler();</span><br><span class=\"line\">        ApartmentVerifyHandler apartmentVerifyHandler = <span class=\"keyword\">new</span> ApartmentVerifyHandler();</span><br><span class=\"line\">        ResourceVerifyHandler resourceVerifyHandler = <span class=\"keyword\">new</span> ResourceVerifyHandler();</span><br><span class=\"line\"></span><br><span class=\"line\">        teamLeaderVerifyHandler.setNextVerify(apartmentVerifyHandler);</span><br><span class=\"line\">        apartmentVerifyHandler.setNextVerify(resourceVerifyHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">        Request request = <span class=\"keyword\">new</span> Request(<span class=\"string\">\"申请一条显示器\"</span>);</span><br><span class=\"line\">        teamLeaderVerifyHandler.examine(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何理解责任链模式\"><a href=\"#如何理解责任链模式\" class=\"headerlink\" title=\"如何理解责任链模式\"></a>如何理解责任链模式</h3><blockquote>\n<p>使多个对象都有机会处理请求，从未避免了发送者与接收者之间的耦合关系，将这些对象连成一个链条，沿着链条传递请求。其结构和链表是类似的。</p>\n</blockquote>\n<p>当有审批流程进入时，先经过直属领导审批，待直属领导审批通过后，再把审批请求传递给部门领导，部门领导审批过后再传递给资源部领导，由此类推，形成一个链条，链条上的每个对象的职责各不相同。</p>\n<h3 id=\"责任链模式模型抽象\"><a href=\"#责任链模式模型抽象\" class=\"headerlink\" title=\"责任链模式模型抽象\"></a>责任链模式模型抽象</h3><p>类图（TODO）</p>\n<h3 id=\"责任链模式的应用\"><a href=\"#责任链模式的应用\" class=\"headerlink\" title=\"责任链模式的应用\"></a>责任链模式的应用</h3><ul>\n<li>过滤器</li>\n<li>拦截器</li>\n</ul>\n<h3 id=\"责任链模式的优点\"><a href=\"#责任链模式的优点\" class=\"headerlink\" title=\"责任链模式的优点\"></a>责任链模式的优点</h3><ul>\n<li>请求者与接收者之间解耦</li>\n<li>符合开闭原则，易于扩展</li>\n</ul>\n<h3 id=\"责任链模式的缺点\"><a href=\"#责任链模式的缺点\" class=\"headerlink\" title=\"责任链模式的缺点\"></a>责任链模式的缺点</h3><ul>\n<li>性能问题。链表较长的时候会有性能问题（应该设置节点阈值）</li>\n<li>调试逻辑比较复杂（调用者不知道被哪些接受者调用）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一个故事\"><a href=\"#一个故事\" class=\"headerlink\" title=\"一个故事\"></a>一个故事</h3><blockquote>\n<p>小张需要申请一台显示器，需要在公司内部系统提交审核清单。审核清单的审批流程要经过直属领导、部门领导、资源部领导几个环节审批，其中任何一个环节审核不通过，显示器就申请不下来。</p>\n</blockquote>\n<h3 id=\"责任链模式来模拟审批流程\"><a href=\"#责任链模式来模拟审批流程\" class=\"headerlink\" title=\"责任链模式来模拟审批流程\"></a>责任链模式来模拟审批流程</h3><p>审批流程就像一个链条一样，一级一级审批，直到最后资源部领导核查通过，小张就能拿到想要的显示器了</p>\n<h4 id=\"代码案例\"><a href=\"#代码案例\" class=\"headerlink\" title=\"代码案例\"></a>代码案例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VerifyHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> VerifyHandler nextVerify;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNextVerify</span><span class=\"params\">(VerifyHandler nextVerify)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextVerify = nextVerify;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">examine</span><span class=\"params\">(Request request)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">nextVerify</span><span class=\"params\">(Request request)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nextVerify != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.nextVerify.examine(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TeamLeaderVerifyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">VerifyHandler</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">examine</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(request.getRequest());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"直属领导审批通过\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        nextVerify(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApartmentVerifyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">VerifyHandler</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">examine</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"部门领导审批通过\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        nextVerify(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceVerifyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">VerifyHandler</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">examine</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"资源部领导审批通过\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"发放显示器\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String request;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getRequest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRequest</span><span class=\"params\">(String request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.request = request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Request</span><span class=\"params\">(String request)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.request = request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TeamLeaderVerifyHandler teamLeaderVerifyHandler = <span class=\"keyword\">new</span> TeamLeaderVerifyHandler();</span><br><span class=\"line\">        ApartmentVerifyHandler apartmentVerifyHandler = <span class=\"keyword\">new</span> ApartmentVerifyHandler();</span><br><span class=\"line\">        ResourceVerifyHandler resourceVerifyHandler = <span class=\"keyword\">new</span> ResourceVerifyHandler();</span><br><span class=\"line\"></span><br><span class=\"line\">        teamLeaderVerifyHandler.setNextVerify(apartmentVerifyHandler);</span><br><span class=\"line\">        apartmentVerifyHandler.setNextVerify(resourceVerifyHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">        Request request = <span class=\"keyword\">new</span> Request(<span class=\"string\">\"申请一条显示器\"</span>);</span><br><span class=\"line\">        teamLeaderVerifyHandler.examine(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何理解责任链模式\"><a href=\"#如何理解责任链模式\" class=\"headerlink\" title=\"如何理解责任链模式\"></a>如何理解责任链模式</h3><blockquote>\n<p>使多个对象都有机会处理请求，从未避免了发送者与接收者之间的耦合关系，将这些对象连成一个链条，沿着链条传递请求。其结构和链表是类似的。</p>\n</blockquote>\n<p>当有审批流程进入时，先经过直属领导审批，待直属领导审批通过后，再把审批请求传递给部门领导，部门领导审批过后再传递给资源部领导，由此类推，形成一个链条，链条上的每个对象的职责各不相同。</p>\n<h3 id=\"责任链模式模型抽象\"><a href=\"#责任链模式模型抽象\" class=\"headerlink\" title=\"责任链模式模型抽象\"></a>责任链模式模型抽象</h3><p>类图（TODO）</p>\n<h3 id=\"责任链模式的应用\"><a href=\"#责任链模式的应用\" class=\"headerlink\" title=\"责任链模式的应用\"></a>责任链模式的应用</h3><ul>\n<li>过滤器</li>\n<li>拦截器</li>\n</ul>\n<h3 id=\"责任链模式的优点\"><a href=\"#责任链模式的优点\" class=\"headerlink\" title=\"责任链模式的优点\"></a>责任链模式的优点</h3><ul>\n<li>请求者与接收者之间解耦</li>\n<li>符合开闭原则，易于扩展</li>\n</ul>\n<h3 id=\"责任链模式的缺点\"><a href=\"#责任链模式的缺点\" class=\"headerlink\" title=\"责任链模式的缺点\"></a>责任链模式的缺点</h3><ul>\n<li>性能问题。链表较长的时候会有性能问题（应该设置节点阈值）</li>\n<li>调试逻辑比较复杂（调用者不知道被哪些接受者调用）</li>\n</ul>\n"},{"title":"装饰器模式","date":"2019-04-13T06:55:37.000Z","_content":"\n### 一个故事\n小明今年买了一个毛坯房，计划六月份装修作为婚房使用。小明选择了自定义的装修方案。\b\b\b线槽、刷漆、家具定制、\b门窗定制都是由不同的厂家来定制安装。\n\n### 通过装饰器模式来模拟装修\n+ 毛坯房是一个被装饰的对象\n+ \b\b\b线槽、刷漆、家具定制、\b门窗定制等就是装饰对象，他们负责对毛坯房进行装饰。\n\n```java\npublic interface House {\n    void decorate();\n}\n```\n```java\npublic class RoughHouse implements House{\n    @Override\n    public void decorate() {\n        System.out.println(\"毛坯房要开始装修了\");\n    }\n}\n```\n```java\npublic abstract class HouseDecorate implements House{\n    protected House house;\n\n    public HouseDecorate(House house) {\n        this.house = house;\n    }\n}\n```\n刷漆的装饰类\n```java\npublic class BrushingHouseDecorate extends HouseDecorate{\n    public BrushingHouseDecorate(House house) {\n        super(house);\n    }\n\n    @Override\n    public void decorate() {\n        house.decorate();\n        System.out.println(\"房屋装修------刷漆\");\n    }\n}\n```\n家具定制的装饰类\n```java\npublic class CustomizedFurnitureHouseDecorate extends HouseDecorate{\n\n    public CustomizedFurnitureHouseDecorate(House house) {\n        super(house);\n    }\n\n    @Override\n    public void decorate() {\n        house.decorate();\n        System.out.println(\"房屋装修------定制家具\");\n    }\n}\n```\n\n门窗定制的装饰类\n```java\npublic class DoorWindowHouseDecorate extends HouseDecorate{\n    public DoorWindowHouseDecorate(House house) {\n        super(house);\n    }\n\n    @Override\n    public void decorate() {\n        house.decorate();\n        System.out.println(\"房屋装修------门窗定制\");\n    }\n}\n```\n线槽安装的装饰类\n```java\npublic class TrunkingHouseDecorate extends HouseDecorate{\n    public TrunkingHouseDecorate(House house) {\n        super(house);\n    }\n\n    @Override\n    public void decorate() {\n        house.decorate();\n        System.out.println(\"房屋装修------安装线槽\");\n    }\n}\n```\n客户端\n```java\npublic class Client {\n    public static void main(String[] args) {\n        House house = new RoughHouse();\n\n        house = new BrushingHouseDecorate(house);\n        house = new TrunkingHouseDecorate(house);\n        house = new CustomizedFurnitureHouseDecorate(house);\n        house = new DoorWindowHouseDecorate(house);\n\n        house.decorate();\n\n    }\n}\n```\nResult\n```\n毛坯房要开始装修了\n房屋装修------刷漆\n房屋装修------安装线槽\n房屋装修------定制家具\n房屋装修------门窗定制\n```\n\n### 如何理解装饰器模式\n> 动态的给一个对象添加额外的职责。提供了比集成更有弹性的替代方案\n\n+ 装饰器\n刷漆装修、安装线槽、定制家具、门窗定制都是属于装饰器。当我们居住一段时间后，想把厕所改造一下，我们只需要再构造一个装饰器，对房屋就是包装装饰就完成了工作，而不需要做过多的改变。\n+ 被装饰对象\n毛坯房就是属于被装饰对象\n\n#### 特点\n+ 装饰器与被装饰对象实现同一个接口\n+ 装饰器持有被装饰对象的引用\n+ 可以随意添加装饰器\n\n看到装饰器模式的前两个特点，我们是不是有种似曾相识的感觉，这不是静态代理的特点吗？装饰器就好比代理类，他持有被代理对象（被装饰对象）的引用，去做被代理对象能做但是不想做的事情。\n\n### 装饰器模式与静态代理\n1. 静态代理\n想做但不能做，需要找一个能干的人帮我做\n2. 装饰器模式\n我想做，但不能做，需要找各具特色的人来帮我做\n\n#### 用一个例子来说明\n\n这是一个代理类的实现\n```java\npublic class Proxy implements Subject{\n    private Subject subject;\n\n    public Proxy(Subject subject){\n        this.subject = subject;\n    }\n\n    @Override\n    public void request() {\n        this.before();\n        subject.request();\n        this.after();\n    }\n\n    private void before(){\n        System.out.println(\"前置处理。。。。\");\n    }\n\n    private void after(){\n        System.out.println(\"后置处理。。。。\");\n    }\n}\n```\n如果我们想给主题添加一点操作日志，最简单的方法就是添加一个log();\n```java\nprivate void log(){\n    System.out.println(\"添加日志\");\n}\n```\n\n对于需求，我们是不可控的，未来需求不断的增长，代理类会越来越大，难以维护，而且也不符合开闭原则。\n\n#### 如何应用\n+ 装饰器模式与静态代理模式都是包装模式，为其添加特定的功能\n+ 功能单一，可以选择代理模式\n+ 功能较多其需要动态扩张海燕，可以选择装饰器模式\n\n### 装饰器模式应用场景\n\n* Java IO流\n```java\nDataInputStream in = new DataInputStream(new FileInputStream(\"test.txt\"));\n        String str;\n        while ((str = in.readLine())!=null){\n            System.out.println(str);\n        }\n        in.close();\n```\n查看DataInputStream源码\n```java\npublic\nclass DataInputStream extends FilterInputStream implements DataInput {\n\n    /**\n     * Creates a DataInputStream that uses the specified\n     * underlying InputStream.\n     *\n     * @param  in   the specified input stream\n     */\n    public DataInputStream(InputStream in) {\n        super(in);\n    }\n    ......\n}    \n```\n```java\npublic\nclass FilterInputStream extends InputStream {\n    /**\n     * The input stream to be filtered.\n     */\n    protected volatile InputStream in;\n\n    /**\n     * Creates a <code>FilterInputStream</code>\n     * by assigning the  argument <code>in</code>\n     * to the field <code>this.in</code> so as\n     * to remember it for later use.\n     *\n     * @param   in   the underlying input stream, or <code>null</code> if\n     *          this instance is to be created without an underlying stream.\n     */\n    protected FilterInputStream(InputStream in) {\n        this.in = in;\n    }\n\n    ...\n}\n```\n通过源代码可以看出\n+ 装饰器\nFilterInputStream及其子类（DataInputstream）\n+ 被装饰对象\nInputStream\n\n由此可以设计出很多具有不同的特性的IO流。\n\n\n### 装饰器模式的优点\n+ 扩展方式了灵活\n+ 每个装饰器互相独立不受影响\n+ 装饰模式是继承的替代方案，能够解决类膨胀的问题，继承是静态增加功能，装饰模式是动态增加功能。不管装饰多少层，返回的还是父类，实现的是is-a的关系。如果需要去掉某个功能，装饰模式去掉封装就可以了，但是继承就必须修改代码。\n+ \n+ 动态扩展装饰器类\n\n### 装饰器模式的缺点\n+ 多层装饰比较复杂(类似剥洋葱)\n\n\n\n\n","source":"_posts/装饰器模式.md","raw":"---\ntitle: 装饰器模式\ndate: 2019-04-13 14:55:37\ntags: Design\ncategories: 设计模式\n---\n\n### 一个故事\n小明今年买了一个毛坯房，计划六月份装修作为婚房使用。小明选择了自定义的装修方案。\b\b\b线槽、刷漆、家具定制、\b门窗定制都是由不同的厂家来定制安装。\n\n### 通过装饰器模式来模拟装修\n+ 毛坯房是一个被装饰的对象\n+ \b\b\b线槽、刷漆、家具定制、\b门窗定制等就是装饰对象，他们负责对毛坯房进行装饰。\n\n```java\npublic interface House {\n    void decorate();\n}\n```\n```java\npublic class RoughHouse implements House{\n    @Override\n    public void decorate() {\n        System.out.println(\"毛坯房要开始装修了\");\n    }\n}\n```\n```java\npublic abstract class HouseDecorate implements House{\n    protected House house;\n\n    public HouseDecorate(House house) {\n        this.house = house;\n    }\n}\n```\n刷漆的装饰类\n```java\npublic class BrushingHouseDecorate extends HouseDecorate{\n    public BrushingHouseDecorate(House house) {\n        super(house);\n    }\n\n    @Override\n    public void decorate() {\n        house.decorate();\n        System.out.println(\"房屋装修------刷漆\");\n    }\n}\n```\n家具定制的装饰类\n```java\npublic class CustomizedFurnitureHouseDecorate extends HouseDecorate{\n\n    public CustomizedFurnitureHouseDecorate(House house) {\n        super(house);\n    }\n\n    @Override\n    public void decorate() {\n        house.decorate();\n        System.out.println(\"房屋装修------定制家具\");\n    }\n}\n```\n\n门窗定制的装饰类\n```java\npublic class DoorWindowHouseDecorate extends HouseDecorate{\n    public DoorWindowHouseDecorate(House house) {\n        super(house);\n    }\n\n    @Override\n    public void decorate() {\n        house.decorate();\n        System.out.println(\"房屋装修------门窗定制\");\n    }\n}\n```\n线槽安装的装饰类\n```java\npublic class TrunkingHouseDecorate extends HouseDecorate{\n    public TrunkingHouseDecorate(House house) {\n        super(house);\n    }\n\n    @Override\n    public void decorate() {\n        house.decorate();\n        System.out.println(\"房屋装修------安装线槽\");\n    }\n}\n```\n客户端\n```java\npublic class Client {\n    public static void main(String[] args) {\n        House house = new RoughHouse();\n\n        house = new BrushingHouseDecorate(house);\n        house = new TrunkingHouseDecorate(house);\n        house = new CustomizedFurnitureHouseDecorate(house);\n        house = new DoorWindowHouseDecorate(house);\n\n        house.decorate();\n\n    }\n}\n```\nResult\n```\n毛坯房要开始装修了\n房屋装修------刷漆\n房屋装修------安装线槽\n房屋装修------定制家具\n房屋装修------门窗定制\n```\n\n### 如何理解装饰器模式\n> 动态的给一个对象添加额外的职责。提供了比集成更有弹性的替代方案\n\n+ 装饰器\n刷漆装修、安装线槽、定制家具、门窗定制都是属于装饰器。当我们居住一段时间后，想把厕所改造一下，我们只需要再构造一个装饰器，对房屋就是包装装饰就完成了工作，而不需要做过多的改变。\n+ 被装饰对象\n毛坯房就是属于被装饰对象\n\n#### 特点\n+ 装饰器与被装饰对象实现同一个接口\n+ 装饰器持有被装饰对象的引用\n+ 可以随意添加装饰器\n\n看到装饰器模式的前两个特点，我们是不是有种似曾相识的感觉，这不是静态代理的特点吗？装饰器就好比代理类，他持有被代理对象（被装饰对象）的引用，去做被代理对象能做但是不想做的事情。\n\n### 装饰器模式与静态代理\n1. 静态代理\n想做但不能做，需要找一个能干的人帮我做\n2. 装饰器模式\n我想做，但不能做，需要找各具特色的人来帮我做\n\n#### 用一个例子来说明\n\n这是一个代理类的实现\n```java\npublic class Proxy implements Subject{\n    private Subject subject;\n\n    public Proxy(Subject subject){\n        this.subject = subject;\n    }\n\n    @Override\n    public void request() {\n        this.before();\n        subject.request();\n        this.after();\n    }\n\n    private void before(){\n        System.out.println(\"前置处理。。。。\");\n    }\n\n    private void after(){\n        System.out.println(\"后置处理。。。。\");\n    }\n}\n```\n如果我们想给主题添加一点操作日志，最简单的方法就是添加一个log();\n```java\nprivate void log(){\n    System.out.println(\"添加日志\");\n}\n```\n\n对于需求，我们是不可控的，未来需求不断的增长，代理类会越来越大，难以维护，而且也不符合开闭原则。\n\n#### 如何应用\n+ 装饰器模式与静态代理模式都是包装模式，为其添加特定的功能\n+ 功能单一，可以选择代理模式\n+ 功能较多其需要动态扩张海燕，可以选择装饰器模式\n\n### 装饰器模式应用场景\n\n* Java IO流\n```java\nDataInputStream in = new DataInputStream(new FileInputStream(\"test.txt\"));\n        String str;\n        while ((str = in.readLine())!=null){\n            System.out.println(str);\n        }\n        in.close();\n```\n查看DataInputStream源码\n```java\npublic\nclass DataInputStream extends FilterInputStream implements DataInput {\n\n    /**\n     * Creates a DataInputStream that uses the specified\n     * underlying InputStream.\n     *\n     * @param  in   the specified input stream\n     */\n    public DataInputStream(InputStream in) {\n        super(in);\n    }\n    ......\n}    \n```\n```java\npublic\nclass FilterInputStream extends InputStream {\n    /**\n     * The input stream to be filtered.\n     */\n    protected volatile InputStream in;\n\n    /**\n     * Creates a <code>FilterInputStream</code>\n     * by assigning the  argument <code>in</code>\n     * to the field <code>this.in</code> so as\n     * to remember it for later use.\n     *\n     * @param   in   the underlying input stream, or <code>null</code> if\n     *          this instance is to be created without an underlying stream.\n     */\n    protected FilterInputStream(InputStream in) {\n        this.in = in;\n    }\n\n    ...\n}\n```\n通过源代码可以看出\n+ 装饰器\nFilterInputStream及其子类（DataInputstream）\n+ 被装饰对象\nInputStream\n\n由此可以设计出很多具有不同的特性的IO流。\n\n\n### 装饰器模式的优点\n+ 扩展方式了灵活\n+ 每个装饰器互相独立不受影响\n+ 装饰模式是继承的替代方案，能够解决类膨胀的问题，继承是静态增加功能，装饰模式是动态增加功能。不管装饰多少层，返回的还是父类，实现的是is-a的关系。如果需要去掉某个功能，装饰模式去掉封装就可以了，但是继承就必须修改代码。\n+ \n+ 动态扩展装饰器类\n\n### 装饰器模式的缺点\n+ 多层装饰比较复杂(类似剥洋葱)\n\n\n\n\n","slug":"装饰器模式","published":1,"updated":"2019-04-14T11:54:07.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjpe000zw3s68nwypq8s","content":"<h3 id=\"一个故事\"><a href=\"#一个故事\" class=\"headerlink\" title=\"一个故事\"></a>一个故事</h3><p>小明今年买了一个毛坯房，计划六月份装修作为婚房使用。小明选择了自定义的装修方案。\b\b\b线槽、刷漆、家具定制、\b门窗定制都是由不同的厂家来定制安装。</p>\n<h3 id=\"通过装饰器模式来模拟装修\"><a href=\"#通过装饰器模式来模拟装修\" class=\"headerlink\" title=\"通过装饰器模式来模拟装修\"></a>通过装饰器模式来模拟装修</h3><ul>\n<li>毛坯房是一个被装饰的对象</li>\n<li>\b\b\b线槽、刷漆、家具定制、\b门窗定制等就是装饰对象，他们负责对毛坯房进行装饰。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">House</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decorate</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoughHouse</span> <span class=\"keyword\">implements</span> <span class=\"title\">House</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decorate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"毛坯房要开始装修了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HouseDecorate</span> <span class=\"keyword\">implements</span> <span class=\"title\">House</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> House house;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HouseDecorate</span><span class=\"params\">(House house)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.house = house;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>刷漆的装饰类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BrushingHouseDecorate</span> <span class=\"keyword\">extends</span> <span class=\"title\">HouseDecorate</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BrushingHouseDecorate</span><span class=\"params\">(House house)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(house);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decorate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        house.decorate();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"房屋装修------刷漆\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>家具定制的装饰类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomizedFurnitureHouseDecorate</span> <span class=\"keyword\">extends</span> <span class=\"title\">HouseDecorate</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomizedFurnitureHouseDecorate</span><span class=\"params\">(House house)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(house);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decorate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        house.decorate();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"房屋装修------定制家具\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>门窗定制的装饰类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoorWindowHouseDecorate</span> <span class=\"keyword\">extends</span> <span class=\"title\">HouseDecorate</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DoorWindowHouseDecorate</span><span class=\"params\">(House house)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(house);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decorate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        house.decorate();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"房屋装修------门窗定制\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>线槽安装的装饰类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrunkingHouseDecorate</span> <span class=\"keyword\">extends</span> <span class=\"title\">HouseDecorate</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TrunkingHouseDecorate</span><span class=\"params\">(House house)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(house);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decorate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        house.decorate();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"房屋装修------安装线槽\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>客户端<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        House house = <span class=\"keyword\">new</span> RoughHouse();</span><br><span class=\"line\"></span><br><span class=\"line\">        house = <span class=\"keyword\">new</span> BrushingHouseDecorate(house);</span><br><span class=\"line\">        house = <span class=\"keyword\">new</span> TrunkingHouseDecorate(house);</span><br><span class=\"line\">        house = <span class=\"keyword\">new</span> CustomizedFurnitureHouseDecorate(house);</span><br><span class=\"line\">        house = <span class=\"keyword\">new</span> DoorWindowHouseDecorate(house);</span><br><span class=\"line\"></span><br><span class=\"line\">        house.decorate();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Result<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">毛坯房要开始装修了</span><br><span class=\"line\">房屋装修------刷漆</span><br><span class=\"line\">房屋装修------安装线槽</span><br><span class=\"line\">房屋装修------定制家具</span><br><span class=\"line\">房屋装修------门窗定制</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"如何理解装饰器模式\"><a href=\"#如何理解装饰器模式\" class=\"headerlink\" title=\"如何理解装饰器模式\"></a>如何理解装饰器模式</h3><blockquote>\n<p>动态的给一个对象添加额外的职责。提供了比集成更有弹性的替代方案</p>\n</blockquote>\n<ul>\n<li>装饰器<br>刷漆装修、安装线槽、定制家具、门窗定制都是属于装饰器。当我们居住一段时间后，想把厕所改造一下，我们只需要再构造一个装饰器，对房屋就是包装装饰就完成了工作，而不需要做过多的改变。</li>\n<li>被装饰对象<br>毛坯房就是属于被装饰对象</li>\n</ul>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>装饰器与被装饰对象实现同一个接口</li>\n<li>装饰器持有被装饰对象的引用</li>\n<li>可以随意添加装饰器</li>\n</ul>\n<p>看到装饰器模式的前两个特点，我们是不是有种似曾相识的感觉，这不是静态代理的特点吗？装饰器就好比代理类，他持有被代理对象（被装饰对象）的引用，去做被代理对象能做但是不想做的事情。</p>\n<h3 id=\"装饰器模式与静态代理\"><a href=\"#装饰器模式与静态代理\" class=\"headerlink\" title=\"装饰器模式与静态代理\"></a>装饰器模式与静态代理</h3><ol>\n<li>静态代理<br>想做但不能做，需要找一个能干的人帮我做</li>\n<li>装饰器模式<br>我想做，但不能做，需要找各具特色的人来帮我做</li>\n</ol>\n<h4 id=\"用一个例子来说明\"><a href=\"#用一个例子来说明\" class=\"headerlink\" title=\"用一个例子来说明\"></a>用一个例子来说明</h4><p>这是一个代理类的实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Subject subject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">(Subject subject)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subject = subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.before();</span><br><span class=\"line\">        subject.request();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"前置处理。。。。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"后置处理。。。。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果我们想给主题添加一点操作日志，最简单的方法就是添加一个log();<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"添加日志\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于需求，我们是不可控的，未来需求不断的增长，代理类会越来越大，难以维护，而且也不符合开闭原则。</p>\n<h4 id=\"如何应用\"><a href=\"#如何应用\" class=\"headerlink\" title=\"如何应用\"></a>如何应用</h4><ul>\n<li>装饰器模式与静态代理模式都是包装模式，为其添加特定的功能</li>\n<li>功能单一，可以选择代理模式</li>\n<li>功能较多其需要动态扩张海燕，可以选择装饰器模式</li>\n</ul>\n<h3 id=\"装饰器模式应用场景\"><a href=\"#装饰器模式应用场景\" class=\"headerlink\" title=\"装饰器模式应用场景\"></a>装饰器模式应用场景</h3><ul>\n<li>Java IO流<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DataInputStream in = <span class=\"keyword\">new</span> DataInputStream(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"test.txt\"</span>));</span><br><span class=\"line\">        String str;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((str = in.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        in.close();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>查看DataInputStream源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataInputStream</span> <span class=\"keyword\">extends</span> <span class=\"title\">FilterInputStream</span> <span class=\"keyword\">implements</span> <span class=\"title\">DataInput</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a DataInputStream that uses the specified</span></span><br><span class=\"line\"><span class=\"comment\">     * underlying InputStream.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  in   the specified input stream</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DataInputStream</span><span class=\"params\">(InputStream in)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(in);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FilterInputStream</span> <span class=\"keyword\">extends</span> <span class=\"title\">InputStream</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The input stream to be filtered.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">volatile</span> InputStream in;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a &lt;code&gt;FilterInputStream&lt;/code&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * by assigning the  argument &lt;code&gt;in&lt;/code&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * to the field &lt;code&gt;this.in&lt;/code&gt; so as</span></span><br><span class=\"line\"><span class=\"comment\">     * to remember it for later use.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>   in   the underlying input stream, or &lt;code&gt;null&lt;/code&gt; if</span></span><br><span class=\"line\"><span class=\"comment\">     *          this instance is to be created without an underlying stream.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">FilterInputStream</span><span class=\"params\">(InputStream in)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.in = in;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过源代码可以看出</p>\n<ul>\n<li>装饰器<br>FilterInputStream及其子类（DataInputstream）</li>\n<li>被装饰对象<br>InputStream</li>\n</ul>\n<p>由此可以设计出很多具有不同的特性的IO流。</p>\n<h3 id=\"装饰器模式的优点\"><a href=\"#装饰器模式的优点\" class=\"headerlink\" title=\"装饰器模式的优点\"></a>装饰器模式的优点</h3><ul>\n<li>扩展方式了灵活</li>\n<li>每个装饰器互相独立不受影响</li>\n<li>装饰模式是继承的替代方案，能够解决类膨胀的问题，继承是静态增加功能，装饰模式是动态增加功能。不管装饰多少层，返回的还是父类，实现的是is-a的关系。如果需要去掉某个功能，装饰模式去掉封装就可以了，但是继承就必须修改代码。</li>\n<li></li>\n<li>动态扩展装饰器类</li>\n</ul>\n<h3 id=\"装饰器模式的缺点\"><a href=\"#装饰器模式的缺点\" class=\"headerlink\" title=\"装饰器模式的缺点\"></a>装饰器模式的缺点</h3><ul>\n<li>多层装饰比较复杂(类似剥洋葱)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一个故事\"><a href=\"#一个故事\" class=\"headerlink\" title=\"一个故事\"></a>一个故事</h3><p>小明今年买了一个毛坯房，计划六月份装修作为婚房使用。小明选择了自定义的装修方案。\b\b\b线槽、刷漆、家具定制、\b门窗定制都是由不同的厂家来定制安装。</p>\n<h3 id=\"通过装饰器模式来模拟装修\"><a href=\"#通过装饰器模式来模拟装修\" class=\"headerlink\" title=\"通过装饰器模式来模拟装修\"></a>通过装饰器模式来模拟装修</h3><ul>\n<li>毛坯房是一个被装饰的对象</li>\n<li>\b\b\b线槽、刷漆、家具定制、\b门窗定制等就是装饰对象，他们负责对毛坯房进行装饰。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">House</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decorate</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoughHouse</span> <span class=\"keyword\">implements</span> <span class=\"title\">House</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decorate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"毛坯房要开始装修了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HouseDecorate</span> <span class=\"keyword\">implements</span> <span class=\"title\">House</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> House house;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HouseDecorate</span><span class=\"params\">(House house)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.house = house;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>刷漆的装饰类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BrushingHouseDecorate</span> <span class=\"keyword\">extends</span> <span class=\"title\">HouseDecorate</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BrushingHouseDecorate</span><span class=\"params\">(House house)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(house);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decorate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        house.decorate();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"房屋装修------刷漆\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>家具定制的装饰类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomizedFurnitureHouseDecorate</span> <span class=\"keyword\">extends</span> <span class=\"title\">HouseDecorate</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomizedFurnitureHouseDecorate</span><span class=\"params\">(House house)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(house);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decorate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        house.decorate();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"房屋装修------定制家具\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>门窗定制的装饰类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoorWindowHouseDecorate</span> <span class=\"keyword\">extends</span> <span class=\"title\">HouseDecorate</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DoorWindowHouseDecorate</span><span class=\"params\">(House house)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(house);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decorate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        house.decorate();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"房屋装修------门窗定制\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>线槽安装的装饰类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrunkingHouseDecorate</span> <span class=\"keyword\">extends</span> <span class=\"title\">HouseDecorate</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TrunkingHouseDecorate</span><span class=\"params\">(House house)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(house);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decorate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        house.decorate();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"房屋装修------安装线槽\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>客户端<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        House house = <span class=\"keyword\">new</span> RoughHouse();</span><br><span class=\"line\"></span><br><span class=\"line\">        house = <span class=\"keyword\">new</span> BrushingHouseDecorate(house);</span><br><span class=\"line\">        house = <span class=\"keyword\">new</span> TrunkingHouseDecorate(house);</span><br><span class=\"line\">        house = <span class=\"keyword\">new</span> CustomizedFurnitureHouseDecorate(house);</span><br><span class=\"line\">        house = <span class=\"keyword\">new</span> DoorWindowHouseDecorate(house);</span><br><span class=\"line\"></span><br><span class=\"line\">        house.decorate();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Result<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">毛坯房要开始装修了</span><br><span class=\"line\">房屋装修------刷漆</span><br><span class=\"line\">房屋装修------安装线槽</span><br><span class=\"line\">房屋装修------定制家具</span><br><span class=\"line\">房屋装修------门窗定制</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"如何理解装饰器模式\"><a href=\"#如何理解装饰器模式\" class=\"headerlink\" title=\"如何理解装饰器模式\"></a>如何理解装饰器模式</h3><blockquote>\n<p>动态的给一个对象添加额外的职责。提供了比集成更有弹性的替代方案</p>\n</blockquote>\n<ul>\n<li>装饰器<br>刷漆装修、安装线槽、定制家具、门窗定制都是属于装饰器。当我们居住一段时间后，想把厕所改造一下，我们只需要再构造一个装饰器，对房屋就是包装装饰就完成了工作，而不需要做过多的改变。</li>\n<li>被装饰对象<br>毛坯房就是属于被装饰对象</li>\n</ul>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>装饰器与被装饰对象实现同一个接口</li>\n<li>装饰器持有被装饰对象的引用</li>\n<li>可以随意添加装饰器</li>\n</ul>\n<p>看到装饰器模式的前两个特点，我们是不是有种似曾相识的感觉，这不是静态代理的特点吗？装饰器就好比代理类，他持有被代理对象（被装饰对象）的引用，去做被代理对象能做但是不想做的事情。</p>\n<h3 id=\"装饰器模式与静态代理\"><a href=\"#装饰器模式与静态代理\" class=\"headerlink\" title=\"装饰器模式与静态代理\"></a>装饰器模式与静态代理</h3><ol>\n<li>静态代理<br>想做但不能做，需要找一个能干的人帮我做</li>\n<li>装饰器模式<br>我想做，但不能做，需要找各具特色的人来帮我做</li>\n</ol>\n<h4 id=\"用一个例子来说明\"><a href=\"#用一个例子来说明\" class=\"headerlink\" title=\"用一个例子来说明\"></a>用一个例子来说明</h4><p>这是一个代理类的实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Subject subject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">(Subject subject)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subject = subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.before();</span><br><span class=\"line\">        subject.request();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"前置处理。。。。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"后置处理。。。。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果我们想给主题添加一点操作日志，最简单的方法就是添加一个log();<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"添加日志\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于需求，我们是不可控的，未来需求不断的增长，代理类会越来越大，难以维护，而且也不符合开闭原则。</p>\n<h4 id=\"如何应用\"><a href=\"#如何应用\" class=\"headerlink\" title=\"如何应用\"></a>如何应用</h4><ul>\n<li>装饰器模式与静态代理模式都是包装模式，为其添加特定的功能</li>\n<li>功能单一，可以选择代理模式</li>\n<li>功能较多其需要动态扩张海燕，可以选择装饰器模式</li>\n</ul>\n<h3 id=\"装饰器模式应用场景\"><a href=\"#装饰器模式应用场景\" class=\"headerlink\" title=\"装饰器模式应用场景\"></a>装饰器模式应用场景</h3><ul>\n<li>Java IO流<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DataInputStream in = <span class=\"keyword\">new</span> DataInputStream(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"test.txt\"</span>));</span><br><span class=\"line\">        String str;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((str = in.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        in.close();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>查看DataInputStream源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataInputStream</span> <span class=\"keyword\">extends</span> <span class=\"title\">FilterInputStream</span> <span class=\"keyword\">implements</span> <span class=\"title\">DataInput</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a DataInputStream that uses the specified</span></span><br><span class=\"line\"><span class=\"comment\">     * underlying InputStream.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  in   the specified input stream</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DataInputStream</span><span class=\"params\">(InputStream in)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(in);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FilterInputStream</span> <span class=\"keyword\">extends</span> <span class=\"title\">InputStream</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The input stream to be filtered.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">volatile</span> InputStream in;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a &lt;code&gt;FilterInputStream&lt;/code&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * by assigning the  argument &lt;code&gt;in&lt;/code&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * to the field &lt;code&gt;this.in&lt;/code&gt; so as</span></span><br><span class=\"line\"><span class=\"comment\">     * to remember it for later use.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>   in   the underlying input stream, or &lt;code&gt;null&lt;/code&gt; if</span></span><br><span class=\"line\"><span class=\"comment\">     *          this instance is to be created without an underlying stream.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">FilterInputStream</span><span class=\"params\">(InputStream in)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.in = in;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过源代码可以看出</p>\n<ul>\n<li>装饰器<br>FilterInputStream及其子类（DataInputstream）</li>\n<li>被装饰对象<br>InputStream</li>\n</ul>\n<p>由此可以设计出很多具有不同的特性的IO流。</p>\n<h3 id=\"装饰器模式的优点\"><a href=\"#装饰器模式的优点\" class=\"headerlink\" title=\"装饰器模式的优点\"></a>装饰器模式的优点</h3><ul>\n<li>扩展方式了灵活</li>\n<li>每个装饰器互相独立不受影响</li>\n<li>装饰模式是继承的替代方案，能够解决类膨胀的问题，继承是静态增加功能，装饰模式是动态增加功能。不管装饰多少层，返回的还是父类，实现的是is-a的关系。如果需要去掉某个功能，装饰模式去掉封装就可以了，但是继承就必须修改代码。</li>\n<li></li>\n<li>动态扩展装饰器类</li>\n</ul>\n<h3 id=\"装饰器模式的缺点\"><a href=\"#装饰器模式的缺点\" class=\"headerlink\" title=\"装饰器模式的缺点\"></a>装饰器模式的缺点</h3><ul>\n<li>多层装饰比较复杂(类似剥洋葱)</li>\n</ul>\n"},{"title":"里氏替换原则","date":"2019-03-22T12:56:55.000Z","_content":"\n![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-290-thumbnail-small.jpg)\n<!-- more -->\n\n### 里氏替换原则\n\n继承作为面向对象设计的重要手段，具有以下的特点\n\n优点\n+ 代码共享，减少重复工作\n+ 提高代码复用性\n+ 子类形似于父类而区别于父类\n+ 提高代码扩展性\n\n缺点\n\n+ 代码侵入性，继承必须拥有父类的所有方法\n+ 降低代码灵活性，子类必须拥有父类的属性和方法\n+ 增强了耦合性，当父类被改变时，需要考虑到子类的修改\n\n什么叫里氏替换原则\n> 所有引用基类的地方必须能够透明的使用其子类的对象（）\n\n由此里氏替换原则是为继承定义的一个规范\n\n+ 子类必完全实现父类的方法\n+ 子类可以有自己独特的个性\n+ 覆盖或者实现父类的方法时，输入参数可以被放大\n+ 覆盖或实现父类方法时，输出结果可以被缩小\n\n\n","source":"_posts/里氏替换原则.md","raw":"---\ntitle: 里氏替换原则\ndate: 2019-03-22 20:56:55\ntags: Design\ncategories: 设计模式\n---\n\n![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-290-thumbnail-small.jpg)\n<!-- more -->\n\n### 里氏替换原则\n\n继承作为面向对象设计的重要手段，具有以下的特点\n\n优点\n+ 代码共享，减少重复工作\n+ 提高代码复用性\n+ 子类形似于父类而区别于父类\n+ 提高代码扩展性\n\n缺点\n\n+ 代码侵入性，继承必须拥有父类的所有方法\n+ 降低代码灵活性，子类必须拥有父类的属性和方法\n+ 增强了耦合性，当父类被改变时，需要考虑到子类的修改\n\n什么叫里氏替换原则\n> 所有引用基类的地方必须能够透明的使用其子类的对象（）\n\n由此里氏替换原则是为继承定义的一个规范\n\n+ 子类必完全实现父类的方法\n+ 子类可以有自己独特的个性\n+ 覆盖或者实现父类的方法时，输入参数可以被放大\n+ 覆盖或实现父类方法时，输出结果可以被缩小\n\n\n","slug":"里氏替换原则","published":1,"updated":"2019-04-14T11:46:54.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjpg0012w3s6hemiyne9","content":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-290-thumbnail-small.jpg\" alt><br><a id=\"more\"></a></p>\n<h3 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h3><p>继承作为面向对象设计的重要手段，具有以下的特点</p>\n<p>优点</p>\n<ul>\n<li>代码共享，减少重复工作</li>\n<li>提高代码复用性</li>\n<li>子类形似于父类而区别于父类</li>\n<li>提高代码扩展性</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>代码侵入性，继承必须拥有父类的所有方法</li>\n<li>降低代码灵活性，子类必须拥有父类的属性和方法</li>\n<li>增强了耦合性，当父类被改变时，需要考虑到子类的修改</li>\n</ul>\n<p>什么叫里氏替换原则</p>\n<blockquote>\n<p>所有引用基类的地方必须能够透明的使用其子类的对象（）</p>\n</blockquote>\n<p>由此里氏替换原则是为继承定义的一个规范</p>\n<ul>\n<li>子类必完全实现父类的方法</li>\n<li>子类可以有自己独特的个性</li>\n<li>覆盖或者实现父类的方法时，输入参数可以被放大</li>\n<li>覆盖或实现父类方法时，输出结果可以被缩小</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-290-thumbnail-small.jpg\" alt><br>","more":"</p>\n<h3 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h3><p>继承作为面向对象设计的重要手段，具有以下的特点</p>\n<p>优点</p>\n<ul>\n<li>代码共享，减少重复工作</li>\n<li>提高代码复用性</li>\n<li>子类形似于父类而区别于父类</li>\n<li>提高代码扩展性</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>代码侵入性，继承必须拥有父类的所有方法</li>\n<li>降低代码灵活性，子类必须拥有父类的属性和方法</li>\n<li>增强了耦合性，当父类被改变时，需要考虑到子类的修改</li>\n</ul>\n<p>什么叫里氏替换原则</p>\n<blockquote>\n<p>所有引用基类的地方必须能够透明的使用其子类的对象（）</p>\n</blockquote>\n<p>由此里氏替换原则是为继承定义的一个规范</p>\n<ul>\n<li>子类必完全实现父类的方法</li>\n<li>子类可以有自己独特的个性</li>\n<li>覆盖或者实现父类的方法时，输入参数可以被放大</li>\n<li>覆盖或实现父类方法时，输出结果可以被缩小</li>\n</ul>"},{"title":"迪米特法则|如何降低类间耦合","date":"2019-03-22T13:54:12.000Z","_content":"\n![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-271-thumbnail-small.jpg)\n<!-- more -->\n\n\n软件开发一直在推崇一个概念-低耦合、高内聚。 那什么样的代码设计才算得上低耦合、高内聚的代码。本文通过迪米特法则来讲解一下如何进行低耦合的代码设计。\n\n> 迪米特法则也叫最小知识原则（Least Knowledge Principle）,即一个类应该对自己需要耦合和调用的类保持最少的认识。也就是一个类对自己依赖的类知道的越少越好。因而迪米特法则应该遵循一下的要义\n1. 被依赖者，只应该暴露应该暴露的方法\n2. 依赖者，只依赖应该依赖的对象\n\n### 一个案例\nDavid Bock根据迪米特法则给出了一个超市购物的案例。\n三个关键信息：消费者、钱包、收银员\n定义了三个类，分别是Customer、Wallet、PaperBoy\n```java\npublic class Customer {\n    private String firstName;\n    private String lastName;\n    private Wallet myWallet;\n    public String getFirstName(){\n        return firstName;\n    }\n    public String getLastName(){\n        return lastName;\n    }\n    public Wallet getWallet(){\n        return myWallet;\n    }\n}\n```\n\n```java\npublic class Wallet {\n    private float value;\n    public float getTotalMoney() {\n        return value;\n    }\n    public void setTotalMoney(float newValue) {\n        value = newValue;\n    }\n    public void addMoney(float deposit) {\n        value += deposit;\n    }\n    public void subtractMoney(float debit) {\n        value -= debit;\n    }\n}\n\n```\n```java\npublic class Paperboy {\n    public void charge(Customer myCustomer, double payment) {\n        Wallet theWallet = myCustomer.getWallet();\n        if (theWallet.getTotalMoney() > payment) {\n            theWallet.subtractMoney(payment);\n        } else {\n            //money not enough\n        }\n    }\n}\n```\n从这三个类可以看出， PaperBoy\b承担了大多数的功能实现。PaperBoy从消费者那里拿到了钱包，核点钱包的的金钱并自己从中拿去购物的费用。paperBoy既与Customer发生直接交互，又与Wallet发生间接交互，不符合最小知识原则（迪米特法则）。案例主要存在以下问题\n\n+ Wallet暴露太多方法，其实Customer只要能够用钱包进行付钱就行了。所以这违反了迪米特法则的第一条（被依赖者，只暴露应该暴露的方法）\n+ 让PaperBoy与Wallet直接交互是错误的行为，Wallet是Customer的私有财物，ParperBoy是无权过问Wallet的情况的， 所以从职责的角度上来看，这是不符合逻辑，违反了迪米特法则的第二条（依赖者，只依赖应该依赖的对象）\n\n### 如何进行修改\n\n+ PaperBoy不再与钱包发生直接关系，直接向customer要钱\n+ 钱包只暴露付钱的方法给Customer。 方法暴露越多，后期需求变更的影响越大。\n\n```java\npublic class PaperBoy {\n    private Customer customer;\n\n    public PaperBoy(Customer customer){\n        this.customer = customer;\n    }\n\n    public void charge(float payment){\n        customer.pay(payment);\n    }\n}\n```\n\n```java\npublic class Customer {\n    private String firstName;\n    private String lastName;\n    private Wallet myWallet;\n\n    public Customer(String firstName, String lastName, Wallet myWallet) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.myWallet = myWallet;\n    }\n\n    public String getFirstName(){\n        return firstName;\n    }\n    public String getLastName(){\n        return lastName;\n    }\n\n    public void pay(float payment){\n        myWallet.pay(payment);\n    }\n}\n```\n\n```java\npublic class Wallet {\n    private float value;\n    private float getTotalMoney() {\n        return value;\n    }\n    public void setTotalMoney(float newValue) {\n        value = newValue;\n    }\n    private void addMoney(float deposit) {\n        value += deposit;\n    }\n    private void subtractMoney(float debit) {\n        value -= debit;\n    }\n\n    public void pay(float payment){\n        if(getTotalMoney()>payment){\n            subtractMoney(payment);\n        }else {\n\n        }\n    }\n}\n```\n\n迪米特法则核心观念--- 类间解耦、弱耦合\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/迪米特法则.md","raw":"---\ntitle: 迪米特法则|如何降低类间耦合\ndate: 2019-03-22 21:54:12\ntags: Design\ncategories: 设计模式\n---\n\n![](http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-271-thumbnail-small.jpg)\n<!-- more -->\n\n\n软件开发一直在推崇一个概念-低耦合、高内聚。 那什么样的代码设计才算得上低耦合、高内聚的代码。本文通过迪米特法则来讲解一下如何进行低耦合的代码设计。\n\n> 迪米特法则也叫最小知识原则（Least Knowledge Principle）,即一个类应该对自己需要耦合和调用的类保持最少的认识。也就是一个类对自己依赖的类知道的越少越好。因而迪米特法则应该遵循一下的要义\n1. 被依赖者，只应该暴露应该暴露的方法\n2. 依赖者，只依赖应该依赖的对象\n\n### 一个案例\nDavid Bock根据迪米特法则给出了一个超市购物的案例。\n三个关键信息：消费者、钱包、收银员\n定义了三个类，分别是Customer、Wallet、PaperBoy\n```java\npublic class Customer {\n    private String firstName;\n    private String lastName;\n    private Wallet myWallet;\n    public String getFirstName(){\n        return firstName;\n    }\n    public String getLastName(){\n        return lastName;\n    }\n    public Wallet getWallet(){\n        return myWallet;\n    }\n}\n```\n\n```java\npublic class Wallet {\n    private float value;\n    public float getTotalMoney() {\n        return value;\n    }\n    public void setTotalMoney(float newValue) {\n        value = newValue;\n    }\n    public void addMoney(float deposit) {\n        value += deposit;\n    }\n    public void subtractMoney(float debit) {\n        value -= debit;\n    }\n}\n\n```\n```java\npublic class Paperboy {\n    public void charge(Customer myCustomer, double payment) {\n        Wallet theWallet = myCustomer.getWallet();\n        if (theWallet.getTotalMoney() > payment) {\n            theWallet.subtractMoney(payment);\n        } else {\n            //money not enough\n        }\n    }\n}\n```\n从这三个类可以看出， PaperBoy\b承担了大多数的功能实现。PaperBoy从消费者那里拿到了钱包，核点钱包的的金钱并自己从中拿去购物的费用。paperBoy既与Customer发生直接交互，又与Wallet发生间接交互，不符合最小知识原则（迪米特法则）。案例主要存在以下问题\n\n+ Wallet暴露太多方法，其实Customer只要能够用钱包进行付钱就行了。所以这违反了迪米特法则的第一条（被依赖者，只暴露应该暴露的方法）\n+ 让PaperBoy与Wallet直接交互是错误的行为，Wallet是Customer的私有财物，ParperBoy是无权过问Wallet的情况的， 所以从职责的角度上来看，这是不符合逻辑，违反了迪米特法则的第二条（依赖者，只依赖应该依赖的对象）\n\n### 如何进行修改\n\n+ PaperBoy不再与钱包发生直接关系，直接向customer要钱\n+ 钱包只暴露付钱的方法给Customer。 方法暴露越多，后期需求变更的影响越大。\n\n```java\npublic class PaperBoy {\n    private Customer customer;\n\n    public PaperBoy(Customer customer){\n        this.customer = customer;\n    }\n\n    public void charge(float payment){\n        customer.pay(payment);\n    }\n}\n```\n\n```java\npublic class Customer {\n    private String firstName;\n    private String lastName;\n    private Wallet myWallet;\n\n    public Customer(String firstName, String lastName, Wallet myWallet) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.myWallet = myWallet;\n    }\n\n    public String getFirstName(){\n        return firstName;\n    }\n    public String getLastName(){\n        return lastName;\n    }\n\n    public void pay(float payment){\n        myWallet.pay(payment);\n    }\n}\n```\n\n```java\npublic class Wallet {\n    private float value;\n    private float getTotalMoney() {\n        return value;\n    }\n    public void setTotalMoney(float newValue) {\n        value = newValue;\n    }\n    private void addMoney(float deposit) {\n        value += deposit;\n    }\n    private void subtractMoney(float debit) {\n        value -= debit;\n    }\n\n    public void pay(float payment){\n        if(getTotalMoney()>payment){\n            subtractMoney(payment);\n        }else {\n\n        }\n    }\n}\n```\n\n迪米特法则核心观念--- 类间解耦、弱耦合\n\n\n\n\n\n\n\n\n\n\n","slug":"迪米特法则","published":1,"updated":"2019-04-14T11:54:58.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjph0015w3s6xwhvj4zr","content":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-271-thumbnail-small.jpg\" alt><br><a id=\"more\"></a></p>\n<p>软件开发一直在推崇一个概念-低耦合、高内聚。 那什么样的代码设计才算得上低耦合、高内聚的代码。本文通过迪米特法则来讲解一下如何进行低耦合的代码设计。</p>\n<blockquote>\n<p>迪米特法则也叫最小知识原则（Least Knowledge Principle）,即一个类应该对自己需要耦合和调用的类保持最少的认识。也就是一个类对自己依赖的类知道的越少越好。因而迪米特法则应该遵循一下的要义</p>\n<ol>\n<li>被依赖者，只应该暴露应该暴露的方法</li>\n<li>依赖者，只依赖应该依赖的对象</li>\n</ol>\n</blockquote>\n<h3 id=\"一个案例\"><a href=\"#一个案例\" class=\"headerlink\" title=\"一个案例\"></a>一个案例</h3><p>David Bock根据迪米特法则给出了一个超市购物的案例。<br>三个关键信息：消费者、钱包、收银员<br>定义了三个类，分别是Customer、Wallet、PaperBoy<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String firstName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Wallet myWallet;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFirstName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLastName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Wallet <span class=\"title\">getWallet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myWallet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wallet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> value;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getTotalMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTotalMoney</span><span class=\"params\">(<span class=\"keyword\">float</span> newValue)</span> </span>&#123;</span><br><span class=\"line\">        value = newValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addMoney</span><span class=\"params\">(<span class=\"keyword\">float</span> deposit)</span> </span>&#123;</span><br><span class=\"line\">        value += deposit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subtractMoney</span><span class=\"params\">(<span class=\"keyword\">float</span> debit)</span> </span>&#123;</span><br><span class=\"line\">        value -= debit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Paperboy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">charge</span><span class=\"params\">(Customer myCustomer, <span class=\"keyword\">double</span> payment)</span> </span>&#123;</span><br><span class=\"line\">        Wallet theWallet = myCustomer.getWallet();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (theWallet.getTotalMoney() &gt; payment) &#123;</span><br><span class=\"line\">            theWallet.subtractMoney(payment);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//money not enough</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从这三个类可以看出， PaperBoy\b承担了大多数的功能实现。PaperBoy从消费者那里拿到了钱包，核点钱包的的金钱并自己从中拿去购物的费用。paperBoy既与Customer发生直接交互，又与Wallet发生间接交互，不符合最小知识原则（迪米特法则）。案例主要存在以下问题</p>\n<ul>\n<li>Wallet暴露太多方法，其实Customer只要能够用钱包进行付钱就行了。所以这违反了迪米特法则的第一条（被依赖者，只暴露应该暴露的方法）</li>\n<li>让PaperBoy与Wallet直接交互是错误的行为，Wallet是Customer的私有财物，ParperBoy是无权过问Wallet的情况的， 所以从职责的角度上来看，这是不符合逻辑，违反了迪米特法则的第二条（依赖者，只依赖应该依赖的对象）</li>\n</ul>\n<h3 id=\"如何进行修改\"><a href=\"#如何进行修改\" class=\"headerlink\" title=\"如何进行修改\"></a>如何进行修改</h3><ul>\n<li>PaperBoy不再与钱包发生直接关系，直接向customer要钱</li>\n<li>钱包只暴露付钱的方法给Customer。 方法暴露越多，后期需求变更的影响越大。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PaperBoy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Customer customer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PaperBoy</span><span class=\"params\">(Customer customer)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customer = customer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">charge</span><span class=\"params\">(<span class=\"keyword\">float</span> payment)</span></span>&#123;</span><br><span class=\"line\">        customer.pay(payment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String firstName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Wallet myWallet;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Customer</span><span class=\"params\">(String firstName, String lastName, Wallet myWallet)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.firstName = firstName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lastName = lastName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.myWallet = myWallet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFirstName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLastName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pay</span><span class=\"params\">(<span class=\"keyword\">float</span> payment)</span></span>&#123;</span><br><span class=\"line\">        myWallet.pay(payment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wallet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> value;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span> <span class=\"title\">getTotalMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTotalMoney</span><span class=\"params\">(<span class=\"keyword\">float</span> newValue)</span> </span>&#123;</span><br><span class=\"line\">        value = newValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addMoney</span><span class=\"params\">(<span class=\"keyword\">float</span> deposit)</span> </span>&#123;</span><br><span class=\"line\">        value += deposit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">subtractMoney</span><span class=\"params\">(<span class=\"keyword\">float</span> debit)</span> </span>&#123;</span><br><span class=\"line\">        value -= debit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pay</span><span class=\"params\">(<span class=\"keyword\">float</span> payment)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(getTotalMoney()&gt;payment)&#123;</span><br><span class=\"line\">            subtractMoney(payment);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>迪米特法则核心观念— 类间解耦、弱耦合</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/common/gratisography-271-thumbnail-small.jpg\" alt><br>","more":"</p>\n<p>软件开发一直在推崇一个概念-低耦合、高内聚。 那什么样的代码设计才算得上低耦合、高内聚的代码。本文通过迪米特法则来讲解一下如何进行低耦合的代码设计。</p>\n<blockquote>\n<p>迪米特法则也叫最小知识原则（Least Knowledge Principle）,即一个类应该对自己需要耦合和调用的类保持最少的认识。也就是一个类对自己依赖的类知道的越少越好。因而迪米特法则应该遵循一下的要义</p>\n<ol>\n<li>被依赖者，只应该暴露应该暴露的方法</li>\n<li>依赖者，只依赖应该依赖的对象</li>\n</ol>\n</blockquote>\n<h3 id=\"一个案例\"><a href=\"#一个案例\" class=\"headerlink\" title=\"一个案例\"></a>一个案例</h3><p>David Bock根据迪米特法则给出了一个超市购物的案例。<br>三个关键信息：消费者、钱包、收银员<br>定义了三个类，分别是Customer、Wallet、PaperBoy<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String firstName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Wallet myWallet;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFirstName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLastName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Wallet <span class=\"title\">getWallet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myWallet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wallet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> value;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getTotalMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTotalMoney</span><span class=\"params\">(<span class=\"keyword\">float</span> newValue)</span> </span>&#123;</span><br><span class=\"line\">        value = newValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addMoney</span><span class=\"params\">(<span class=\"keyword\">float</span> deposit)</span> </span>&#123;</span><br><span class=\"line\">        value += deposit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subtractMoney</span><span class=\"params\">(<span class=\"keyword\">float</span> debit)</span> </span>&#123;</span><br><span class=\"line\">        value -= debit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Paperboy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">charge</span><span class=\"params\">(Customer myCustomer, <span class=\"keyword\">double</span> payment)</span> </span>&#123;</span><br><span class=\"line\">        Wallet theWallet = myCustomer.getWallet();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (theWallet.getTotalMoney() &gt; payment) &#123;</span><br><span class=\"line\">            theWallet.subtractMoney(payment);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//money not enough</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从这三个类可以看出， PaperBoy\b承担了大多数的功能实现。PaperBoy从消费者那里拿到了钱包，核点钱包的的金钱并自己从中拿去购物的费用。paperBoy既与Customer发生直接交互，又与Wallet发生间接交互，不符合最小知识原则（迪米特法则）。案例主要存在以下问题</p>\n<ul>\n<li>Wallet暴露太多方法，其实Customer只要能够用钱包进行付钱就行了。所以这违反了迪米特法则的第一条（被依赖者，只暴露应该暴露的方法）</li>\n<li>让PaperBoy与Wallet直接交互是错误的行为，Wallet是Customer的私有财物，ParperBoy是无权过问Wallet的情况的， 所以从职责的角度上来看，这是不符合逻辑，违反了迪米特法则的第二条（依赖者，只依赖应该依赖的对象）</li>\n</ul>\n<h3 id=\"如何进行修改\"><a href=\"#如何进行修改\" class=\"headerlink\" title=\"如何进行修改\"></a>如何进行修改</h3><ul>\n<li>PaperBoy不再与钱包发生直接关系，直接向customer要钱</li>\n<li>钱包只暴露付钱的方法给Customer。 方法暴露越多，后期需求变更的影响越大。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PaperBoy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Customer customer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PaperBoy</span><span class=\"params\">(Customer customer)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customer = customer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">charge</span><span class=\"params\">(<span class=\"keyword\">float</span> payment)</span></span>&#123;</span><br><span class=\"line\">        customer.pay(payment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String firstName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Wallet myWallet;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Customer</span><span class=\"params\">(String firstName, String lastName, Wallet myWallet)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.firstName = firstName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lastName = lastName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.myWallet = myWallet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFirstName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLastName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pay</span><span class=\"params\">(<span class=\"keyword\">float</span> payment)</span></span>&#123;</span><br><span class=\"line\">        myWallet.pay(payment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wallet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> value;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span> <span class=\"title\">getTotalMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTotalMoney</span><span class=\"params\">(<span class=\"keyword\">float</span> newValue)</span> </span>&#123;</span><br><span class=\"line\">        value = newValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addMoney</span><span class=\"params\">(<span class=\"keyword\">float</span> deposit)</span> </span>&#123;</span><br><span class=\"line\">        value += deposit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">subtractMoney</span><span class=\"params\">(<span class=\"keyword\">float</span> debit)</span> </span>&#123;</span><br><span class=\"line\">        value -= debit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pay</span><span class=\"params\">(<span class=\"keyword\">float</span> payment)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(getTotalMoney()&gt;payment)&#123;</span><br><span class=\"line\">            subtractMoney(payment);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>迪米特法则核心观念— 类间解耦、弱耦合</p>"},{"title":"适配器模式","date":"2019-04-14T01:44:58.000Z","_content":"\n### 什么是适配器模式\n> 将一个接口变换成客户期待的另一个的接口，从而使原本因接口不匹配无法一起工作的两个类能够一起工作。\n\n生活中不乏这样的案例，如电脑的电源适配器，它的作用主要是解决家用电和电脑之间的兼容问题\n\n### 程序模拟","source":"_posts/适配器模式.md","raw":"---\ntitle: 适配器模式\ndate: 2019-04-14 09:44:58\ntags: Design\ncategories: 设计模式\n---\n\n### 什么是适配器模式\n> 将一个接口变换成客户期待的另一个的接口，从而使原本因接口不匹配无法一起工作的两个类能够一起工作。\n\n生活中不乏这样的案例，如电脑的电源适配器，它的作用主要是解决家用电和电脑之间的兼容问题\n\n### 程序模拟","slug":"适配器模式","published":1,"updated":"2019-04-14T11:46:57.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjpi0018w3s6sulm1bzy","content":"<h3 id=\"什么是适配器模式\"><a href=\"#什么是适配器模式\" class=\"headerlink\" title=\"什么是适配器模式\"></a>什么是适配器模式</h3><blockquote>\n<p>将一个接口变换成客户期待的另一个的接口，从而使原本因接口不匹配无法一起工作的两个类能够一起工作。</p>\n</blockquote>\n<p>生活中不乏这样的案例，如电脑的电源适配器，它的作用主要是解决家用电和电脑之间的兼容问题</p>\n<h3 id=\"程序模拟\"><a href=\"#程序模拟\" class=\"headerlink\" title=\"程序模拟\"></a>程序模拟</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是适配器模式\"><a href=\"#什么是适配器模式\" class=\"headerlink\" title=\"什么是适配器模式\"></a>什么是适配器模式</h3><blockquote>\n<p>将一个接口变换成客户期待的另一个的接口，从而使原本因接口不匹配无法一起工作的两个类能够一起工作。</p>\n</blockquote>\n<p>生活中不乏这样的案例，如电脑的电源适配器，它的作用主要是解决家用电和电脑之间的兼容问题</p>\n<h3 id=\"程序模拟\"><a href=\"#程序模拟\" class=\"headerlink\" title=\"程序模拟\"></a>程序模拟</h3>"},{"title":"工厂模式|如何优雅的new对象","date":"2019-03-24T13:14:01.000Z","_content":"\n![](http://posw9yxeh.bkt.clouddn.com/images/factory/factory-1.jpg)\n<!-- more -->\n\n## 写在前面\n\n在面向对象编程（OOP）中，通过new去实例化一个对象是再正常不过的事情。但是每当new一个对象，后面都会跟一个具体类，这使得代码与具体类过度耦合，让我们陷入面向实现编程的漩涡里面。每当有新的需求变更，我们代码的扩展性就比较差。\n\n手动new对象有哪些问题\n+ 与具体类耦合，每当有新的变化，就必须改变代码（不符合对修改关闭）\n+ 无法借助接口、多态的力量去隔离变化（与面向接口编程相违背）\n\n如何才能优雅的new对象\n+ 对扩展开放，应对后期的各种需求\n+ 对修改关闭，对于新的需求，不改变原有的代码\n+ 不关心构造对象的细节和复杂过程，轻松获取对象实例\n\n可以通过工厂模式来构造我们想要的对象。\n\n>工厂模式是一种常用的创建型设计模式，在基类中定义了创建对象的接口，让子类来决定实例化哪个类。工厂方法让一个类的实例化延迟到子类中进行。\n\n工厂模式包括我们所熟知的简单工厂模式、工厂方法模式、抽象工厂工厂模式。其中简单工厂模式在一定程度上只算是一种编程思想，还谈不上设计模式。但它作为工厂方法模式和抽象工厂模式的基石，还是有必要深入了解一下。\n\n## 造车案例来了解一下不同的工厂模式\n1. 客户想要一辆奔驰车，客户需要奔驰车的设计图纸相应的汽车零件来自己制造。当客户想要悍马车，手上的设计图纸和汽车零件已经毫无用处，需要获取悍马车的设计图纸以及汽车零件（不符合对修改关闭）\n2. 客户不需要自己生产汽车，由工厂来提供服务，客户需要什么车，工厂就生产什么车。但是每当客户有新的需求的时候，工厂就得想尽办法去找相关的图纸和零件来交付生产。---简单工厂模式（不符合对修改关闭）\n3. 客户的需求太多，一个工厂完全应付不过来，所以工厂就开始建立新的场地，有些场地只生产宝马车，有些场地只生产悍马车，这样客户想要什么样的车就找对应的车工厂去提货。--- 工厂方法模式\n4. 客户的需求逐渐升级，不同型号的车具有不同配置，所以每一个具体工厂应该具备生产不同型号车辆的能力，奥迪的工厂不仅能生产A4，也能生产A6、A8。所以一个工厂应该具备生产不同型号车辆的生产车间---抽象工厂模式\n\n## 几种工厂模式的实现\n### 简单工厂\n>定义一个工厂类，根据传入的参数不同返回不同的实例。\n\n```java\npublic interface Shape {\n    void draw();\n}\n```\n```java\npublic class RectShape implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"draw rectangle\");\n    }\n}\n```\n```java\npublic class CircleShape implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"draw circle\");\n    }\n}\n```\n```java\npublic class ShapeFactory {\n    public static Shape getShape(String type){\n        Shape shape = null;\n        if(\"circle\".equalsIgnoreCase(type)){\n            shape = new CircleShape();\n        }else if(\"rectangle\".equalsIgnoreCase(type)){\n            shape = new RectShape();\n        }\n        return shape;\n    }\n\n    public static void main(String[] args) {\n        Shape circle = ShapeFactory.getShape(\"circle\");\n        circle.draw();\n\n        Shape rectangle = ShapeFactory.getShape(\"rectangle\");\n        rectangle.draw();\n    }\n}\n```\n+ 应用场景：\n   * 只有一个工厂类，对于创建对象不多的案例比较适合\n   * 工厂类封装了对象的创建过程，客户端不需要关心对象的创建过程。\n\n### 工厂方法\n> 简单工厂的深入化， 通过创建不同的对象工厂来取代统一的工厂。让子类来决定哪一个类实例化，让一个类的实例化延迟到子类。\n\n案例：有一个图片加载器，可以加载jpg、png、gif等图片格式，\n\n```java\n/**\n * 图片加载器接口\n */\npublic interface Reader {\n    void read();\n}\n```\n```java\n/**\n *\n * gif 图片加载器\n */\npublic class GifReader implements Reader{\n    @Override\n    public void read() {\n        System.out.println(\"gif picture reader\");\n    }\n}\n```\n```java\n/**\n *\n * png 图片加载器\n */\npublic class PngReader implements Reader{\n    @Override\n    public void read() {\n        System.out.println(\"png picture reader\");\n    }\n}\n```\n```java\n/**\n *\n * jpg 图片加载器\n */\npublic class JpgReader implements Reader{\n    @Override\n    public void read() {\n        System.out.println(\"jpg picture reader\");\n    }\n}\n```\n```java\n/**\n * gif 图片加载器工厂\n */\npublic class GifReaderFactory implements ReaderFactory{\n    @Override\n    public Reader getReader() {\n        return new GifReader();\n    }\n}\n```\n```java\n/**\n * jpg 图片加载器工厂\n */\npublic class JpgReaderFactory implements ReaderFactory{\n    @Override\n    public Reader getReader() {\n        return new JpgReader();\n    }\n}\n```\n```java\n/**\n * png 图片加载器工厂\n */\npublic class PngReaderFactory implements ReaderFactory {\n    @Override\n    public Reader getReader() {\n        return new PngReader();\n    }\n}\n```\n```java\n/**\n * 客户端\n */\npublic class Client {\n    public static void main(String[] args) {\n        GifReaderFactory gifReaderFactory = new GifReaderFactory();\n        Reader gifReader = gifReaderFactory.getReader();\n        gifReader.read();\n\n        PngReaderFactory pngReaderFactory = new PngReaderFactory();\n        Reader pngReader = pngReaderFactory.getReader();\n        pngReader.read();\n\n        JpgReaderFactory jpgReaderFactory = new JpgReaderFactory();\n        Reader jpgReader = jpgReaderFactory.getReader();\n        jpgReader.read();\n\n    }\n}\n```\n工厂方法模式优点\n+ 良好的封装性。调用者需要创建一个产品对象，只需要知道产品工厂的类名就可以了，不要了解对象创建过程，降低模块间的耦合。\n+ 良好的扩展性。当有新增产品类的需求变化，只要适当扩展一个工厂类就可以完成拥抱变化\n+ 屏蔽产品类。产品类如何变化，调用者不需要关心---切换数据源（数据库从MySQL切换到Oracle,需要改动的只是切换一下驱动名称）\n+ 典型的解耦框架。\n   * 高层模块需要知道产品抽象类，不关心实现类---迪米特法则\n   * 只依赖产品类的抽象 --- 依赖倒置原则\n   * 产品子类替换产品父类 --- 里氏替换原则\n\n应用场景\n+ 所以生成对象的地方都可以使用工厂方法模式，但是要权衡增加工厂类进行管理带来的代码复杂度\n+ 需要灵活、可扩展的框架是，可以采用工厂方法模式\n+ 客户端不需要知道它所创建对象的类，只需要知道创建的工厂名就可以完成创建过程\n\n### 抽象工厂\n> 为创建一组相关或相互依赖的对象提供一个借口，而无需指定他们的具体类。\n\n案例：设计一个兼容Android、ios、Wp三个操作系统的游戏，每个系统都有一套操作控制和界面控制器\n\n```java\n/**\n * 界面控制器\n */\npublic interface UIController {\n    void display();\n}\n```\n```java\n/**\n * 操作控制器\n */\npublic interface OperationController {\n    void control();\n}\n```\n```java\n/**\n * wp ui controller\n */\npublic class WpUIController implements UIController {\n    @Override\n    public void display() {\n        System.out.println(\"wp ui controller\");\n    }\n}\n```\n```java\n/**\n * ios 界面控制器\n */\npublic class IosUIController implements UIController {\n    @Override\n    public void display() {\n        System.out.println(\"ios ui controller\");\n    }\n}\n```\n```java\n/**\n * 安卓界面控制器\n */\npublic class AndroidUIController implements UIController{\n    @Override\n    public void display() {\n        System.out.println(\"android ui controller\");\n    }\n}\n```\n```java\n/**\n * wp 操作控制器\n */\npublic class WpOperationController implements OperationController {\n    @Override\n    public void control() {\n        System.out.println(\"wp operation controller\");\n    }\n}\n```\n```java\n/**\n * ios 操作控制器\n */\npublic class IosOperationController implements OperationController {\n    @Override\n    public void control() {\n        System.out.println(\"ios operation controller\");\n    }\n}\n```\n```java\n/**\n * 安卓操作控制器\n */\npublic class AndroidOperationController implements OperationController{\n    @Override\n    public void control() {\n        System.out.println(\"android opration controller\");\n    }\n}\n```\n```java\npublic interface SystemFactory {\n    OperationController createOperationController();\n    UIController createUIController();\n}\n```\n```java\n/**\n * ios 工厂\n */\npublic class IosFactory implements SystemFactory {\n    @Override\n    public OperationController createOperationController() {\n        return new IosOperationController();\n    }\n\n    @Override\n    public UIController createUIController() {\n        return new IosUIController();\n    }\n}\n```\n```java\n/**\n * wp 工厂\n */\npublic class WpFactory implements SystemFactory{\n    @Override\n    public OperationController createOperationController() {\n        return new WpOperationController();\n    }\n\n    @Override\n    public UIController createUIController() {\n        return new WpUIController();\n    }\n}\n```\n```java\n/**\n * 安卓工厂\n */\npublic class AndroidFactory implements SystemFactory {\n    @Override\n    public OperationController createOperationController() {\n        return new AndroidOperationController();\n    }\n\n    @Override\n    public UIController createUIController() {\n        return new AndroidUIController();\n    }\n}\n```\n```java\npublic class Client {\n    public static void main(String[] args) {\n        AndroidFactory androidFactory = new AndroidFactory();\n        OperationController androidOperation = androidFactory.createOperationController();\n        androidOperation.control();\n\n        UIController androidUI = androidFactory.createUIController();\n        androidUI.display();\n\n        IosFactory iosFactory = new IosFactory();\n        OperationController iosOperation = iosFactory.createOperationController();\n        iosOperation.control();\n\n        UIController iosUI = iosFactory.createUIController();\n        iosUI.display();\n\n        WpFactory wpFactory = new WpFactory();\n        OperationController wpOperation = wpFactory.createOperationController();\n        wpOperation.control();\n\n        UIController wpUI = wpFactory.createUIController();\n        wpUI.display();\n    }\n}\n```\n优点\n+ 封装性。高层模块不需要关心产品实现类\n\n缺点\n+ 产品族扩展困难,当要新增一个控制器，所有的实现类都要改变---违反开闭原则，改变了契约，所有与契约有关系的代码都要改变\n\n应用场景\n+ 不关心对象创建过程\n+ 需要一组对象功能完成某种功能\n+ 系统结构稳定，不会频繁的增加产品族功能，增加产品族功能就回修改原有代码，不符合开闭原则。\n\n注意\n产品族扩展困难(增加控制器)，但是产品扩展容易(增加小米系统的支持)，也就是纵向扩展困难，横向扩展容易，从产品横向扩展来说，抽象工厂模式是符合开闭原则的\n\n参考文档\n\n[https://juejin.im/entry/58f5e080b123db2fa2b3c4c6](https://juejin.im/entry/58f5e080b123db2fa2b3c4c6)\n","source":"_posts/工厂模式.md","raw":"---\ntitle: 工厂模式|如何优雅的new对象\ndate: 2019-03-24 21:14:01\ntags: Design\ncategories: 设计模式\n---\n\n![](http://posw9yxeh.bkt.clouddn.com/images/factory/factory-1.jpg)\n<!-- more -->\n\n## 写在前面\n\n在面向对象编程（OOP）中，通过new去实例化一个对象是再正常不过的事情。但是每当new一个对象，后面都会跟一个具体类，这使得代码与具体类过度耦合，让我们陷入面向实现编程的漩涡里面。每当有新的需求变更，我们代码的扩展性就比较差。\n\n手动new对象有哪些问题\n+ 与具体类耦合，每当有新的变化，就必须改变代码（不符合对修改关闭）\n+ 无法借助接口、多态的力量去隔离变化（与面向接口编程相违背）\n\n如何才能优雅的new对象\n+ 对扩展开放，应对后期的各种需求\n+ 对修改关闭，对于新的需求，不改变原有的代码\n+ 不关心构造对象的细节和复杂过程，轻松获取对象实例\n\n可以通过工厂模式来构造我们想要的对象。\n\n>工厂模式是一种常用的创建型设计模式，在基类中定义了创建对象的接口，让子类来决定实例化哪个类。工厂方法让一个类的实例化延迟到子类中进行。\n\n工厂模式包括我们所熟知的简单工厂模式、工厂方法模式、抽象工厂工厂模式。其中简单工厂模式在一定程度上只算是一种编程思想，还谈不上设计模式。但它作为工厂方法模式和抽象工厂模式的基石，还是有必要深入了解一下。\n\n## 造车案例来了解一下不同的工厂模式\n1. 客户想要一辆奔驰车，客户需要奔驰车的设计图纸相应的汽车零件来自己制造。当客户想要悍马车，手上的设计图纸和汽车零件已经毫无用处，需要获取悍马车的设计图纸以及汽车零件（不符合对修改关闭）\n2. 客户不需要自己生产汽车，由工厂来提供服务，客户需要什么车，工厂就生产什么车。但是每当客户有新的需求的时候，工厂就得想尽办法去找相关的图纸和零件来交付生产。---简单工厂模式（不符合对修改关闭）\n3. 客户的需求太多，一个工厂完全应付不过来，所以工厂就开始建立新的场地，有些场地只生产宝马车，有些场地只生产悍马车，这样客户想要什么样的车就找对应的车工厂去提货。--- 工厂方法模式\n4. 客户的需求逐渐升级，不同型号的车具有不同配置，所以每一个具体工厂应该具备生产不同型号车辆的能力，奥迪的工厂不仅能生产A4，也能生产A6、A8。所以一个工厂应该具备生产不同型号车辆的生产车间---抽象工厂模式\n\n## 几种工厂模式的实现\n### 简单工厂\n>定义一个工厂类，根据传入的参数不同返回不同的实例。\n\n```java\npublic interface Shape {\n    void draw();\n}\n```\n```java\npublic class RectShape implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"draw rectangle\");\n    }\n}\n```\n```java\npublic class CircleShape implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"draw circle\");\n    }\n}\n```\n```java\npublic class ShapeFactory {\n    public static Shape getShape(String type){\n        Shape shape = null;\n        if(\"circle\".equalsIgnoreCase(type)){\n            shape = new CircleShape();\n        }else if(\"rectangle\".equalsIgnoreCase(type)){\n            shape = new RectShape();\n        }\n        return shape;\n    }\n\n    public static void main(String[] args) {\n        Shape circle = ShapeFactory.getShape(\"circle\");\n        circle.draw();\n\n        Shape rectangle = ShapeFactory.getShape(\"rectangle\");\n        rectangle.draw();\n    }\n}\n```\n+ 应用场景：\n   * 只有一个工厂类，对于创建对象不多的案例比较适合\n   * 工厂类封装了对象的创建过程，客户端不需要关心对象的创建过程。\n\n### 工厂方法\n> 简单工厂的深入化， 通过创建不同的对象工厂来取代统一的工厂。让子类来决定哪一个类实例化，让一个类的实例化延迟到子类。\n\n案例：有一个图片加载器，可以加载jpg、png、gif等图片格式，\n\n```java\n/**\n * 图片加载器接口\n */\npublic interface Reader {\n    void read();\n}\n```\n```java\n/**\n *\n * gif 图片加载器\n */\npublic class GifReader implements Reader{\n    @Override\n    public void read() {\n        System.out.println(\"gif picture reader\");\n    }\n}\n```\n```java\n/**\n *\n * png 图片加载器\n */\npublic class PngReader implements Reader{\n    @Override\n    public void read() {\n        System.out.println(\"png picture reader\");\n    }\n}\n```\n```java\n/**\n *\n * jpg 图片加载器\n */\npublic class JpgReader implements Reader{\n    @Override\n    public void read() {\n        System.out.println(\"jpg picture reader\");\n    }\n}\n```\n```java\n/**\n * gif 图片加载器工厂\n */\npublic class GifReaderFactory implements ReaderFactory{\n    @Override\n    public Reader getReader() {\n        return new GifReader();\n    }\n}\n```\n```java\n/**\n * jpg 图片加载器工厂\n */\npublic class JpgReaderFactory implements ReaderFactory{\n    @Override\n    public Reader getReader() {\n        return new JpgReader();\n    }\n}\n```\n```java\n/**\n * png 图片加载器工厂\n */\npublic class PngReaderFactory implements ReaderFactory {\n    @Override\n    public Reader getReader() {\n        return new PngReader();\n    }\n}\n```\n```java\n/**\n * 客户端\n */\npublic class Client {\n    public static void main(String[] args) {\n        GifReaderFactory gifReaderFactory = new GifReaderFactory();\n        Reader gifReader = gifReaderFactory.getReader();\n        gifReader.read();\n\n        PngReaderFactory pngReaderFactory = new PngReaderFactory();\n        Reader pngReader = pngReaderFactory.getReader();\n        pngReader.read();\n\n        JpgReaderFactory jpgReaderFactory = new JpgReaderFactory();\n        Reader jpgReader = jpgReaderFactory.getReader();\n        jpgReader.read();\n\n    }\n}\n```\n工厂方法模式优点\n+ 良好的封装性。调用者需要创建一个产品对象，只需要知道产品工厂的类名就可以了，不要了解对象创建过程，降低模块间的耦合。\n+ 良好的扩展性。当有新增产品类的需求变化，只要适当扩展一个工厂类就可以完成拥抱变化\n+ 屏蔽产品类。产品类如何变化，调用者不需要关心---切换数据源（数据库从MySQL切换到Oracle,需要改动的只是切换一下驱动名称）\n+ 典型的解耦框架。\n   * 高层模块需要知道产品抽象类，不关心实现类---迪米特法则\n   * 只依赖产品类的抽象 --- 依赖倒置原则\n   * 产品子类替换产品父类 --- 里氏替换原则\n\n应用场景\n+ 所以生成对象的地方都可以使用工厂方法模式，但是要权衡增加工厂类进行管理带来的代码复杂度\n+ 需要灵活、可扩展的框架是，可以采用工厂方法模式\n+ 客户端不需要知道它所创建对象的类，只需要知道创建的工厂名就可以完成创建过程\n\n### 抽象工厂\n> 为创建一组相关或相互依赖的对象提供一个借口，而无需指定他们的具体类。\n\n案例：设计一个兼容Android、ios、Wp三个操作系统的游戏，每个系统都有一套操作控制和界面控制器\n\n```java\n/**\n * 界面控制器\n */\npublic interface UIController {\n    void display();\n}\n```\n```java\n/**\n * 操作控制器\n */\npublic interface OperationController {\n    void control();\n}\n```\n```java\n/**\n * wp ui controller\n */\npublic class WpUIController implements UIController {\n    @Override\n    public void display() {\n        System.out.println(\"wp ui controller\");\n    }\n}\n```\n```java\n/**\n * ios 界面控制器\n */\npublic class IosUIController implements UIController {\n    @Override\n    public void display() {\n        System.out.println(\"ios ui controller\");\n    }\n}\n```\n```java\n/**\n * 安卓界面控制器\n */\npublic class AndroidUIController implements UIController{\n    @Override\n    public void display() {\n        System.out.println(\"android ui controller\");\n    }\n}\n```\n```java\n/**\n * wp 操作控制器\n */\npublic class WpOperationController implements OperationController {\n    @Override\n    public void control() {\n        System.out.println(\"wp operation controller\");\n    }\n}\n```\n```java\n/**\n * ios 操作控制器\n */\npublic class IosOperationController implements OperationController {\n    @Override\n    public void control() {\n        System.out.println(\"ios operation controller\");\n    }\n}\n```\n```java\n/**\n * 安卓操作控制器\n */\npublic class AndroidOperationController implements OperationController{\n    @Override\n    public void control() {\n        System.out.println(\"android opration controller\");\n    }\n}\n```\n```java\npublic interface SystemFactory {\n    OperationController createOperationController();\n    UIController createUIController();\n}\n```\n```java\n/**\n * ios 工厂\n */\npublic class IosFactory implements SystemFactory {\n    @Override\n    public OperationController createOperationController() {\n        return new IosOperationController();\n    }\n\n    @Override\n    public UIController createUIController() {\n        return new IosUIController();\n    }\n}\n```\n```java\n/**\n * wp 工厂\n */\npublic class WpFactory implements SystemFactory{\n    @Override\n    public OperationController createOperationController() {\n        return new WpOperationController();\n    }\n\n    @Override\n    public UIController createUIController() {\n        return new WpUIController();\n    }\n}\n```\n```java\n/**\n * 安卓工厂\n */\npublic class AndroidFactory implements SystemFactory {\n    @Override\n    public OperationController createOperationController() {\n        return new AndroidOperationController();\n    }\n\n    @Override\n    public UIController createUIController() {\n        return new AndroidUIController();\n    }\n}\n```\n```java\npublic class Client {\n    public static void main(String[] args) {\n        AndroidFactory androidFactory = new AndroidFactory();\n        OperationController androidOperation = androidFactory.createOperationController();\n        androidOperation.control();\n\n        UIController androidUI = androidFactory.createUIController();\n        androidUI.display();\n\n        IosFactory iosFactory = new IosFactory();\n        OperationController iosOperation = iosFactory.createOperationController();\n        iosOperation.control();\n\n        UIController iosUI = iosFactory.createUIController();\n        iosUI.display();\n\n        WpFactory wpFactory = new WpFactory();\n        OperationController wpOperation = wpFactory.createOperationController();\n        wpOperation.control();\n\n        UIController wpUI = wpFactory.createUIController();\n        wpUI.display();\n    }\n}\n```\n优点\n+ 封装性。高层模块不需要关心产品实现类\n\n缺点\n+ 产品族扩展困难,当要新增一个控制器，所有的实现类都要改变---违反开闭原则，改变了契约，所有与契约有关系的代码都要改变\n\n应用场景\n+ 不关心对象创建过程\n+ 需要一组对象功能完成某种功能\n+ 系统结构稳定，不会频繁的增加产品族功能，增加产品族功能就回修改原有代码，不符合开闭原则。\n\n注意\n产品族扩展困难(增加控制器)，但是产品扩展容易(增加小米系统的支持)，也就是纵向扩展困难，横向扩展容易，从产品横向扩展来说，抽象工厂模式是符合开闭原则的\n\n参考文档\n\n[https://juejin.im/entry/58f5e080b123db2fa2b3c4c6](https://juejin.im/entry/58f5e080b123db2fa2b3c4c6)\n","slug":"工厂模式","published":1,"updated":"2019-04-14T14:13:46.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjr6001lw3s6jr5zhe0x","content":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/factory/factory-1.jpg\" alt><br><a id=\"more\"></a></p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>在面向对象编程（OOP）中，通过new去实例化一个对象是再正常不过的事情。但是每当new一个对象，后面都会跟一个具体类，这使得代码与具体类过度耦合，让我们陷入面向实现编程的漩涡里面。每当有新的需求变更，我们代码的扩展性就比较差。</p>\n<p>手动new对象有哪些问题</p>\n<ul>\n<li>与具体类耦合，每当有新的变化，就必须改变代码（不符合对修改关闭）</li>\n<li>无法借助接口、多态的力量去隔离变化（与面向接口编程相违背）</li>\n</ul>\n<p>如何才能优雅的new对象</p>\n<ul>\n<li>对扩展开放，应对后期的各种需求</li>\n<li>对修改关闭，对于新的需求，不改变原有的代码</li>\n<li>不关心构造对象的细节和复杂过程，轻松获取对象实例</li>\n</ul>\n<p>可以通过工厂模式来构造我们想要的对象。</p>\n<blockquote>\n<p>工厂模式是一种常用的创建型设计模式，在基类中定义了创建对象的接口，让子类来决定实例化哪个类。工厂方法让一个类的实例化延迟到子类中进行。</p>\n</blockquote>\n<p>工厂模式包括我们所熟知的简单工厂模式、工厂方法模式、抽象工厂工厂模式。其中简单工厂模式在一定程度上只算是一种编程思想，还谈不上设计模式。但它作为工厂方法模式和抽象工厂模式的基石，还是有必要深入了解一下。</p>\n<h2 id=\"造车案例来了解一下不同的工厂模式\"><a href=\"#造车案例来了解一下不同的工厂模式\" class=\"headerlink\" title=\"造车案例来了解一下不同的工厂模式\"></a>造车案例来了解一下不同的工厂模式</h2><ol>\n<li>客户想要一辆奔驰车，客户需要奔驰车的设计图纸相应的汽车零件来自己制造。当客户想要悍马车，手上的设计图纸和汽车零件已经毫无用处，需要获取悍马车的设计图纸以及汽车零件（不符合对修改关闭）</li>\n<li>客户不需要自己生产汽车，由工厂来提供服务，客户需要什么车，工厂就生产什么车。但是每当客户有新的需求的时候，工厂就得想尽办法去找相关的图纸和零件来交付生产。—简单工厂模式（不符合对修改关闭）</li>\n<li>客户的需求太多，一个工厂完全应付不过来，所以工厂就开始建立新的场地，有些场地只生产宝马车，有些场地只生产悍马车，这样客户想要什么样的车就找对应的车工厂去提货。— 工厂方法模式</li>\n<li>客户的需求逐渐升级，不同型号的车具有不同配置，所以每一个具体工厂应该具备生产不同型号车辆的能力，奥迪的工厂不仅能生产A4，也能生产A6、A8。所以一个工厂应该具备生产不同型号车辆的生产车间—抽象工厂模式</li>\n</ol>\n<h2 id=\"几种工厂模式的实现\"><a href=\"#几种工厂模式的实现\" class=\"headerlink\" title=\"几种工厂模式的实现\"></a>几种工厂模式的实现</h2><h3 id=\"简单工厂\"><a href=\"#简单工厂\" class=\"headerlink\" title=\"简单工厂\"></a>简单工厂</h3><blockquote>\n<p>定义一个工厂类，根据传入的参数不同返回不同的实例。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RectShape</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"draw rectangle\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleShape</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"draw circle\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShapeFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Shape <span class=\"title\">getShape</span><span class=\"params\">(String type)</span></span>&#123;</span><br><span class=\"line\">        Shape shape = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">\"circle\"</span>.equalsIgnoreCase(type))&#123;</span><br><span class=\"line\">            shape = <span class=\"keyword\">new</span> CircleShape();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"rectangle\"</span>.equalsIgnoreCase(type))&#123;</span><br><span class=\"line\">            shape = <span class=\"keyword\">new</span> RectShape();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> shape;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Shape circle = ShapeFactory.getShape(<span class=\"string\">\"circle\"</span>);</span><br><span class=\"line\">        circle.draw();</span><br><span class=\"line\"></span><br><span class=\"line\">        Shape rectangle = ShapeFactory.getShape(<span class=\"string\">\"rectangle\"</span>);</span><br><span class=\"line\">        rectangle.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>应用场景：<ul>\n<li>只有一个工厂类，对于创建对象不多的案例比较适合</li>\n<li>工厂类封装了对象的创建过程，客户端不需要关心对象的创建过程。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"工厂方法\"><a href=\"#工厂方法\" class=\"headerlink\" title=\"工厂方法\"></a>工厂方法</h3><blockquote>\n<p>简单工厂的深入化， 通过创建不同的对象工厂来取代统一的工厂。让子类来决定哪一个类实例化，让一个类的实例化延迟到子类。</p>\n</blockquote>\n<p>案例：有一个图片加载器，可以加载jpg、png、gif等图片格式，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 图片加载器接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Reader</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * gif 图片加载器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GifReader</span> <span class=\"keyword\">implements</span> <span class=\"title\">Reader</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"gif picture reader\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * png 图片加载器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PngReader</span> <span class=\"keyword\">implements</span> <span class=\"title\">Reader</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"png picture reader\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * jpg 图片加载器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JpgReader</span> <span class=\"keyword\">implements</span> <span class=\"title\">Reader</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"jpg picture reader\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * gif 图片加载器工厂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GifReaderFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ReaderFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Reader <span class=\"title\">getReader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> GifReader();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * jpg 图片加载器工厂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JpgReaderFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ReaderFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Reader <span class=\"title\">getReader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JpgReader();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * png 图片加载器工厂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PngReaderFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ReaderFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Reader <span class=\"title\">getReader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PngReader();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 客户端</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        GifReaderFactory gifReaderFactory = <span class=\"keyword\">new</span> GifReaderFactory();</span><br><span class=\"line\">        Reader gifReader = gifReaderFactory.getReader();</span><br><span class=\"line\">        gifReader.read();</span><br><span class=\"line\"></span><br><span class=\"line\">        PngReaderFactory pngReaderFactory = <span class=\"keyword\">new</span> PngReaderFactory();</span><br><span class=\"line\">        Reader pngReader = pngReaderFactory.getReader();</span><br><span class=\"line\">        pngReader.read();</span><br><span class=\"line\"></span><br><span class=\"line\">        JpgReaderFactory jpgReaderFactory = <span class=\"keyword\">new</span> JpgReaderFactory();</span><br><span class=\"line\">        Reader jpgReader = jpgReaderFactory.getReader();</span><br><span class=\"line\">        jpgReader.read();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>工厂方法模式优点</p>\n<ul>\n<li>良好的封装性。调用者需要创建一个产品对象，只需要知道产品工厂的类名就可以了，不要了解对象创建过程，降低模块间的耦合。</li>\n<li>良好的扩展性。当有新增产品类的需求变化，只要适当扩展一个工厂类就可以完成拥抱变化</li>\n<li>屏蔽产品类。产品类如何变化，调用者不需要关心—切换数据源（数据库从MySQL切换到Oracle,需要改动的只是切换一下驱动名称）</li>\n<li>典型的解耦框架。<ul>\n<li>高层模块需要知道产品抽象类，不关心实现类—迪米特法则</li>\n<li>只依赖产品类的抽象 — 依赖倒置原则</li>\n<li>产品子类替换产品父类 — 里氏替换原则</li>\n</ul>\n</li>\n</ul>\n<p>应用场景</p>\n<ul>\n<li>所以生成对象的地方都可以使用工厂方法模式，但是要权衡增加工厂类进行管理带来的代码复杂度</li>\n<li>需要灵活、可扩展的框架是，可以采用工厂方法模式</li>\n<li>客户端不需要知道它所创建对象的类，只需要知道创建的工厂名就可以完成创建过程</li>\n</ul>\n<h3 id=\"抽象工厂\"><a href=\"#抽象工厂\" class=\"headerlink\" title=\"抽象工厂\"></a>抽象工厂</h3><blockquote>\n<p>为创建一组相关或相互依赖的对象提供一个借口，而无需指定他们的具体类。</p>\n</blockquote>\n<p>案例：设计一个兼容Android、ios、Wp三个操作系统的游戏，每个系统都有一套操作控制和界面控制器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 界面控制器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UIController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 操作控制器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OperationController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">control</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * wp ui controller</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WpUIController</span> <span class=\"keyword\">implements</span> <span class=\"title\">UIController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"wp ui controller\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ios 界面控制器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IosUIController</span> <span class=\"keyword\">implements</span> <span class=\"title\">UIController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ios ui controller\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 安卓界面控制器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidUIController</span> <span class=\"keyword\">implements</span> <span class=\"title\">UIController</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"android ui controller\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * wp 操作控制器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WpOperationController</span> <span class=\"keyword\">implements</span> <span class=\"title\">OperationController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">control</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"wp operation controller\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ios 操作控制器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IosOperationController</span> <span class=\"keyword\">implements</span> <span class=\"title\">OperationController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">control</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ios operation controller\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 安卓操作控制器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidOperationController</span> <span class=\"keyword\">implements</span> <span class=\"title\">OperationController</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">control</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"android opration controller\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SystemFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">OperationController <span class=\"title\">createOperationController</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">UIController <span class=\"title\">createUIController</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ios 工厂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IosFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">SystemFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> OperationController <span class=\"title\">createOperationController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> IosOperationController();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UIController <span class=\"title\">createUIController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> IosUIController();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * wp 工厂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WpFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">SystemFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> OperationController <span class=\"title\">createOperationController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WpOperationController();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UIController <span class=\"title\">createUIController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WpUIController();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 安卓工厂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">SystemFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> OperationController <span class=\"title\">createOperationController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AndroidOperationController();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UIController <span class=\"title\">createUIController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AndroidUIController();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AndroidFactory androidFactory = <span class=\"keyword\">new</span> AndroidFactory();</span><br><span class=\"line\">        OperationController androidOperation = androidFactory.createOperationController();</span><br><span class=\"line\">        androidOperation.control();</span><br><span class=\"line\"></span><br><span class=\"line\">        UIController androidUI = androidFactory.createUIController();</span><br><span class=\"line\">        androidUI.display();</span><br><span class=\"line\"></span><br><span class=\"line\">        IosFactory iosFactory = <span class=\"keyword\">new</span> IosFactory();</span><br><span class=\"line\">        OperationController iosOperation = iosFactory.createOperationController();</span><br><span class=\"line\">        iosOperation.control();</span><br><span class=\"line\"></span><br><span class=\"line\">        UIController iosUI = iosFactory.createUIController();</span><br><span class=\"line\">        iosUI.display();</span><br><span class=\"line\"></span><br><span class=\"line\">        WpFactory wpFactory = <span class=\"keyword\">new</span> WpFactory();</span><br><span class=\"line\">        OperationController wpOperation = wpFactory.createOperationController();</span><br><span class=\"line\">        wpOperation.control();</span><br><span class=\"line\"></span><br><span class=\"line\">        UIController wpUI = wpFactory.createUIController();</span><br><span class=\"line\">        wpUI.display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点</p>\n<ul>\n<li>封装性。高层模块不需要关心产品实现类</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>产品族扩展困难,当要新增一个控制器，所有的实现类都要改变—违反开闭原则，改变了契约，所有与契约有关系的代码都要改变</li>\n</ul>\n<p>应用场景</p>\n<ul>\n<li>不关心对象创建过程</li>\n<li>需要一组对象功能完成某种功能</li>\n<li>系统结构稳定，不会频繁的增加产品族功能，增加产品族功能就回修改原有代码，不符合开闭原则。</li>\n</ul>\n<p>注意<br>产品族扩展困难(增加控制器)，但是产品扩展容易(增加小米系统的支持)，也就是纵向扩展困难，横向扩展容易，从产品横向扩展来说，抽象工厂模式是符合开闭原则的</p>\n<p>参考文档</p>\n<p><a href=\"https://juejin.im/entry/58f5e080b123db2fa2b3c4c6\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/58f5e080b123db2fa2b3c4c6</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://posw9yxeh.bkt.clouddn.com/images/factory/factory-1.jpg\" alt><br>","more":"</p>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>在面向对象编程（OOP）中，通过new去实例化一个对象是再正常不过的事情。但是每当new一个对象，后面都会跟一个具体类，这使得代码与具体类过度耦合，让我们陷入面向实现编程的漩涡里面。每当有新的需求变更，我们代码的扩展性就比较差。</p>\n<p>手动new对象有哪些问题</p>\n<ul>\n<li>与具体类耦合，每当有新的变化，就必须改变代码（不符合对修改关闭）</li>\n<li>无法借助接口、多态的力量去隔离变化（与面向接口编程相违背）</li>\n</ul>\n<p>如何才能优雅的new对象</p>\n<ul>\n<li>对扩展开放，应对后期的各种需求</li>\n<li>对修改关闭，对于新的需求，不改变原有的代码</li>\n<li>不关心构造对象的细节和复杂过程，轻松获取对象实例</li>\n</ul>\n<p>可以通过工厂模式来构造我们想要的对象。</p>\n<blockquote>\n<p>工厂模式是一种常用的创建型设计模式，在基类中定义了创建对象的接口，让子类来决定实例化哪个类。工厂方法让一个类的实例化延迟到子类中进行。</p>\n</blockquote>\n<p>工厂模式包括我们所熟知的简单工厂模式、工厂方法模式、抽象工厂工厂模式。其中简单工厂模式在一定程度上只算是一种编程思想，还谈不上设计模式。但它作为工厂方法模式和抽象工厂模式的基石，还是有必要深入了解一下。</p>\n<h2 id=\"造车案例来了解一下不同的工厂模式\"><a href=\"#造车案例来了解一下不同的工厂模式\" class=\"headerlink\" title=\"造车案例来了解一下不同的工厂模式\"></a>造车案例来了解一下不同的工厂模式</h2><ol>\n<li>客户想要一辆奔驰车，客户需要奔驰车的设计图纸相应的汽车零件来自己制造。当客户想要悍马车，手上的设计图纸和汽车零件已经毫无用处，需要获取悍马车的设计图纸以及汽车零件（不符合对修改关闭）</li>\n<li>客户不需要自己生产汽车，由工厂来提供服务，客户需要什么车，工厂就生产什么车。但是每当客户有新的需求的时候，工厂就得想尽办法去找相关的图纸和零件来交付生产。—简单工厂模式（不符合对修改关闭）</li>\n<li>客户的需求太多，一个工厂完全应付不过来，所以工厂就开始建立新的场地，有些场地只生产宝马车，有些场地只生产悍马车，这样客户想要什么样的车就找对应的车工厂去提货。— 工厂方法模式</li>\n<li>客户的需求逐渐升级，不同型号的车具有不同配置，所以每一个具体工厂应该具备生产不同型号车辆的能力，奥迪的工厂不仅能生产A4，也能生产A6、A8。所以一个工厂应该具备生产不同型号车辆的生产车间—抽象工厂模式</li>\n</ol>\n<h2 id=\"几种工厂模式的实现\"><a href=\"#几种工厂模式的实现\" class=\"headerlink\" title=\"几种工厂模式的实现\"></a>几种工厂模式的实现</h2><h3 id=\"简单工厂\"><a href=\"#简单工厂\" class=\"headerlink\" title=\"简单工厂\"></a>简单工厂</h3><blockquote>\n<p>定义一个工厂类，根据传入的参数不同返回不同的实例。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RectShape</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"draw rectangle\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleShape</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"draw circle\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShapeFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Shape <span class=\"title\">getShape</span><span class=\"params\">(String type)</span></span>&#123;</span><br><span class=\"line\">        Shape shape = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">\"circle\"</span>.equalsIgnoreCase(type))&#123;</span><br><span class=\"line\">            shape = <span class=\"keyword\">new</span> CircleShape();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"rectangle\"</span>.equalsIgnoreCase(type))&#123;</span><br><span class=\"line\">            shape = <span class=\"keyword\">new</span> RectShape();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> shape;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Shape circle = ShapeFactory.getShape(<span class=\"string\">\"circle\"</span>);</span><br><span class=\"line\">        circle.draw();</span><br><span class=\"line\"></span><br><span class=\"line\">        Shape rectangle = ShapeFactory.getShape(<span class=\"string\">\"rectangle\"</span>);</span><br><span class=\"line\">        rectangle.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>应用场景：<ul>\n<li>只有一个工厂类，对于创建对象不多的案例比较适合</li>\n<li>工厂类封装了对象的创建过程，客户端不需要关心对象的创建过程。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"工厂方法\"><a href=\"#工厂方法\" class=\"headerlink\" title=\"工厂方法\"></a>工厂方法</h3><blockquote>\n<p>简单工厂的深入化， 通过创建不同的对象工厂来取代统一的工厂。让子类来决定哪一个类实例化，让一个类的实例化延迟到子类。</p>\n</blockquote>\n<p>案例：有一个图片加载器，可以加载jpg、png、gif等图片格式，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 图片加载器接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Reader</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * gif 图片加载器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GifReader</span> <span class=\"keyword\">implements</span> <span class=\"title\">Reader</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"gif picture reader\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * png 图片加载器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PngReader</span> <span class=\"keyword\">implements</span> <span class=\"title\">Reader</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"png picture reader\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * jpg 图片加载器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JpgReader</span> <span class=\"keyword\">implements</span> <span class=\"title\">Reader</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"jpg picture reader\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * gif 图片加载器工厂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GifReaderFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ReaderFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Reader <span class=\"title\">getReader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> GifReader();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * jpg 图片加载器工厂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JpgReaderFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ReaderFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Reader <span class=\"title\">getReader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JpgReader();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * png 图片加载器工厂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PngReaderFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ReaderFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Reader <span class=\"title\">getReader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PngReader();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 客户端</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        GifReaderFactory gifReaderFactory = <span class=\"keyword\">new</span> GifReaderFactory();</span><br><span class=\"line\">        Reader gifReader = gifReaderFactory.getReader();</span><br><span class=\"line\">        gifReader.read();</span><br><span class=\"line\"></span><br><span class=\"line\">        PngReaderFactory pngReaderFactory = <span class=\"keyword\">new</span> PngReaderFactory();</span><br><span class=\"line\">        Reader pngReader = pngReaderFactory.getReader();</span><br><span class=\"line\">        pngReader.read();</span><br><span class=\"line\"></span><br><span class=\"line\">        JpgReaderFactory jpgReaderFactory = <span class=\"keyword\">new</span> JpgReaderFactory();</span><br><span class=\"line\">        Reader jpgReader = jpgReaderFactory.getReader();</span><br><span class=\"line\">        jpgReader.read();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>工厂方法模式优点</p>\n<ul>\n<li>良好的封装性。调用者需要创建一个产品对象，只需要知道产品工厂的类名就可以了，不要了解对象创建过程，降低模块间的耦合。</li>\n<li>良好的扩展性。当有新增产品类的需求变化，只要适当扩展一个工厂类就可以完成拥抱变化</li>\n<li>屏蔽产品类。产品类如何变化，调用者不需要关心—切换数据源（数据库从MySQL切换到Oracle,需要改动的只是切换一下驱动名称）</li>\n<li>典型的解耦框架。<ul>\n<li>高层模块需要知道产品抽象类，不关心实现类—迪米特法则</li>\n<li>只依赖产品类的抽象 — 依赖倒置原则</li>\n<li>产品子类替换产品父类 — 里氏替换原则</li>\n</ul>\n</li>\n</ul>\n<p>应用场景</p>\n<ul>\n<li>所以生成对象的地方都可以使用工厂方法模式，但是要权衡增加工厂类进行管理带来的代码复杂度</li>\n<li>需要灵活、可扩展的框架是，可以采用工厂方法模式</li>\n<li>客户端不需要知道它所创建对象的类，只需要知道创建的工厂名就可以完成创建过程</li>\n</ul>\n<h3 id=\"抽象工厂\"><a href=\"#抽象工厂\" class=\"headerlink\" title=\"抽象工厂\"></a>抽象工厂</h3><blockquote>\n<p>为创建一组相关或相互依赖的对象提供一个借口，而无需指定他们的具体类。</p>\n</blockquote>\n<p>案例：设计一个兼容Android、ios、Wp三个操作系统的游戏，每个系统都有一套操作控制和界面控制器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 界面控制器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UIController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 操作控制器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OperationController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">control</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * wp ui controller</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WpUIController</span> <span class=\"keyword\">implements</span> <span class=\"title\">UIController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"wp ui controller\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ios 界面控制器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IosUIController</span> <span class=\"keyword\">implements</span> <span class=\"title\">UIController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ios ui controller\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 安卓界面控制器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidUIController</span> <span class=\"keyword\">implements</span> <span class=\"title\">UIController</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"android ui controller\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * wp 操作控制器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WpOperationController</span> <span class=\"keyword\">implements</span> <span class=\"title\">OperationController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">control</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"wp operation controller\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ios 操作控制器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IosOperationController</span> <span class=\"keyword\">implements</span> <span class=\"title\">OperationController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">control</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ios operation controller\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 安卓操作控制器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidOperationController</span> <span class=\"keyword\">implements</span> <span class=\"title\">OperationController</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">control</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"android opration controller\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SystemFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">OperationController <span class=\"title\">createOperationController</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">UIController <span class=\"title\">createUIController</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ios 工厂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IosFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">SystemFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> OperationController <span class=\"title\">createOperationController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> IosOperationController();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UIController <span class=\"title\">createUIController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> IosUIController();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * wp 工厂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WpFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">SystemFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> OperationController <span class=\"title\">createOperationController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WpOperationController();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UIController <span class=\"title\">createUIController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WpUIController();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 安卓工厂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">SystemFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> OperationController <span class=\"title\">createOperationController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AndroidOperationController();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UIController <span class=\"title\">createUIController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AndroidUIController();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AndroidFactory androidFactory = <span class=\"keyword\">new</span> AndroidFactory();</span><br><span class=\"line\">        OperationController androidOperation = androidFactory.createOperationController();</span><br><span class=\"line\">        androidOperation.control();</span><br><span class=\"line\"></span><br><span class=\"line\">        UIController androidUI = androidFactory.createUIController();</span><br><span class=\"line\">        androidUI.display();</span><br><span class=\"line\"></span><br><span class=\"line\">        IosFactory iosFactory = <span class=\"keyword\">new</span> IosFactory();</span><br><span class=\"line\">        OperationController iosOperation = iosFactory.createOperationController();</span><br><span class=\"line\">        iosOperation.control();</span><br><span class=\"line\"></span><br><span class=\"line\">        UIController iosUI = iosFactory.createUIController();</span><br><span class=\"line\">        iosUI.display();</span><br><span class=\"line\"></span><br><span class=\"line\">        WpFactory wpFactory = <span class=\"keyword\">new</span> WpFactory();</span><br><span class=\"line\">        OperationController wpOperation = wpFactory.createOperationController();</span><br><span class=\"line\">        wpOperation.control();</span><br><span class=\"line\"></span><br><span class=\"line\">        UIController wpUI = wpFactory.createUIController();</span><br><span class=\"line\">        wpUI.display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点</p>\n<ul>\n<li>封装性。高层模块不需要关心产品实现类</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>产品族扩展困难,当要新增一个控制器，所有的实现类都要改变—违反开闭原则，改变了契约，所有与契约有关系的代码都要改变</li>\n</ul>\n<p>应用场景</p>\n<ul>\n<li>不关心对象创建过程</li>\n<li>需要一组对象功能完成某种功能</li>\n<li>系统结构稳定，不会频繁的增加产品族功能，增加产品族功能就回修改原有代码，不符合开闭原则。</li>\n</ul>\n<p>注意<br>产品族扩展困难(增加控制器)，但是产品扩展容易(增加小米系统的支持)，也就是纵向扩展困难，横向扩展容易，从产品横向扩展来说，抽象工厂模式是符合开闭原则的</p>\n<p>参考文档</p>\n<p><a href=\"https://juejin.im/entry/58f5e080b123db2fa2b3c4c6\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/58f5e080b123db2fa2b3c4c6</a></p>"},{"title":"读书笔记|如何正确的创建和销毁对象(一)","date":"2019-04-13T06:55:37.000Z","_content":"\n### 静态工厂方法代替构造器\n\n\n\n\n\n\n","source":"_posts/effectiveJava/装饰器模式.md","raw":"---\ntitle: 读书笔记|如何正确的创建和销毁对象(一)\ndate: 2019-04-13 14:55:37\ntags: Notes\ncategories: 读书笔记(Effective Java) \n---\n\n### 静态工厂方法代替构造器\n\n\n\n\n\n\n","slug":"effectiveJava/装饰器模式","published":1,"updated":"2019-04-14T14:40:29.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuh1yjsj001ow3s6xtpklof3","content":"<h3 id=\"静态工厂方法代替构造器\"><a href=\"#静态工厂方法代替构造器\" class=\"headerlink\" title=\"静态工厂方法代替构造器\"></a>静态工厂方法代替构造器</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"静态工厂方法代替构造器\"><a href=\"#静态工厂方法代替构造器\" class=\"headerlink\" title=\"静态工厂方法代替构造器\"></a>静态工厂方法代替构造器</h3>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjuh1yjop0008w3s61herlgfe","category_id":"cjuh1yjok0004w3s6xhmx36cm","_id":"cjuh1yjp4000gw3s65hdzka7z"},{"post_id":"cjuh1yjo90000w3s6d6y4h1nb","category_id":"cjuh1yjok0004w3s6xhmx36cm","_id":"cjuh1yjp8000lw3s60tjquufl"},{"post_id":"cjuh1yjow0009w3s643nq3o6c","category_id":"cjuh1yjok0004w3s6xhmx36cm","_id":"cjuh1yjp9000ow3s63rmjbx5m"},{"post_id":"cjuh1yjp0000dw3s6had4ot7x","category_id":"cjuh1yjok0004w3s6xhmx36cm","_id":"cjuh1yjpb000rw3s663q1m3ej"},{"post_id":"cjuh1yjog0002w3s6eyv4ekh1","category_id":"cjuh1yjok0004w3s6xhmx36cm","_id":"cjuh1yjpc000uw3s6at608oaw"},{"post_id":"cjuh1yjp3000fw3s6zakr7lgn","category_id":"cjuh1yjok0004w3s6xhmx36cm","_id":"cjuh1yjpd000xw3s6jhuw3eaw"},{"post_id":"cjuh1yjp7000kw3s67zyva733","category_id":"cjuh1yjok0004w3s6xhmx36cm","_id":"cjuh1yjpf0010w3s6hxf472yk"},{"post_id":"cjuh1yjom0006w3s6imdew4h7","category_id":"cjuh1yjok0004w3s6xhmx36cm","_id":"cjuh1yjph0013w3s6rs25x7ls"},{"post_id":"cjuh1yjp9000nw3s6k4ymqoz9","category_id":"cjuh1yjok0004w3s6xhmx36cm","_id":"cjuh1yjpi0016w3s6owuv6zro"},{"post_id":"cjuh1yjpa000qw3s6mszqzuvx","category_id":"cjuh1yjok0004w3s6xhmx36cm","_id":"cjuh1yjpj0019w3s65e0shnb9"},{"post_id":"cjuh1yjpb000tw3s6p0ai711g","category_id":"cjuh1yjok0004w3s6xhmx36cm","_id":"cjuh1yjpk001bw3s696fazpkc"},{"post_id":"cjuh1yjpc000ww3s6944b9uz3","category_id":"cjuh1yjok0004w3s6xhmx36cm","_id":"cjuh1yjpk001dw3s6rqa8qd3c"},{"post_id":"cjuh1yjpe000zw3s68nwypq8s","category_id":"cjuh1yjok0004w3s6xhmx36cm","_id":"cjuh1yjpl001fw3s6ds8wgcwf"},{"post_id":"cjuh1yjpg0012w3s6hemiyne9","category_id":"cjuh1yjok0004w3s6xhmx36cm","_id":"cjuh1yjpl001hw3s6hu48u60g"},{"post_id":"cjuh1yjph0015w3s6xwhvj4zr","category_id":"cjuh1yjok0004w3s6xhmx36cm","_id":"cjuh1yjpl001jw3s64imo3o4l"},{"post_id":"cjuh1yjpi0018w3s6sulm1bzy","category_id":"cjuh1yjok0004w3s6xhmx36cm","_id":"cjuh1yjpl001kw3s6amhtby38"},{"post_id":"cjuh1yjr6001lw3s6jr5zhe0x","category_id":"cjuh1yjok0004w3s6xhmx36cm","_id":"cjuh1yjr8001nw3s66m9i5qxg"},{"post_id":"cjuh1yjsj001ow3s6xtpklof3","category_id":"cjuh1yjsl001pw3s62503er01","_id":"cjuh1yjsm001sw3s6gpou54g7"}],"PostTag":[{"post_id":"cjuh1yjop0008w3s61herlgfe","tag_id":"cjuh1yjom0005w3s6m6xoteq1","_id":"cjuh1yjp0000cw3s6r2segjde"},{"post_id":"cjuh1yjo90000w3s6d6y4h1nb","tag_id":"cjuh1yjom0005w3s6m6xoteq1","_id":"cjuh1yjp3000ew3s630eu7qhq"},{"post_id":"cjuh1yjow0009w3s643nq3o6c","tag_id":"cjuh1yjom0005w3s6m6xoteq1","_id":"cjuh1yjp7000jw3s6gjfdw2o0"},{"post_id":"cjuh1yjp0000dw3s6had4ot7x","tag_id":"cjuh1yjom0005w3s6m6xoteq1","_id":"cjuh1yjp8000mw3s61nvbir5f"},{"post_id":"cjuh1yjog0002w3s6eyv4ekh1","tag_id":"cjuh1yjom0005w3s6m6xoteq1","_id":"cjuh1yjpa000pw3s6b3gy9dnz"},{"post_id":"cjuh1yjp3000fw3s6zakr7lgn","tag_id":"cjuh1yjom0005w3s6m6xoteq1","_id":"cjuh1yjpb000sw3s6m3n12m5q"},{"post_id":"cjuh1yjp7000kw3s67zyva733","tag_id":"cjuh1yjom0005w3s6m6xoteq1","_id":"cjuh1yjpc000vw3s6918afsr9"},{"post_id":"cjuh1yjom0006w3s6imdew4h7","tag_id":"cjuh1yjom0005w3s6m6xoteq1","_id":"cjuh1yjpe000yw3s6wq7y2d9s"},{"post_id":"cjuh1yjp9000nw3s6k4ymqoz9","tag_id":"cjuh1yjom0005w3s6m6xoteq1","_id":"cjuh1yjpg0011w3s6vew7poxr"},{"post_id":"cjuh1yjpa000qw3s6mszqzuvx","tag_id":"cjuh1yjom0005w3s6m6xoteq1","_id":"cjuh1yjph0014w3s60odzx9e1"},{"post_id":"cjuh1yjpb000tw3s6p0ai711g","tag_id":"cjuh1yjom0005w3s6m6xoteq1","_id":"cjuh1yjpi0017w3s6hwv0y3yg"},{"post_id":"cjuh1yjpc000ww3s6944b9uz3","tag_id":"cjuh1yjom0005w3s6m6xoteq1","_id":"cjuh1yjpj001aw3s6uz3qfqdh"},{"post_id":"cjuh1yjpe000zw3s68nwypq8s","tag_id":"cjuh1yjom0005w3s6m6xoteq1","_id":"cjuh1yjpk001cw3s607tkzhfj"},{"post_id":"cjuh1yjpg0012w3s6hemiyne9","tag_id":"cjuh1yjom0005w3s6m6xoteq1","_id":"cjuh1yjpk001ew3s64zf7xu76"},{"post_id":"cjuh1yjph0015w3s6xwhvj4zr","tag_id":"cjuh1yjom0005w3s6m6xoteq1","_id":"cjuh1yjpl001gw3s6e0zen3ne"},{"post_id":"cjuh1yjpi0018w3s6sulm1bzy","tag_id":"cjuh1yjom0005w3s6m6xoteq1","_id":"cjuh1yjpl001iw3s6q1mw6cxq"},{"post_id":"cjuh1yjr6001lw3s6jr5zhe0x","tag_id":"cjuh1yjom0005w3s6m6xoteq1","_id":"cjuh1yjr7001mw3s6rspkrz99"},{"post_id":"cjuh1yjsj001ow3s6xtpklof3","tag_id":"cjuh1yjsl001qw3s6c26svqbc","_id":"cjuh1yjsm001rw3s6b1hc8xls"}],"Tag":[{"name":"Design","_id":"cjuh1yjom0005w3s6m6xoteq1"},{"name":"Notes","_id":"cjuh1yjsl001qw3s6c26svqbc"}]}}