<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>攻城虱</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-22T12:57:07.305Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Shawn You</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/03/22/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/03/22/单例模式/</id>
    <published>2019-03-22T12:57:07.305Z</published>
    <updated>2019-03-22T12:57:07.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于单例模式的一点思考"><a href="#关于单例模式的一点思考" class="headerlink" title="关于单例模式的一点思考"></a>关于单例模式的一点思考</h2><p>单例模式是一种简单的的设计模式。虽然简单，但是应用却是十分的广泛。所有有必要针对单例模式的知识点进行梳理。</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><blockquote><p>确保类只有一个实例，并自动实例化向整个系统提供全局的访问点。从定义上可以推断出单例模式更倾向于节约资源，利于资源的重用从而节约时间。所以应用单例模式的对象应该具有以下特点：</p></blockquote><ul><li>频繁地创建、销毁且性能无法优化</li><li>消耗大量资源（读取配置、产生依赖对象），可以在应用启动时直接产生一个单例对象</li><li>避免资源的多重占用 </li><li>设置全局的访问点，优化和共享资源访问</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h3 id="单例模式设计的几点考虑"><a href="#单例模式设计的几点考虑" class="headerlink" title="单例模式设计的几点考虑"></a>单例模式设计的几点考虑</h3><ul><li>延迟加载</li><li>线程安全</li><li>并发性能</li><li>序列化/反序列化安全</li></ul><table><thead><tr><th>name</th><th>延迟加载</th><th>线程安全</th><th>并发性能</th><th>序列化/反序列化安全</th></tr></thead><tbody><tr><td>饿汉式</td><td>N</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>懒汉式(不加锁)</td><td>Y</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>懒汉式(加锁)</td><td>Y</td><td>Y</td><td>N</td><td>N</td></tr><tr><td>DCL</td><td>Y</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>静态内部类</td><td>Y</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>枚举</td><td>N</td><td>Y</td><td>Y</td><td>Y</td></tr></tbody></table><h3 id="单例模式实现"><a href="#单例模式实现" class="headerlink" title="单例模式实现"></a>单例模式实现</h3><ol><li>饿汉式</li></ol><p>类加载时完成初始化</p><ul><li><p>类加载慢</p></li><li><p>获取对象速度快</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static Singleton singleton = new Singleton();</span><br><span class="line"></span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton getInstance()&#123;</span><br><span class="line">        return singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>懒汉式</li></ol><p>获取对象的时候完成初始化，实现懒加载。但是线程不安全，高并发下会出现多个实例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static Singleton instance = null;</span><br><span class="line"></span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton getInstance()&#123;</span><br><span class="line">        if( instance == null)&#123;</span><br><span class="line">            instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>懒汉式（加锁）</li></ol><p>线程安全的懒汉式单例模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class SafeSingleton &#123;</span><br><span class="line"></span><br><span class="line">    private static SafeSingleton instance = null;</span><br><span class="line"></span><br><span class="line">    private SafeSingleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized SafeSingleton getInstance()&#123;</span><br><span class="line">        if(instance == null)&#123;</span><br><span class="line">            instance = new SafeSingleton();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>双重检查DCL</li></ol><ul><li><p>synchronized同步代码块保证只创建一个对象。</p></li><li><p>条件判断使对象创建过后，不在进入同步块，减少锁的粒度。</p></li><li><p>volatitle防止指令重排序(否则出现一个线程创建一般的对象呗另一个线程访问，造成空指针)。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private volatile static Singleton instance;</span><br><span class="line"></span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton getInstance()&#123;</span><br><span class="line">        if(instance == null)&#123;</span><br><span class="line">            synchronized (Singleton.class)&#123;</span><br><span class="line">                if(instance == null)&#123;</span><br><span class="line">                    instance = new Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>静态内部类</li></ol><ul><li><p>利用ClassLoader的机制保证了线程安全</p></li><li><p>相比饿汉式单例模式，实现懒加载，只有显示调用SingleHolder才会触发初始化。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    private static class SingletonHolder&#123;</span><br><span class="line"></span><br><span class="line">        private static final Singleton instance = new Singleton();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static final Singleton getInstance()&#123;</span><br><span class="line">        return SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>枚举</li></ol><ul><li>线程安全（虚拟机加载枚举的时候，会使用ClassLoader的loadClass方法，这个方法使用同步代码块保证线程安全）</li></ul><ul><li>解决反序列化破坏单例的问题:<ul><li>普通序列化过程中，通过反射调用默认构造函数来初始化对象，反序列化的对象是新建的</li><li>枚举的反序列化不是通过构造函数实现，因此不会发生于由于反序列化导致的单例破坏问题</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public enum Singleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    public void getInstance()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何设计优秀的单例模式"><a href="#如何设计优秀的单例模式" class="headerlink" title="如何设计优秀的单例模式"></a>如何设计优秀的单例模式</h3><h3 id="引申"><a href="#引申" class="headerlink" title="引申"></a>引申</h3><ol><li>双重校验DCL为什么使用volatile</li><li>synchronized与volatile的区别</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于单例模式的一点思考&quot;&gt;&lt;a href=&quot;#关于单例模式的一点思考&quot; class=&quot;headerlink&quot; title=&quot;关于单例模式的一点思考&quot;&gt;&lt;/a&gt;关于单例模式的一点思考&lt;/h2&gt;&lt;p&gt;单例模式是一种简单的的设计模式。虽然简单，但是应用却是十分的广泛。所
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/03/16/hello-world/"/>
    <id>http://yoursite.com/2019/03/16/hello-world/</id>
    <published>2019-03-16T05:29:45.764Z</published>
    <updated>2019-03-16T05:29:45.764Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>test_my_site</title>
    <link href="http://yoursite.com/2019/03/11/test-my-site/"/>
    <id>http://yoursite.com/2019/03/11/test-my-site/</id>
    <published>2019-03-11T13:57:49.000Z</published>
    <updated>2019-03-16T05:29:45.764Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
